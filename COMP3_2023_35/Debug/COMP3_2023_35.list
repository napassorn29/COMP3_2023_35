
COMP3_2023_35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000806c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800820c  0800820c  0001820c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c0  080082c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082c8  080082c8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080082d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000080  08008350  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08008350  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f70f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ead  00000000  00000000  0002f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00031670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000323c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017793  00000000  00000000  00033080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001038a  00000000  00000000  0004a813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000960cb  00000000  00000000  0005ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0c68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bdc  00000000  00000000  000f0cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081f4 	.word	0x080081f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080081f4 	.word	0x080081f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b08e      	sub	sp, #56	; 0x38
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 fc57 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f853 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fa6d 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 fa0d 	bl	80009c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f9e1 	bl	8000970 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ae:	f000 f915 	bl	80007dc <MX_I2C1_Init>
  MX_I2C3_Init();
 80005b2:	f000 f941 	bl	8000838 <MX_I2C3_Init>
  MX_SPI3_Init();
 80005b6:	f000 f9a5 	bl	8000904 <MX_SPI3_Init>
  MX_SPI2_Init();
 80005ba:	f000 f96b 	bl	8000894 <MX_SPI2_Init>
  MX_ADC1_Init();
 80005be:	f000 f8ad 	bl	800071c <MX_ADC1_Init>
//  HAL_UART_Transmit(&huart2, text, 25, 10);
//  UARTCeaserCipherConfig();


  // Calculator
  	UARTCalculatorConfig();
 80005c2:	f000 fb01 	bl	8000bc8 <UARTCalculatorConfig>
	uint8_t text[] = "\r\n-------Calculator : press number please------\r\n";
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <main+0x98>)
 80005c8:	1d3c      	adds	r4, r7, #4
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	682b      	ldr	r3, [r5, #0]
 80005da:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, text, 50, 10);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	230a      	movs	r3, #10
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	4813      	ldr	r0, [pc, #76]	; (8000630 <main+0x9c>)
 80005e4:	f005 fecd 	bl	8006382 <HAL_UART_Transmit>


  // SPI_LED_5
 	SPITxRx_Setup();
 80005e8:	f000 fe04 	bl	80011f4 <SPITxRx_Setup>
 	setOutputGPIOB();
 80005ec:	f000 fe42 	bl	8001274 <setOutputGPIOB>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // I2C_PID 24LC64
	  Kp_Seperate(Kp);
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <main+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fce9 	bl	8000fcc <Kp_Seperate>
	  Ki_Seperate(Ki);
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <main+0xa4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fd04 	bl	800100c <Ki_Seperate>
	  Kd_Seperate(Kd);
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0xa8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fd1f 	bl	800104c <Kd_Seperate>
	  Kff_Seperate(Kff);
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <main+0xac>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fd3a 	bl	800108c <Kff_Seperate>
	  EEPROMWrite();
 8000618:	f000 fd58 	bl	80010cc <EEPROMWrite>
	  EEPROMRead(eepromReadBack,16);
 800061c:	2110      	movs	r1, #16
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <main+0xb0>)
 8000620:	f000 fdc2 	bl	80011a8 <EEPROMRead>

	  // SPI_LED_5
	  Set_SPI_LED();
 8000624:	f000 ff20 	bl	8001468 <Set_SPI_LED>
	  Kp_Seperate(Kp);
 8000628:	e7e2      	b.n	80005f0 <main+0x5c>
 800062a:	bf00      	nop
 800062c:	0800820c 	.word	0x0800820c
 8000630:	2000041c 	.word	0x2000041c
 8000634:	20000000 	.word	0x20000000
 8000638:	20000004 	.word	0x20000004
 800063c:	20000008 	.word	0x20000008
 8000640:	2000000c 	.word	0x2000000c
 8000644:	200005ac 	.word	0x200005ac

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 f956 	bl	8007908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b8:	2310      	movs	r3, #16
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fd2c 	bl	800512c <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006da:	f000 fef5 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2102      	movs	r1, #2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 ff8e 	bl	800561c <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 fedf 	bl	80014c8 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_ADC1_Init+0xb4>)
 8000730:	4a28      	ldr	r2, [pc, #160]	; (80007d4 <MX_ADC1_Init+0xb8>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_ADC1_Init+0xb4>)
 8000736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800073a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <MX_ADC1_Init+0xb4>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_ADC1_Init+0xb4>)
 8000744:	2201      	movs	r2, #1
 8000746:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <MX_ADC1_Init+0xb4>)
 800074a:	2201      	movs	r2, #1
 800074c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_ADC1_Init+0xb4>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_ADC1_Init+0xb4>)
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_ADC1_Init+0xb4>)
 800075e:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <MX_ADC1_Init+0xbc>)
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_ADC1_Init+0xb4>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_ADC1_Init+0xb4>)
 800076a:	2202      	movs	r2, #2
 800076c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_ADC1_Init+0xb4>)
 8000770:	2201      	movs	r2, #1
 8000772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_ADC1_Init+0xb4>)
 8000778:	2201      	movs	r2, #1
 800077a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077c:	4814      	ldr	r0, [pc, #80]	; (80007d0 <MX_ADC1_Init+0xb4>)
 800077e:	f001 fbfb 	bl	8001f78 <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000788:	f000 fe9e 	bl	80014c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000794:	2303      	movs	r3, #3
 8000796:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_ADC1_Init+0xb4>)
 800079e:	f001 fc2f 	bl	8002000 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a8:	f000 fe8e 	bl	80014c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_ADC1_Init+0xb4>)
 80007ba:	f001 fc21 	bl	8002000 <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007c4:	f000 fe80 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000009c 	.word	0x2000009c
 80007d4:	40012000 	.word	0x40012000
 80007d8:	0f000001 	.word	0x0f000001

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C1_Init+0x50>)
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <MX_I2C1_Init+0x54>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C1_Init+0x50>)
 80007e8:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_I2C1_Init+0x58>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_I2C1_Init+0x50>)
 80007fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_I2C1_Init+0x50>)
 800081a:	f002 fcf7 	bl	800320c <HAL_I2C_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000824:	f000 fe50 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000144 	.word	0x20000144
 8000830:	40005400 	.word	0x40005400
 8000834:	00061a80 	.word	0x00061a80

08000838 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C3_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_I2C3_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C3_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_I2C3_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C3_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2C3_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_I2C3_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_I2C3_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2C3_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_I2C3_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2C3_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_I2C3_Init+0x50>)
 8000876:	f002 fcc9 	bl	800320c <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 fe22 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000198 	.word	0x20000198
 800088c:	40005c00 	.word	0x40005c00
 8000890:	00061a80 	.word	0x00061a80

08000894 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_SPI2_Init+0x68>)
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <MX_SPI2_Init+0x6c>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_SPI2_Init+0x68>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_SPI2_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_SPI2_Init+0x68>)
 80008ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI2_Init+0x68>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_SPI2_Init+0x68>)
 80008bc:	2201      	movs	r2, #1
 80008be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI2_Init+0x68>)
 80008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI2_Init+0x68>)
 80008ca:	2220      	movs	r2, #32
 80008cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_SPI2_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI2_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_SPI2_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI2_Init+0x68>)
 80008e2:	220a      	movs	r2, #10
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_SPI2_Init+0x68>)
 80008e8:	f005 f8b8 	bl	8005a5c <HAL_SPI_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80008f2:	f000 fde9 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000036c 	.word	0x2000036c
 8000900:	40003800 	.word	0x40003800

08000904 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_SPI3_Init+0x64>)
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <MX_SPI3_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SPI3_Init+0x64>)
 8000910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_SPI3_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_SPI3_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI3_Init+0x64>)
 8000924:	2202      	movs	r2, #2
 8000926:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SPI3_Init+0x64>)
 800092a:	2201      	movs	r2, #1
 800092c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI3_Init+0x64>)
 8000930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000934:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI3_Init+0x64>)
 8000938:	2228      	movs	r2, #40	; 0x28
 800093a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_SPI3_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI3_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_SPI3_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI3_Init+0x64>)
 8000950:	220a      	movs	r2, #10
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_SPI3_Init+0x64>)
 8000956:	f005 f881 	bl	8005a5c <HAL_SPI_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000960:	f000 fdb2 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200003c4 	.word	0x200003c4
 800096c:	40003c00 	.word	0x40003c00

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_USART2_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a8:	f005 fc9e 	bl	80062e8 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f000 fd89 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000041c 	.word	0x2000041c
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_DMA_Init+0xb8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2a      	ldr	r2, [pc, #168]	; (8000a7c <MX_DMA_Init+0xb8>)
 80009d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_DMA_Init+0xb8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_DMA_Init+0xb8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_DMA_Init+0xb8>)
 80009f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_DMA_Init+0xb8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	200b      	movs	r0, #11
 8000a08:	f001 fe03 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a0c:	200b      	movs	r0, #11
 8000a0e:	f001 fe1c 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	200c      	movs	r0, #12
 8000a18:	f001 fdfb 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a1c:	200c      	movs	r0, #12
 8000a1e:	f001 fe14 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	200d      	movs	r0, #13
 8000a28:	f001 fdf3 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a2c:	200d      	movs	r0, #13
 8000a2e:	f001 fe0c 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	200f      	movs	r0, #15
 8000a38:	f001 fdeb 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	f001 fe04 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2010      	movs	r0, #16
 8000a48:	f001 fde3 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a4c:	2010      	movs	r0, #16
 8000a4e:	f001 fdfc 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2011      	movs	r0, #17
 8000a58:	f001 fddb 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a5c:	2011      	movs	r0, #17
 8000a5e:	f001 fdf4 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2038      	movs	r0, #56	; 0x38
 8000a68:	f001 fdd3 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a6c:	2038      	movs	r0, #56	; 0x38
 8000a6e:	f001 fdec 	bl	800264a <HAL_NVIC_EnableIRQ>

}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a46      	ldr	r2, [pc, #280]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a3f      	ldr	r2, [pc, #252]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a38      	ldr	r2, [pc, #224]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a2a      	ldr	r2, [pc, #168]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000b10:	f043 0308 	orr.w	r3, r3, #8
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <MX_GPIO_Init+0x138>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2103      	movs	r1, #3
 8000b26:	4825      	ldr	r0, [pc, #148]	; (8000bbc <MX_GPIO_Init+0x13c>)
 8000b28:	f002 fb56 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2120      	movs	r1, #32
 8000b30:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0x140>)
 8000b32:	f002 fb51 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x144>)
 8000b3c:	f002 fb4c 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4819      	ldr	r0, [pc, #100]	; (8000bbc <MX_GPIO_Init+0x13c>)
 8000b58:	f002 f9a2 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4812      	ldr	r0, [pc, #72]	; (8000bbc <MX_GPIO_Init+0x13c>)
 8000b74:	f002 f994 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b78:	2320      	movs	r3, #32
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <MX_GPIO_Init+0x140>)
 8000b90:	f002 f986 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b94:	2304      	movs	r3, #4
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_GPIO_Init+0x144>)
 8000bac:	f002 f978 	bl	8002ea0 <HAL_GPIO_Init>

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020c00 	.word	0x40020c00

08000bc8 <UARTCalculatorConfig>:

// Calculator

	// config
void UARTCalculatorConfig()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&huart2, receive, 1);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4903      	ldr	r1, [pc, #12]	; (8000bdc <UARTCalculatorConfig+0x14>)
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <UARTCalculatorConfig+0x18>)
 8000bd2:	f005 fce7 	bl	80065a4 <HAL_UART_Receive_DMA>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000584 	.word	0x20000584
 8000be0:	2000041c 	.word	0x2000041c

08000be4 <HAL_UART_RxCpltCallback>:

	// check state
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a5d      	ldr	r2, [pc, #372]	; (8000d64 <HAL_UART_RxCpltCallback+0x180>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	f040 80b2 	bne.w	8000d5a <HAL_UART_RxCpltCallback+0x176>
	{
		receive[1] = '\0';
 8000bf6:	4b5c      	ldr	r3, [pc, #368]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	705a      	strb	r2, [r3, #1]

		if((48 <= receive[0]) && (receive[0]<= 59) && (condition_cal == 0))
 8000bfc:	4b5a      	ldr	r3, [pc, #360]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b2f      	cmp	r3, #47	; 0x2f
 8000c02:	d91c      	bls.n	8000c3e <HAL_UART_RxCpltCallback+0x5a>
 8000c04:	4b58      	ldr	r3, [pc, #352]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b3b      	cmp	r3, #59	; 0x3b
 8000c0a:	d818      	bhi.n	8000c3e <HAL_UART_RxCpltCallback+0x5a>
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d114      	bne.n	8000c3e <HAL_UART_RxCpltCallback+0x5a>
		{
			first_number = receive[0]% 48;
 8000c14:	4b54      	ldr	r3, [pc, #336]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	4b55      	ldr	r3, [pc, #340]	; (8000d70 <HAL_UART_RxCpltCallback+0x18c>)
 8000c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c1e:	0959      	lsrs	r1, r3, #5
 8000c20:	460b      	mov	r3, r1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	440b      	add	r3, r1
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b51      	ldr	r3, [pc, #324]	; (8000d74 <HAL_UART_RxCpltCallback+0x190>)
 8000c2e:	701a      	strb	r2, [r3, #0]
			state_cal = 0;
 8000c30:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
			condition_cal = 0;
 8000c36:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e088      	b.n	8000d50 <HAL_UART_RxCpltCallback+0x16c>
		}
		else if((48 <= receive[0]) && (receive[0]<= 59))
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b2f      	cmp	r3, #47	; 0x2f
 8000c44:	d924      	bls.n	8000c90 <HAL_UART_RxCpltCallback+0xac>
 8000c46:	4b48      	ldr	r3, [pc, #288]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b3b      	cmp	r3, #59	; 0x3b
 8000c4c:	d820      	bhi.n	8000c90 <HAL_UART_RxCpltCallback+0xac>
		{
			second_number = receive[0]% 48;
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <HAL_UART_RxCpltCallback+0x18c>)
 8000c54:	fba3 1302 	umull	r1, r3, r3, r2
 8000c58:	0959      	lsrs	r1, r3, #5
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	440b      	add	r3, r1
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <HAL_UART_RxCpltCallback+0x198>)
 8000c68:	701a      	strb	r2, [r3, #0]
			state_cal = 2;
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	601a      	str	r2, [r3, #0]
			if(condition_cal == 1)condition_cal = 1;
 8000c70:	4b3e      	ldr	r3, [pc, #248]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d103      	bne.n	8000c80 <HAL_UART_RxCpltCallback+0x9c>
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e064      	b.n	8000d4a <HAL_UART_RxCpltCallback+0x166>
			else if (condition_cal == 3)condition_cal = 3;
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d160      	bne.n	8000d4a <HAL_UART_RxCpltCallback+0x166>
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	601a      	str	r2, [r3, #0]
			if(condition_cal == 1)condition_cal = 1;
 8000c8e:	e05c      	b.n	8000d4a <HAL_UART_RxCpltCallback+0x166>
		}
		else if((receive[0]=='+') || (receive[0]=='-') || (receive[0]=='*') || (receive[0]=='/'))
 8000c90:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b2b      	cmp	r3, #43	; 0x2b
 8000c96:	d00b      	beq.n	8000cb0 <HAL_UART_RxCpltCallback+0xcc>
 8000c98:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b2d      	cmp	r3, #45	; 0x2d
 8000c9e:	d007      	beq.n	8000cb0 <HAL_UART_RxCpltCallback+0xcc>
 8000ca0:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8000ca6:	d003      	beq.n	8000cb0 <HAL_UART_RxCpltCallback+0xcc>
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b2f      	cmp	r3, #47	; 0x2f
 8000cae:	d11a      	bne.n	8000ce6 <HAL_UART_RxCpltCallback+0x102>
		{
			sign = receive[0];
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <HAL_UART_RxCpltCallback+0x19c>)
 8000cb6:	701a      	strb	r2, [r3, #0]
			state_cal = 1;
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
			if((condition_cal == 0) || (condition_cal == 1))condition_cal = 1;
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_UART_RxCpltCallback+0xea>
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d103      	bne.n	8000cd6 <HAL_UART_RxCpltCallback+0xf2>
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	e03b      	b.n	8000d4e <HAL_UART_RxCpltCallback+0x16a>
			else if (condition_cal == 3)condition_cal = 3;
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d137      	bne.n	8000d4e <HAL_UART_RxCpltCallback+0x16a>
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	601a      	str	r2, [r3, #0]
			if((condition_cal == 0) || (condition_cal == 1))condition_cal = 1;
 8000ce4:	e033      	b.n	8000d4e <HAL_UART_RxCpltCallback+0x16a>
		}
		else if (((receive[0] == 13) && (condition_cal == 1)) && ((state_cal == 2)||(state_cal == 5)))
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b0d      	cmp	r3, #13
 8000cec:	d116      	bne.n	8000d1c <HAL_UART_RxCpltCallback+0x138>
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d112      	bne.n	8000d1c <HAL_UART_RxCpltCallback+0x138>
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d003      	beq.n	8000d06 <HAL_UART_RxCpltCallback+0x122>
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b05      	cmp	r3, #5
 8000d04:	d10a      	bne.n	8000d1c <HAL_UART_RxCpltCallback+0x138>
		{
			equal = receive[0];
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_UART_RxCpltCallback+0x1a0>)
 8000d0c:	701a      	strb	r2, [r3, #0]
			state_cal = 3;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000d10:	2203      	movs	r2, #3
 8000d12:	601a      	str	r2, [r3, #0]
			condition_cal = 3;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e019      	b.n	8000d50 <HAL_UART_RxCpltCallback+0x16c>
		}
		else if((receive[0] == 13) && (condition_cal == 3))
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b0d      	cmp	r3, #13
 8000d22:	d10e      	bne.n	8000d42 <HAL_UART_RxCpltCallback+0x15e>
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d10a      	bne.n	8000d42 <HAL_UART_RxCpltCallback+0x15e>
		{
			equal = receive[0];
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_UART_RxCpltCallback+0x184>)
 8000d2e:	781a      	ldrb	r2, [r3, #0]
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_UART_RxCpltCallback+0x1a0>)
 8000d32:	701a      	strb	r2, [r3, #0]
			state_cal = 4;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000d36:	2204      	movs	r2, #4
 8000d38:	601a      	str	r2, [r3, #0]
			condition_cal = 3;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_UART_RxCpltCallback+0x188>)
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e006      	b.n	8000d50 <HAL_UART_RxCpltCallback+0x16c>
		}
		else
		{
			state_cal = 5;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000d44:	2205      	movs	r2, #5
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e002      	b.n	8000d50 <HAL_UART_RxCpltCallback+0x16c>
			if(condition_cal == 1)condition_cal = 1;
 8000d4a:	bf00      	nop
 8000d4c:	e000      	b.n	8000d50 <HAL_UART_RxCpltCallback+0x16c>
			if((condition_cal == 0) || (condition_cal == 1))condition_cal = 1;
 8000d4e:	bf00      	nop
		}

		Calculator(state_cal);
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_UART_RxCpltCallback+0x194>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f817 	bl	8000d88 <Calculator>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000041c 	.word	0x2000041c
 8000d68:	20000584 	.word	0x20000584
 8000d6c:	20000590 	.word	0x20000590
 8000d70:	aaaaaaab 	.word	0xaaaaaaab
 8000d74:	20000587 	.word	0x20000587
 8000d78:	2000058c 	.word	0x2000058c
 8000d7c:	20000588 	.word	0x20000588
 8000d80:	20000586 	.word	0x20000586
 8000d84:	20000589 	.word	0x20000589

08000d88 <Calculator>:

	// calculation
void Calculator(state)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	switch(state)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	f200 8102 	bhi.w	8000f9c <Calculator+0x214>
 8000d98:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <Calculator+0x18>)
 8000d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9e:	bf00      	nop
 8000da0:	08000db9 	.word	0x08000db9
 8000da4:	08000ddd 	.word	0x08000ddd
 8000da8:	08000e01 	.word	0x08000e01
 8000dac:	08000e25 	.word	0x08000e25
 8000db0:	08000ee1 	.word	0x08000ee1
 8000db4:	08000f79 	.word	0x08000f79
	{
		//firstnum
		case 0:
		{
			sprintf((char*)TxBuffer, "%d", first_number);
 8000db8:	4b7a      	ldr	r3, [pc, #488]	; (8000fa4 <Calculator+0x21c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	497a      	ldr	r1, [pc, #488]	; (8000fa8 <Calculator+0x220>)
 8000dc0:	487a      	ldr	r0, [pc, #488]	; (8000fac <Calculator+0x224>)
 8000dc2:	f006 fda9 	bl	8007918 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000dc6:	4879      	ldr	r0, [pc, #484]	; (8000fac <Calculator+0x224>)
 8000dc8:	f7ff fa0a 	bl	80001e0 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4976      	ldr	r1, [pc, #472]	; (8000fac <Calculator+0x224>)
 8000dd4:	4876      	ldr	r0, [pc, #472]	; (8000fb0 <Calculator+0x228>)
 8000dd6:	f005 fb67 	bl	80064a8 <HAL_UART_Transmit_DMA>
		}
		break;
 8000dda:	e0df      	b.n	8000f9c <Calculator+0x214>

		//sign
		case 1:
		{
			sprintf((char*)TxBuffer, "%c", sign);
 8000ddc:	4b75      	ldr	r3, [pc, #468]	; (8000fb4 <Calculator+0x22c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4975      	ldr	r1, [pc, #468]	; (8000fb8 <Calculator+0x230>)
 8000de4:	4871      	ldr	r0, [pc, #452]	; (8000fac <Calculator+0x224>)
 8000de6:	f006 fd97 	bl	8007918 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000dea:	4870      	ldr	r0, [pc, #448]	; (8000fac <Calculator+0x224>)
 8000dec:	f7ff f9f8 	bl	80001e0 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	496d      	ldr	r1, [pc, #436]	; (8000fac <Calculator+0x224>)
 8000df8:	486d      	ldr	r0, [pc, #436]	; (8000fb0 <Calculator+0x228>)
 8000dfa:	f005 fb55 	bl	80064a8 <HAL_UART_Transmit_DMA>
		}
		break;
 8000dfe:	e0cd      	b.n	8000f9c <Calculator+0x214>

		//lastnum
		case 2:
		{
			sprintf((char*)TxBuffer, "%d", second_number);
 8000e00:	4b6e      	ldr	r3, [pc, #440]	; (8000fbc <Calculator+0x234>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4968      	ldr	r1, [pc, #416]	; (8000fa8 <Calculator+0x220>)
 8000e08:	4868      	ldr	r0, [pc, #416]	; (8000fac <Calculator+0x224>)
 8000e0a:	f006 fd85 	bl	8007918 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000e0e:	4867      	ldr	r0, [pc, #412]	; (8000fac <Calculator+0x224>)
 8000e10:	f7ff f9e6 	bl	80001e0 <strlen>
 8000e14:	4603      	mov	r3, r0
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4964      	ldr	r1, [pc, #400]	; (8000fac <Calculator+0x224>)
 8000e1c:	4864      	ldr	r0, [pc, #400]	; (8000fb0 <Calculator+0x228>)
 8000e1e:	f005 fb43 	bl	80064a8 <HAL_UART_Transmit_DMA>
		}
		break;
 8000e22:	e0bb      	b.n	8000f9c <Calculator+0x214>

		// +_*/ first round
		case 3:
		{
			if(sign=='+')Answer = first_number + second_number;
 8000e24:	4b63      	ldr	r3, [pc, #396]	; (8000fb4 <Calculator+0x22c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b2b      	cmp	r3, #43	; 0x2b
 8000e2a:	d10a      	bne.n	8000e42 <Calculator+0xba>
 8000e2c:	4b5d      	ldr	r3, [pc, #372]	; (8000fa4 <Calculator+0x21c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b62      	ldr	r3, [pc, #392]	; (8000fbc <Calculator+0x234>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b60      	ldr	r3, [pc, #384]	; (8000fc0 <Calculator+0x238>)
 8000e3e:	801a      	strh	r2, [r3, #0]
 8000e40:	e03c      	b.n	8000ebc <Calculator+0x134>
			else if(sign=='-')Answer = first_number - second_number;
 8000e42:	4b5c      	ldr	r3, [pc, #368]	; (8000fb4 <Calculator+0x22c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b2d      	cmp	r3, #45	; 0x2d
 8000e48:	d10a      	bne.n	8000e60 <Calculator+0xd8>
 8000e4a:	4b56      	ldr	r3, [pc, #344]	; (8000fa4 <Calculator+0x21c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <Calculator+0x234>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b59      	ldr	r3, [pc, #356]	; (8000fc0 <Calculator+0x238>)
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	e02d      	b.n	8000ebc <Calculator+0x134>
			else if(sign=='*')Answer = first_number * second_number;
 8000e60:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <Calculator+0x22c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b2a      	cmp	r3, #42	; 0x2a
 8000e66:	d10b      	bne.n	8000e80 <Calculator+0xf8>
 8000e68:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <Calculator+0x21c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <Calculator+0x234>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	fb12 f303 	smulbb	r3, r2, r3
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b51      	ldr	r3, [pc, #324]	; (8000fc0 <Calculator+0x238>)
 8000e7c:	801a      	strh	r2, [r3, #0]
 8000e7e:	e01d      	b.n	8000ebc <Calculator+0x134>
			else if((sign=='/') && (second_number==0))Answer = 0;
 8000e80:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <Calculator+0x22c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b2f      	cmp	r3, #47	; 0x2f
 8000e86:	d107      	bne.n	8000e98 <Calculator+0x110>
 8000e88:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <Calculator+0x234>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <Calculator+0x110>
 8000e90:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <Calculator+0x238>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	801a      	strh	r2, [r3, #0]
 8000e96:	e011      	b.n	8000ebc <Calculator+0x134>
			else if((sign=='/') && (second_number!=0))Answer = first_number / second_number;
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <Calculator+0x22c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8000e9e:	d10d      	bne.n	8000ebc <Calculator+0x134>
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <Calculator+0x234>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d009      	beq.n	8000ebc <Calculator+0x134>
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <Calculator+0x21c>)
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <Calculator+0x234>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <Calculator+0x238>)
 8000eba:	801a      	strh	r2, [r3, #0]
			sprintf((char*)TxBuffer, "=%d", Answer);
 8000ebc:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <Calculator+0x238>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4940      	ldr	r1, [pc, #256]	; (8000fc4 <Calculator+0x23c>)
 8000ec4:	4839      	ldr	r0, [pc, #228]	; (8000fac <Calculator+0x224>)
 8000ec6:	f006 fd27 	bl	8007918 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000eca:	4838      	ldr	r0, [pc, #224]	; (8000fac <Calculator+0x224>)
 8000ecc:	f7ff f988 	bl	80001e0 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4935      	ldr	r1, [pc, #212]	; (8000fac <Calculator+0x224>)
 8000ed8:	4835      	ldr	r0, [pc, #212]	; (8000fb0 <Calculator+0x228>)
 8000eda:	f005 fae5 	bl	80064a8 <HAL_UART_Transmit_DMA>
		}
		break;
 8000ede:	e05d      	b.n	8000f9c <Calculator+0x214>

		// +_*/ next round
		case 4:
		{
			if(sign=='+')Answer += second_number;
 8000ee0:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <Calculator+0x22c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b2b      	cmp	r3, #43	; 0x2b
 8000ee6:	d109      	bne.n	8000efc <Calculator+0x174>
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <Calculator+0x234>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <Calculator+0x238>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <Calculator+0x238>)
 8000ef8:	801a      	strh	r2, [r3, #0]
 8000efa:	e02b      	b.n	8000f54 <Calculator+0x1cc>
			else if(sign=='-')Answer = Answer - second_number;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <Calculator+0x22c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b2d      	cmp	r3, #45	; 0x2d
 8000f02:	d109      	bne.n	8000f18 <Calculator+0x190>
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <Calculator+0x238>)
 8000f06:	881a      	ldrh	r2, [r3, #0]
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <Calculator+0x234>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <Calculator+0x238>)
 8000f14:	801a      	strh	r2, [r3, #0]
 8000f16:	e01d      	b.n	8000f54 <Calculator+0x1cc>
			else if((sign=='/') && (second_number==0))Answer = 0;
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <Calculator+0x22c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b2f      	cmp	r3, #47	; 0x2f
 8000f1e:	d107      	bne.n	8000f30 <Calculator+0x1a8>
 8000f20:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <Calculator+0x234>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <Calculator+0x1a8>
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <Calculator+0x238>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	e011      	b.n	8000f54 <Calculator+0x1cc>
			else if((sign=='/') && (second_number!=0))Answer = Answer / second_number;
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <Calculator+0x22c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b2f      	cmp	r3, #47	; 0x2f
 8000f36:	d10d      	bne.n	8000f54 <Calculator+0x1cc>
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <Calculator+0x234>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <Calculator+0x1cc>
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <Calculator+0x238>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <Calculator+0x234>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <Calculator+0x238>)
 8000f52:	801a      	strh	r2, [r3, #0]
			sprintf((char*)TxBuffer, "=%d", Answer);
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <Calculator+0x238>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	491a      	ldr	r1, [pc, #104]	; (8000fc4 <Calculator+0x23c>)
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <Calculator+0x224>)
 8000f5e:	f006 fcdb 	bl	8007918 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000f62:	4812      	ldr	r0, [pc, #72]	; (8000fac <Calculator+0x224>)
 8000f64:	f7ff f93c 	bl	80001e0 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	490f      	ldr	r1, [pc, #60]	; (8000fac <Calculator+0x224>)
 8000f70:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <Calculator+0x228>)
 8000f72:	f005 fa99 	bl	80064a8 <HAL_UART_Transmit_DMA>
		}
		break;
 8000f76:	e011      	b.n	8000f9c <Calculator+0x214>

		// other
		case 5:
		{
			sprintf((char*)TxBuffer, "\r\nplease press number again\r\n%d", Answer);
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <Calculator+0x238>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <Calculator+0x240>)
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <Calculator+0x224>)
 8000f82:	f006 fcc9 	bl	8007918 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <Calculator+0x224>)
 8000f88:	f7ff f92a 	bl	80001e0 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	4906      	ldr	r1, [pc, #24]	; (8000fac <Calculator+0x224>)
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <Calculator+0x228>)
 8000f96:	f005 fa87 	bl	80064a8 <HAL_UART_Transmit_DMA>
		}
		break;
 8000f9a:	bf00      	nop
	}

}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000587 	.word	0x20000587
 8000fa8:	08008240 	.word	0x08008240
 8000fac:	20000520 	.word	0x20000520
 8000fb0:	2000041c 	.word	0x2000041c
 8000fb4:	20000586 	.word	0x20000586
 8000fb8:	08008244 	.word	0x08008244
 8000fbc:	20000588 	.word	0x20000588
 8000fc0:	20000594 	.word	0x20000594
 8000fc4:	08008248 	.word	0x08008248
 8000fc8:	0800824c 	.word	0x0800824c

08000fcc <Kp_Seperate>:

// PID 24LC64

	// set value Kp
void Kp_Seperate(Kp)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	Kp_sep[0] = (uint8_t)(Kp >> 24) & 0xFF;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	161b      	asrs	r3, r3, #24
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <Kp_Seperate+0x3c>)
 8000fdc:	701a      	strb	r2, [r3, #0]
	Kp_sep[1] = (uint8_t)(Kp >> 16) & 0xFF;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	141b      	asrs	r3, r3, #16
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <Kp_Seperate+0x3c>)
 8000fe6:	705a      	strb	r2, [r3, #1]
	Kp_sep[2] = (uint8_t)(Kp >> 8) & 0xFF;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	121b      	asrs	r3, r3, #8
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <Kp_Seperate+0x3c>)
 8000ff0:	709a      	strb	r2, [r3, #2]
	Kp_sep[3] = (uint8_t)(Kp) & 0xFF;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <Kp_Seperate+0x3c>)
 8000ff8:	70da      	strb	r2, [r3, #3]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000598 	.word	0x20000598

0800100c <Ki_Seperate>:

	// set value Ki
void Ki_Seperate(Ki)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	Ki_sep[0] = (uint8_t)(Ki >> 24) & 0xFF;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	161b      	asrs	r3, r3, #24
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <Ki_Seperate+0x3c>)
 800101c:	701a      	strb	r2, [r3, #0]
	Ki_sep[1] = (uint8_t)(Ki >> 16) & 0xFF;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	141b      	asrs	r3, r3, #16
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <Ki_Seperate+0x3c>)
 8001026:	705a      	strb	r2, [r3, #1]
	Ki_sep[2] = (uint8_t)(Ki >> 8) & 0xFF;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	121b      	asrs	r3, r3, #8
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <Ki_Seperate+0x3c>)
 8001030:	709a      	strb	r2, [r3, #2]
	Ki_sep[3] = (uint8_t)(Ki) & 0xFF;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <Ki_Seperate+0x3c>)
 8001038:	70da      	strb	r2, [r3, #3]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000059c 	.word	0x2000059c

0800104c <Kd_Seperate>:

	// set value Kd
void Kd_Seperate(Kd)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	Kd_sep[0] = (uint8_t)(Kd >> 24) & 0xFF;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	161b      	asrs	r3, r3, #24
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <Kd_Seperate+0x3c>)
 800105c:	701a      	strb	r2, [r3, #0]
	Kd_sep[1] = (uint8_t)(Kd >> 16) & 0xFF;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	141b      	asrs	r3, r3, #16
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <Kd_Seperate+0x3c>)
 8001066:	705a      	strb	r2, [r3, #1]
	Kd_sep[2] = (uint8_t)(Kd >> 8) & 0xFF;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	121b      	asrs	r3, r3, #8
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <Kd_Seperate+0x3c>)
 8001070:	709a      	strb	r2, [r3, #2]
	Kd_sep[3] = (uint8_t)(Kd) & 0xFF;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <Kd_Seperate+0x3c>)
 8001078:	70da      	strb	r2, [r3, #3]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200005a0 	.word	0x200005a0

0800108c <Kff_Seperate>:

	// set value Kff
void Kff_Seperate(Kff)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	Kff_sep[0] = (uint8_t)(Kff >> 24) & 0xFF;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	161b      	asrs	r3, r3, #24
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <Kff_Seperate+0x3c>)
 800109c:	701a      	strb	r2, [r3, #0]
	Kff_sep[1] = (uint8_t)(Kff >> 16) & 0xFF;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	141b      	asrs	r3, r3, #16
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <Kff_Seperate+0x3c>)
 80010a6:	705a      	strb	r2, [r3, #1]
	Kff_sep[2] = (uint8_t)(Kff >> 8) & 0xFF;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	121b      	asrs	r3, r3, #8
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <Kff_Seperate+0x3c>)
 80010b0:	709a      	strb	r2, [r3, #2]
	Kff_sep[3] = (uint8_t)(Kff) & 0xFF;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <Kff_Seperate+0x3c>)
 80010b8:	70da      	strb	r2, [r3, #3]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200005a4 	.word	0x200005a4

080010cc <EEPROMWrite>:


void EEPROMWrite()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af02      	add	r7, sp, #8
    if (eepromWriteF && hi2c1.State == HAL_I2C_STATE_READY)
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <EEPROMWrite+0xc0>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d055      	beq.n	8001186 <EEPROMWrite+0xba>
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <EEPROMWrite+0xc4>)
 80010dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b20      	cmp	r3, #32
 80010e4:	d14f      	bne.n	8001186 <EEPROMWrite+0xba>
    {
        static uint8_t PID_data[16];

        PID_data[0] = Kp_sep[0];
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <EEPROMWrite+0xc8>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <EEPROMWrite+0xcc>)
 80010ec:	701a      	strb	r2, [r3, #0]
        PID_data[1] = Kp_sep[1];
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <EEPROMWrite+0xc8>)
 80010f0:	785a      	ldrb	r2, [r3, #1]
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <EEPROMWrite+0xcc>)
 80010f4:	705a      	strb	r2, [r3, #1]
        PID_data[2] = Kp_sep[2];
 80010f6:	4b27      	ldr	r3, [pc, #156]	; (8001194 <EEPROMWrite+0xc8>)
 80010f8:	789a      	ldrb	r2, [r3, #2]
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <EEPROMWrite+0xcc>)
 80010fc:	709a      	strb	r2, [r3, #2]
        PID_data[3] = Kp_sep[3];
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <EEPROMWrite+0xc8>)
 8001100:	78da      	ldrb	r2, [r3, #3]
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <EEPROMWrite+0xcc>)
 8001104:	70da      	strb	r2, [r3, #3]
        PID_data[4] = Ki_sep[0];
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <EEPROMWrite+0xd0>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <EEPROMWrite+0xcc>)
 800110c:	711a      	strb	r2, [r3, #4]
        PID_data[5] = Ki_sep[1];
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <EEPROMWrite+0xd0>)
 8001110:	785a      	ldrb	r2, [r3, #1]
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <EEPROMWrite+0xcc>)
 8001114:	715a      	strb	r2, [r3, #5]
        PID_data[6] = Ki_sep[2];
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <EEPROMWrite+0xd0>)
 8001118:	789a      	ldrb	r2, [r3, #2]
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <EEPROMWrite+0xcc>)
 800111c:	719a      	strb	r2, [r3, #6]
        PID_data[7] = Ki_sep[3];
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <EEPROMWrite+0xd0>)
 8001120:	78da      	ldrb	r2, [r3, #3]
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <EEPROMWrite+0xcc>)
 8001124:	71da      	strb	r2, [r3, #7]
        PID_data[8] = Kd_sep[0];
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <EEPROMWrite+0xd4>)
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <EEPROMWrite+0xcc>)
 800112c:	721a      	strb	r2, [r3, #8]
        PID_data[9] = Kd_sep[1];
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <EEPROMWrite+0xd4>)
 8001130:	785a      	ldrb	r2, [r3, #1]
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <EEPROMWrite+0xcc>)
 8001134:	725a      	strb	r2, [r3, #9]
        PID_data[10] = Kd_sep[2];
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <EEPROMWrite+0xd4>)
 8001138:	789a      	ldrb	r2, [r3, #2]
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <EEPROMWrite+0xcc>)
 800113c:	729a      	strb	r2, [r3, #10]
        PID_data[11] = Kd_sep[3];
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <EEPROMWrite+0xd4>)
 8001140:	78da      	ldrb	r2, [r3, #3]
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <EEPROMWrite+0xcc>)
 8001144:	72da      	strb	r2, [r3, #11]
        PID_data[12] = Kff_sep[0];
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <EEPROMWrite+0xd8>)
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <EEPROMWrite+0xcc>)
 800114c:	731a      	strb	r2, [r3, #12]
        PID_data[13] = Kff_sep[1];
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <EEPROMWrite+0xd8>)
 8001150:	785a      	ldrb	r2, [r3, #1]
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <EEPROMWrite+0xcc>)
 8001154:	735a      	strb	r2, [r3, #13]
        PID_data[14] = Kff_sep[2];
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <EEPROMWrite+0xd8>)
 8001158:	789a      	ldrb	r2, [r3, #2]
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <EEPROMWrite+0xcc>)
 800115c:	739a      	strb	r2, [r3, #14]
        PID_data[15] = Kff_sep[3];
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <EEPROMWrite+0xd8>)
 8001160:	78da      	ldrb	r2, [r3, #3]
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <EEPROMWrite+0xcc>)
 8001164:	73da      	strb	r2, [r3, #15]

        if (HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x30, I2C_MEMADD_SIZE_16BIT, PID_data, 16) == HAL_OK)
 8001166:	2310      	movs	r3, #16
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <EEPROMWrite+0xcc>)
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2310      	movs	r3, #16
 8001170:	2230      	movs	r2, #48	; 0x30
 8001172:	21a0      	movs	r1, #160	; 0xa0
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <EEPROMWrite+0xc4>)
 8001176:	f002 f98d 	bl	8003494 <HAL_I2C_Mem_Write_IT>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <EEPROMWrite+0xba>
        {
            eepromWriteF = 0; // Clear the write flag after initiating the write operation
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <EEPROMWrite+0xc0>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
        else
        {
            // Error handling if write operation fails
        }
    }
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200005a8 	.word	0x200005a8
 8001190:	20000144 	.word	0x20000144
 8001194:	20000598 	.word	0x20000598
 8001198:	200005d4 	.word	0x200005d4
 800119c:	2000059c 	.word	0x2000059c
 80011a0:	200005a0 	.word	0x200005a0
 80011a4:	200005a4 	.word	0x200005a4

080011a8 <EEPROMRead>:

void EEPROMRead(uint8_t *Rdata,uint16_t len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
	if (eepromReadF && hi2c1.State == HAL_I2C_STATE_READY)
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <EEPROMRead+0x44>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d012      	beq.n	80011e2 <EEPROMRead+0x3a>
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <EEPROMRead+0x48>)
 80011be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d10c      	bne.n	80011e2 <EEPROMRead+0x3a>
	{
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x30, I2C_MEMADD_SIZE_16BIT, Rdata, len);
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2310      	movs	r3, #16
 80011d2:	2230      	movs	r2, #48	; 0x30
 80011d4:	21a0      	movs	r1, #160	; 0xa0
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <EEPROMRead+0x48>)
 80011d8:	f002 fa0e 	bl	80035f8 <HAL_I2C_Mem_Read_IT>

		eepromReadF = 0;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <EEPROMRead+0x44>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
	}
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200005a9 	.word	0x200005a9
 80011f0:	20000144 	.word	0x20000144

080011f4 <SPITxRx_Setup>:



//SPI_LED_5
void SPITxRx_Setup()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <SPITxRx_Setup+0x28>)
 80011fe:	f001 ffeb 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001202:	2001      	movs	r0, #1
 8001204:	f000 fe94 	bl	8001f30 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8001208:	2201      	movs	r2, #1
 800120a:	2104      	movs	r1, #4
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <SPITxRx_Setup+0x28>)
 800120e:	f001 ffe3 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f000 fe8c 	bl	8001f30 <HAL_Delay>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40020c00 	.word	0x40020c00

08001220 <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 8001224:	2104      	movs	r1, #4
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <SPITxRx_readIO+0x44>)
 8001228:	f001 ffbe 	bl	80031a8 <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d016      	beq.n	8001260 <SPITxRx_readIO+0x40>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2104      	movs	r1, #4
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <SPITxRx_readIO+0x44>)
 8001238:	f001 ffce 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <SPITxRx_readIO+0x48>)
 800123e:	2241      	movs	r2, #65	; 0x41
 8001240:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <SPITxRx_readIO+0x48>)
 8001244:	2212      	movs	r2, #18
 8001246:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <SPITxRx_readIO+0x48>)
 800124a:	2200      	movs	r2, #0
 800124c:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SPITxRx_readIO+0x48>)
 8001250:	2200      	movs	r2, #0
 8001252:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8001254:	2304      	movs	r3, #4
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SPITxRx_readIO+0x4c>)
 8001258:	4903      	ldr	r1, [pc, #12]	; (8001268 <SPITxRx_readIO+0x48>)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <SPITxRx_readIO+0x50>)
 800125c:	f004 fc88 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
	}
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40020c00 	.word	0x40020c00
 8001268:	200005c8 	.word	0x200005c8
 800126c:	200005bc 	.word	0x200005bc
 8001270:	200003c4 	.word	0x200003c4

08001274 <setOutputGPIOB>:


void setOutputGPIOB()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 8001278:	2104      	movs	r1, #4
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <setOutputGPIOB+0x40>)
 800127c:	f001 ff94 	bl	80031a8 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d013      	beq.n	80012ae <setOutputGPIOB+0x3a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2104      	movs	r1, #4
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <setOutputGPIOB+0x40>)
 800128c:	f001 ffa4 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <setOutputGPIOB+0x44>)
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x01;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <setOutputGPIOB+0x44>)
 8001298:	2201      	movs	r2, #1
 800129a:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00000000;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <setOutputGPIOB+0x44>)
 800129e:	2200      	movs	r2, #0
 80012a0:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80012a2:	2303      	movs	r3, #3
 80012a4:	4a05      	ldr	r2, [pc, #20]	; (80012bc <setOutputGPIOB+0x48>)
 80012a6:	4904      	ldr	r1, [pc, #16]	; (80012b8 <setOutputGPIOB+0x44>)
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <setOutputGPIOB+0x4c>)
 80012aa:	f004 fc61 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
	}
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	200005c8 	.word	0x200005c8
 80012bc:	200005bc 	.word	0x200005bc
 80012c0:	200003c4 	.word	0x200003c4

080012c4 <SPITxRx_writeIO>:

void SPITxRx_writeIO()
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 80012c8:	2104      	movs	r1, #4
 80012ca:	485b      	ldr	r0, [pc, #364]	; (8001438 <SPITxRx_writeIO+0x174>)
 80012cc:	f001 ff6c 	bl	80031a8 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80ae 	beq.w	8001434 <SPITxRx_writeIO+0x170>
	{
		// pattern1
		if(SPIRx[2] == 0b00000010)
 80012d8:	4b58      	ldr	r3, [pc, #352]	; (800143c <SPITxRx_writeIO+0x178>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <SPITxRx_writeIO+0x7e>
		{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2104      	movs	r1, #4
 80012e4:	4854      	ldr	r0, [pc, #336]	; (8001438 <SPITxRx_writeIO+0x174>)
 80012e6:	f001 ff77 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 80012ea:	4b55      	ldr	r3, [pc, #340]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80012ec:	2240      	movs	r2, #64	; 0x40
 80012ee:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 80012f0:	4b53      	ldr	r3, [pc, #332]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80012f2:	2213      	movs	r2, #19
 80012f4:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b10101010;
 80012f6:	4b52      	ldr	r3, [pc, #328]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80012f8:	22aa      	movs	r2, #170	; 0xaa
 80012fa:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80012fc:	2303      	movs	r3, #3
 80012fe:	4a4f      	ldr	r2, [pc, #316]	; (800143c <SPITxRx_writeIO+0x178>)
 8001300:	494f      	ldr	r1, [pc, #316]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001302:	4850      	ldr	r0, [pc, #320]	; (8001444 <SPITxRx_writeIO+0x180>)
 8001304:	f004 fc34 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(500);
 8001308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130c:	f000 fe10 	bl	8001f30 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2104      	movs	r1, #4
 8001314:	4848      	ldr	r0, [pc, #288]	; (8001438 <SPITxRx_writeIO+0x174>)
 8001316:	f001 ff5f 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <SPITxRx_writeIO+0x17c>)
 800131c:	2240      	movs	r2, #64	; 0x40
 800131e:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001322:	2213      	movs	r2, #19
 8001324:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b01010101;
 8001326:	4b46      	ldr	r3, [pc, #280]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001328:	2255      	movs	r2, #85	; 0x55
 800132a:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 800132c:	2303      	movs	r3, #3
 800132e:	4a43      	ldr	r2, [pc, #268]	; (800143c <SPITxRx_writeIO+0x178>)
 8001330:	4943      	ldr	r1, [pc, #268]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001332:	4844      	ldr	r0, [pc, #272]	; (8001444 <SPITxRx_writeIO+0x180>)
 8001334:	f004 fc1c 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(500);
 8001338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133c:	f000 fdf8 	bl	8001f30 <HAL_Delay>
		SPITx[2] = 0b11111100;
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
		HAL_Delay(100);
		}
	}
}
 8001340:	e078      	b.n	8001434 <SPITxRx_writeIO+0x170>
		else if(SPIRx[2] == 0b00000011)
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <SPITxRx_writeIO+0x178>)
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d114      	bne.n	8001374 <SPITxRx_writeIO+0xb0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	483a      	ldr	r0, [pc, #232]	; (8001438 <SPITxRx_writeIO+0x174>)
 8001350:	f001 ff42 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001356:	2240      	movs	r2, #64	; 0x40
 8001358:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <SPITxRx_writeIO+0x17c>)
 800135c:	2213      	movs	r2, #19
 800135e:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111111;
 8001360:	4b37      	ldr	r3, [pc, #220]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001362:	22ff      	movs	r2, #255	; 0xff
 8001364:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8001366:	2303      	movs	r3, #3
 8001368:	4a34      	ldr	r2, [pc, #208]	; (800143c <SPITxRx_writeIO+0x178>)
 800136a:	4935      	ldr	r1, [pc, #212]	; (8001440 <SPITxRx_writeIO+0x17c>)
 800136c:	4835      	ldr	r0, [pc, #212]	; (8001444 <SPITxRx_writeIO+0x180>)
 800136e:	f004 fbff 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
}
 8001372:	e05f      	b.n	8001434 <SPITxRx_writeIO+0x170>
		else if(SPIRx[2] == 0b00000001)
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <SPITxRx_writeIO+0x178>)
 8001376:	789b      	ldrb	r3, [r3, #2]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d15b      	bne.n	8001434 <SPITxRx_writeIO+0x170>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2104      	movs	r1, #4
 8001380:	482d      	ldr	r0, [pc, #180]	; (8001438 <SPITxRx_writeIO+0x174>)
 8001382:	f001 ff29 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001388:	2240      	movs	r2, #64	; 0x40
 800138a:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <SPITxRx_writeIO+0x17c>)
 800138e:	2213      	movs	r2, #19
 8001390:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00111111;
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001394:	223f      	movs	r2, #63	; 0x3f
 8001396:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8001398:	2303      	movs	r3, #3
 800139a:	4a28      	ldr	r2, [pc, #160]	; (800143c <SPITxRx_writeIO+0x178>)
 800139c:	4928      	ldr	r1, [pc, #160]	; (8001440 <SPITxRx_writeIO+0x17c>)
 800139e:	4829      	ldr	r0, [pc, #164]	; (8001444 <SPITxRx_writeIO+0x180>)
 80013a0:	f004 fbe6 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f000 fdc3 	bl	8001f30 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2104      	movs	r1, #4
 80013ae:	4822      	ldr	r0, [pc, #136]	; (8001438 <SPITxRx_writeIO+0x174>)
 80013b0:	f001 ff12 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80013bc:	2213      	movs	r2, #19
 80013be:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11001111;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80013c2:	22cf      	movs	r2, #207	; 0xcf
 80013c4:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80013c6:	2303      	movs	r3, #3
 80013c8:	4a1c      	ldr	r2, [pc, #112]	; (800143c <SPITxRx_writeIO+0x178>)
 80013ca:	491d      	ldr	r1, [pc, #116]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80013cc:	481d      	ldr	r0, [pc, #116]	; (8001444 <SPITxRx_writeIO+0x180>)
 80013ce:	f004 fbcf 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f000 fdac 	bl	8001f30 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2104      	movs	r1, #4
 80013dc:	4816      	ldr	r0, [pc, #88]	; (8001438 <SPITxRx_writeIO+0x174>)
 80013de:	f001 fefb 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80013e4:	2240      	movs	r2, #64	; 0x40
 80013e6:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80013ea:	2213      	movs	r2, #19
 80013ec:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11110011;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80013f0:	22f3      	movs	r2, #243	; 0xf3
 80013f2:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80013f4:	2303      	movs	r3, #3
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <SPITxRx_writeIO+0x178>)
 80013f8:	4911      	ldr	r1, [pc, #68]	; (8001440 <SPITxRx_writeIO+0x17c>)
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <SPITxRx_writeIO+0x180>)
 80013fc:	f004 fbb8 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f000 fd95 	bl	8001f30 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2104      	movs	r1, #4
 800140a:	480b      	ldr	r0, [pc, #44]	; (8001438 <SPITxRx_writeIO+0x174>)
 800140c:	f001 fee4 	bl	80031d8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001418:	2213      	movs	r2, #19
 800141a:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111100;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <SPITxRx_writeIO+0x17c>)
 800141e:	22fc      	movs	r2, #252	; 0xfc
 8001420:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8001422:	2303      	movs	r3, #3
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <SPITxRx_writeIO+0x178>)
 8001426:	4906      	ldr	r1, [pc, #24]	; (8001440 <SPITxRx_writeIO+0x17c>)
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <SPITxRx_writeIO+0x180>)
 800142a:	f004 fba1 	bl	8005b70 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 800142e:	2064      	movs	r0, #100	; 0x64
 8001430:	f000 fd7e 	bl	8001f30 <HAL_Delay>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020c00 	.word	0x40020c00
 800143c:	200005bc 	.word	0x200005bc
 8001440:	200005c8 	.word	0x200005c8
 8001444:	200003c4 	.word	0x200003c4

08001448 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8001450:	2201      	movs	r2, #1
 8001452:	2104      	movs	r1, #4
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8001456:	f001 febf 	bl	80031d8 <HAL_GPIO_WritePin>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40020c00 	.word	0x40020c00

08001468 <Set_SPI_LED>:


void Set_SPI_LED()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick() > timestamp)
 800146c:	f000 fd54 	bl	8001f18 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <Set_SPI_LED+0x58>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d91f      	bls.n	80014ba <Set_SPI_LED+0x52>
	{
		timestamp = HAL_GetTick() + 10;
 800147a:	f000 fd4d 	bl	8001f18 <HAL_GetTick>
 800147e:	4603      	mov	r3, r0
 8001480:	330a      	adds	r3, #10
 8001482:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <Set_SPI_LED+0x58>)
 8001484:	6013      	str	r3, [r2, #0]
		LEDstate++;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <Set_SPI_LED+0x5c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <Set_SPI_LED+0x5c>)
 8001490:	701a      	strb	r2, [r3, #0]
		LEDstate = LEDstate % 2;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <Set_SPI_LED+0x5c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <Set_SPI_LED+0x5c>)
 800149e:	701a      	strb	r2, [r3, #0]
		switch (LEDstate)
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <Set_SPI_LED+0x5c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <Set_SPI_LED+0x46>
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d003      	beq.n	80014b4 <Set_SPI_LED+0x4c>
		case 1:
		  SPITxRx_writeIO();
		  break;
		}
	}
}
 80014ac:	e006      	b.n	80014bc <Set_SPI_LED+0x54>
		  SPITxRx_readIO();
 80014ae:	f7ff feb7 	bl	8001220 <SPITxRx_readIO>
		  break;
 80014b2:	e003      	b.n	80014bc <Set_SPI_LED+0x54>
		  SPITxRx_writeIO();
 80014b4:	f7ff ff06 	bl	80012c4 <SPITxRx_writeIO>
		  break;
 80014b8:	e000      	b.n	80014bc <Set_SPI_LED+0x54>
	}
 80014ba:	bf00      	nop
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200005e4 	.word	0x200005e4
 80014c4:	200005d2 	.word	0x200005d2

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <HAL_MspInit+0x4c>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x4c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001512:	2007      	movs	r0, #7
 8001514:	f001 f872 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a2f      	ldr	r2, [pc, #188]	; (8001600 <HAL_ADC_MspInit+0xdc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d157      	bne.n	80015f6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_ADC_MspInit+0xe0>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <HAL_ADC_MspInit+0xe0>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <HAL_ADC_MspInit+0xe0>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b27      	ldr	r3, [pc, #156]	; (8001604 <HAL_ADC_MspInit+0xe0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a26      	ldr	r2, [pc, #152]	; (8001604 <HAL_ADC_MspInit+0xe0>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_ADC_MspInit+0xe0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800157e:	2303      	movs	r3, #3
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001582:	2303      	movs	r3, #3
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	481d      	ldr	r0, [pc, #116]	; (8001608 <HAL_ADC_MspInit+0xe4>)
 8001592:	f001 fc85 	bl	8002ea0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_ADC_MspInit+0xe8>)
 8001598:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_ADC_MspInit+0xec>)
 800159a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_ADC_MspInit+0xe8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015da:	480c      	ldr	r0, [pc, #48]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015dc:	f001 f850 	bl	8002680 <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015e6:	f7ff ff6f 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_ADC_MspInit+0xe8>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40012000 	.word	0x40012000
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000
 800160c:	200000e4 	.word	0x200000e4
 8001610:	40026410 	.word	0x40026410

08001614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a50      	ldr	r2, [pc, #320]	; (8001774 <HAL_I2C_MspInit+0x160>)
 8001632:	4293      	cmp	r3, r2
 8001634:	f040 80ac 	bne.w	8001790 <HAL_I2C_MspInit+0x17c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <HAL_I2C_MspInit+0x164>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <HAL_I2C_MspInit+0x164>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
 8001648:	4b4b      	ldr	r3, [pc, #300]	; (8001778 <HAL_I2C_MspInit+0x164>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001654:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001666:	2304      	movs	r3, #4
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4842      	ldr	r0, [pc, #264]	; (800177c <HAL_I2C_MspInit+0x168>)
 8001672:	f001 fc15 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_I2C_MspInit+0x164>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a3e      	ldr	r2, [pc, #248]	; (8001778 <HAL_I2C_MspInit+0x164>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <HAL_I2C_MspInit+0x164>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 8001694:	4a3b      	ldr	r2, [pc, #236]	; (8001784 <HAL_I2C_MspInit+0x170>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 800169a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800169e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016d6:	482a      	ldr	r0, [pc, #168]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016d8:	f000 ffd2 	bl	8002680 <HAL_DMA_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_MspInit+0xd2>
    {
      Error_Handler();
 80016e2:	f7ff fef1 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
 80016ec:	4a24      	ldr	r2, [pc, #144]	; (8001780 <HAL_I2C_MspInit+0x16c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_I2C_MspInit+0x174>)
 80016f4:	4a25      	ldr	r2, [pc, #148]	; (800178c <HAL_I2C_MspInit+0x178>)
 80016f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_I2C_MspInit+0x174>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_I2C_MspInit+0x174>)
 8001700:	2240      	movs	r2, #64	; 0x40
 8001702:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_I2C_MspInit+0x174>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_I2C_MspInit+0x174>)
 800170c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001710:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_I2C_MspInit+0x174>)
 8001714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001718:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_I2C_MspInit+0x174>)
 800171c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001720:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_I2C_MspInit+0x174>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_I2C_MspInit+0x174>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_I2C_MspInit+0x174>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001734:	4814      	ldr	r0, [pc, #80]	; (8001788 <HAL_I2C_MspInit+0x174>)
 8001736:	f000 ffa3 	bl	8002680 <HAL_DMA_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 8001740:	f7ff fec2 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_I2C_MspInit+0x174>)
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_I2C_MspInit+0x174>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	201f      	movs	r0, #31
 8001756:	f000 ff5c 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800175a:	201f      	movs	r0, #31
 800175c:	f000 ff75 	bl	800264a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2020      	movs	r0, #32
 8001766:	f000 ff54 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800176a:	2020      	movs	r0, #32
 800176c:	f000 ff6d 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001770:	e0cc      	b.n	800190c <HAL_I2C_MspInit+0x2f8>
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400
 8001780:	200001ec 	.word	0x200001ec
 8001784:	40026010 	.word	0x40026010
 8001788:	2000024c 	.word	0x2000024c
 800178c:	40026028 	.word	0x40026028
  else if(hi2c->Instance==I2C3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5f      	ldr	r2, [pc, #380]	; (8001914 <HAL_I2C_MspInit+0x300>)
 8001796:	4293      	cmp	r3, r2
 8001798:	f040 80b8 	bne.w	800190c <HAL_I2C_MspInit+0x2f8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	4b5d      	ldr	r3, [pc, #372]	; (8001918 <HAL_I2C_MspInit+0x304>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	4a5c      	ldr	r2, [pc, #368]	; (8001918 <HAL_I2C_MspInit+0x304>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6313      	str	r3, [r2, #48]	; 0x30
 80017ac:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <HAL_I2C_MspInit+0x304>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b56      	ldr	r3, [pc, #344]	; (8001918 <HAL_I2C_MspInit+0x304>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a55      	ldr	r2, [pc, #340]	; (8001918 <HAL_I2C_MspInit+0x304>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_I2C_MspInit+0x304>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017e6:	2304      	movs	r3, #4
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	484a      	ldr	r0, [pc, #296]	; (800191c <HAL_I2C_MspInit+0x308>)
 80017f2:	f001 fb55 	bl	8002ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fc:	2312      	movs	r3, #18
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001808:	2304      	movs	r3, #4
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4843      	ldr	r0, [pc, #268]	; (8001920 <HAL_I2C_MspInit+0x30c>)
 8001814:	f001 fb44 	bl	8002ea0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_I2C_MspInit+0x304>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a3d      	ldr	r2, [pc, #244]	; (8001918 <HAL_I2C_MspInit+0x304>)
 8001822:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_I2C_MspInit+0x304>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8001834:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_I2C_MspInit+0x310>)
 8001836:	4a3c      	ldr	r2, [pc, #240]	; (8001928 <HAL_I2C_MspInit+0x314>)
 8001838:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 800183a:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <HAL_I2C_MspInit+0x310>)
 800183c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001840:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_I2C_MspInit+0x310>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001848:	4b36      	ldr	r3, [pc, #216]	; (8001924 <HAL_I2C_MspInit+0x310>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_I2C_MspInit+0x310>)
 8001850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001854:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <HAL_I2C_MspInit+0x310>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185c:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_I2C_MspInit+0x310>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_I2C_MspInit+0x310>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <HAL_I2C_MspInit+0x310>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_I2C_MspInit+0x310>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001874:	482b      	ldr	r0, [pc, #172]	; (8001924 <HAL_I2C_MspInit+0x310>)
 8001876:	f000 ff03 	bl	8002680 <HAL_DMA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_MspInit+0x270>
      Error_Handler();
 8001880:	f7ff fe22 	bl	80014c8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a27      	ldr	r2, [pc, #156]	; (8001924 <HAL_I2C_MspInit+0x310>)
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
 800188a:	4a26      	ldr	r2, [pc, #152]	; (8001924 <HAL_I2C_MspInit+0x310>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_I2C_MspInit+0x318>)
 8001892:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_I2C_MspInit+0x31c>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8001896:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_I2C_MspInit+0x318>)
 8001898:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800189c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018a0:	2240      	movs	r2, #64	; 0x40
 80018a2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80018d0:	4816      	ldr	r0, [pc, #88]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018d2:	f000 fed5 	bl	8002680 <HAL_DMA_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_I2C_MspInit+0x2cc>
      Error_Handler();
 80018dc:	f7ff fdf4 	bl	80014c8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34
 80018e6:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_I2C_MspInit+0x318>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	2048      	movs	r0, #72	; 0x48
 80018f2:	f000 fe8e 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80018f6:	2048      	movs	r0, #72	; 0x48
 80018f8:	f000 fea7 	bl	800264a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2049      	movs	r0, #73	; 0x49
 8001902:	f000 fe86 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001906:	2049      	movs	r0, #73	; 0x49
 8001908:	f000 fe9f 	bl	800264a <HAL_NVIC_EnableIRQ>
}
 800190c:	bf00      	nop
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40005c00 	.word	0x40005c00
 8001918:	40023800 	.word	0x40023800
 800191c:	40020800 	.word	0x40020800
 8001920:	40020000 	.word	0x40020000
 8001924:	200002ac 	.word	0x200002ac
 8001928:	40026040 	.word	0x40026040
 800192c:	2000030c 	.word	0x2000030c
 8001930:	40026070 	.word	0x40026070

08001934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a4a      	ldr	r2, [pc, #296]	; (8001a7c <HAL_SPI_MspInit+0x148>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d153      	bne.n	80019fe <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	4b49      	ldr	r3, [pc, #292]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	4b42      	ldr	r3, [pc, #264]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a41      	ldr	r2, [pc, #260]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019aa:	230c      	movs	r3, #12
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ba:	2305      	movs	r3, #5
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	482f      	ldr	r0, [pc, #188]	; (8001a84 <HAL_SPI_MspInit+0x150>)
 80019c6:	f001 fa6b 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019dc:	2305      	movs	r3, #5
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4828      	ldr	r0, [pc, #160]	; (8001a88 <HAL_SPI_MspInit+0x154>)
 80019e8:	f001 fa5a 	bl	8002ea0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2024      	movs	r0, #36	; 0x24
 80019f2:	f000 fe0e 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019f6:	2024      	movs	r0, #36	; 0x24
 80019f8:	f000 fe27 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019fc:	e039      	b.n	8001a72 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <HAL_SPI_MspInit+0x158>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d134      	bne.n	8001a72 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a16:	6413      	str	r3, [r2, #64]	; 0x40
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6313      	str	r3, [r2, #48]	; 0x30
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_SPI_MspInit+0x14c>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a52:	2306      	movs	r3, #6
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <HAL_SPI_MspInit+0x150>)
 8001a5e:	f001 fa1f 	bl	8002ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2033      	movs	r0, #51	; 0x33
 8001a68:	f000 fdd3 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a6c:	2033      	movs	r0, #51	; 0x33
 8001a6e:	f000 fdec 	bl	800264a <HAL_NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3730      	adds	r7, #48	; 0x30
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40003800 	.word	0x40003800
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40003c00 	.word	0x40003c00

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a4c      	ldr	r2, [pc, #304]	; (8001be0 <HAL_UART_MspInit+0x150>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	f040 8091 	bne.w	8001bd6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <HAL_UART_MspInit+0x154>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	4a49      	ldr	r2, [pc, #292]	; (8001be4 <HAL_UART_MspInit+0x154>)
 8001abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac4:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_UART_MspInit+0x154>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_UART_MspInit+0x154>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <HAL_UART_MspInit+0x154>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae0:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <HAL_UART_MspInit+0x154>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aec:	230c      	movs	r3, #12
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afc:	2307      	movs	r3, #7
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4838      	ldr	r0, [pc, #224]	; (8001be8 <HAL_UART_MspInit+0x158>)
 8001b08:	f001 f9ca 	bl	8002ea0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b0e:	4a38      	ldr	r2, [pc, #224]	; (8001bf0 <HAL_UART_MspInit+0x160>)
 8001b10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b12:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b4e:	4827      	ldr	r0, [pc, #156]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b50:	f000 fd96 	bl	8002680 <HAL_DMA_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b5a:	f7ff fcb5 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a22      	ldr	r2, [pc, #136]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_UART_MspInit+0x15c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b76:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b7a:	2240      	movs	r2, #64	; 0x40
 8001b7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001bac:	f000 fd68 	bl	8002680 <HAL_DMA_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001bb6:	f7ff fc87 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc0:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_UART_MspInit+0x164>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2026      	movs	r0, #38	; 0x26
 8001bcc:	f000 fd21 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd0:	2026      	movs	r0, #38	; 0x26
 8001bd2:	f000 fd3a 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	20000460 	.word	0x20000460
 8001bf0:	40026088 	.word	0x40026088
 8001bf4:	200004c0 	.word	0x200004c0
 8001bf8:	400260a0 	.word	0x400260a0

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <NMI_Handler+0x4>

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f000 f952 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <DMA1_Stream0_IRQHandler+0x10>)
 8001c56:	f000 feab 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200001ec 	.word	0x200001ec

08001c64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <DMA1_Stream1_IRQHandler+0x10>)
 8001c6a:	f000 fea1 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000024c 	.word	0x2000024c

08001c78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <DMA1_Stream2_IRQHandler+0x10>)
 8001c7e:	f000 fe97 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200002ac 	.word	0x200002ac

08001c8c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <DMA1_Stream4_IRQHandler+0x10>)
 8001c92:	f000 fe8d 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000030c 	.word	0x2000030c

08001ca0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <DMA1_Stream5_IRQHandler+0x10>)
 8001ca6:	f000 fe83 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000460 	.word	0x20000460

08001cb4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <DMA1_Stream6_IRQHandler+0x10>)
 8001cba:	f000 fe79 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200004c0 	.word	0x200004c0

08001cc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <I2C1_EV_IRQHandler+0x10>)
 8001cce:	f001 fd51 	bl	8003774 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000144 	.word	0x20000144

08001cdc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <I2C1_ER_IRQHandler+0x10>)
 8001ce2:	f001 feb8 	bl	8003a56 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000144 	.word	0x20000144

08001cf0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <SPI2_IRQHandler+0x10>)
 8001cf6:	f003 ffcf 	bl	8005c98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000036c 	.word	0x2000036c

08001d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <USART2_IRQHandler+0x10>)
 8001d0a:	f004 fc7b 	bl	8006604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000041c 	.word	0x2000041c

08001d18 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <SPI3_IRQHandler+0x10>)
 8001d1e:	f003 ffbb 	bl	8005c98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200003c4 	.word	0x200003c4

08001d2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA2_Stream0_IRQHandler+0x10>)
 8001d32:	f000 fe3d 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200000e4 	.word	0x200000e4

08001d40 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <I2C3_EV_IRQHandler+0x10>)
 8001d46:	f001 fd15 	bl	8003774 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000198 	.word	0x20000198

08001d54 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <I2C3_ER_IRQHandler+0x10>)
 8001d5a:	f001 fe7c 	bl	8003a56 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000198 	.word	0x20000198

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f005 fd8c 	bl	80078b4 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20020000 	.word	0x20020000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	200005e8 	.word	0x200005e8
 8001dd0:	20000600 	.word	0x20000600

08001dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfe:	490e      	ldr	r1, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e14:	4c0b      	ldr	r4, [pc, #44]	; (8001e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e22:	f7ff ffd7 	bl	8001dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f005 fd4b 	bl	80078c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7fe fbb3 	bl	8000594 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001e3c:	080082d0 	.word	0x080082d0
  ldr r2, =_sbss
 8001e40:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e44:	20000600 	.word	0x20000600

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 fbc1 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fb28 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fbd9 	bl	8002666 <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 fba1 	bl	8002612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000010 	.word	0x20000010
 8001ee8:	20000018 	.word	0x20000018
 8001eec:	20000014 	.word	0x20000014

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000018 	.word	0x20000018
 8001f14:	200005ec 	.word	0x200005ec

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	200005ec 	.word	0x200005ec

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000018 	.word	0x20000018

08001f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e033      	b.n	8001ff6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fac4 	bl	8001524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fbe:	f023 0302 	bic.w	r3, r3, #2
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f94a 	bl	8002264 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe6:	e001      	b.n	8001fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1c>
 8002018:	2302      	movs	r3, #2
 800201a:	e113      	b.n	8002244 <HAL_ADC_ConfigChannel+0x244>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d925      	bls.n	8002078 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68d9      	ldr	r1, [r3, #12]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	3b1e      	subs	r3, #30
 8002042:	2207      	movs	r2, #7
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43da      	mvns	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	400a      	ands	r2, r1
 8002050:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68d9      	ldr	r1, [r3, #12]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	4603      	mov	r3, r0
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4403      	add	r3, r0
 800206a:	3b1e      	subs	r3, #30
 800206c:	409a      	lsls	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	e022      	b.n	80020be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	2207      	movs	r2, #7
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	400a      	ands	r2, r1
 800209a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6919      	ldr	r1, [r3, #16]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4403      	add	r3, r0
 80020b4:	409a      	lsls	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d824      	bhi.n	8002110 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b05      	subs	r3, #5
 80020d8:	221f      	movs	r2, #31
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	400a      	ands	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	4618      	mov	r0, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	3b05      	subs	r3, #5
 8002102:	fa00 f203 	lsl.w	r2, r0, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	635a      	str	r2, [r3, #52]	; 0x34
 800210e:	e04c      	b.n	80021aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d824      	bhi.n	8002162 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b23      	subs	r3, #35	; 0x23
 800212a:	221f      	movs	r2, #31
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43da      	mvns	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	400a      	ands	r2, r1
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b23      	subs	r3, #35	; 0x23
 8002154:	fa00 f203 	lsl.w	r2, r0, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
 8002160:	e023      	b.n	80021aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3b41      	subs	r3, #65	; 0x41
 8002174:	221f      	movs	r2, #31
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	400a      	ands	r2, r1
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b41      	subs	r3, #65	; 0x41
 800219e:	fa00 f203 	lsl.w	r2, r0, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021aa:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_ADC_ConfigChannel+0x250>)
 80021ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_ADC_ConfigChannel+0x254>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10f      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1d8>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b12      	cmp	r3, #18
 80021be:	d10b      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <HAL_ADC_ConfigChannel+0x254>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12b      	bne.n	800223a <HAL_ADC_ConfigChannel+0x23a>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_ADC_ConfigChannel+0x258>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <HAL_ADC_ConfigChannel+0x1f4>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b11      	cmp	r3, #17
 80021f2:	d122      	bne.n	800223a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_ADC_ConfigChannel+0x258>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d111      	bne.n	800223a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_ADC_ConfigChannel+0x25c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_ADC_ConfigChannel+0x260>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9a      	lsrs	r2, r3, #18
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800222c:	e002      	b.n	8002234 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3b01      	subs	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40012300 	.word	0x40012300
 8002254:	40012000 	.word	0x40012000
 8002258:	10000012 	.word	0x10000012
 800225c:	20000010 	.word	0x20000010
 8002260:	431bde83 	.word	0x431bde83

08002264 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800226c:	4b79      	ldr	r3, [pc, #484]	; (8002454 <ADC_Init+0x1f0>)
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	431a      	orrs	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	021a      	lsls	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	4a58      	ldr	r2, [pc, #352]	; (8002458 <ADC_Init+0x1f4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d022      	beq.n	8002342 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800230a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6899      	ldr	r1, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800232c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	e00f      	b.n	8002362 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002360:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0202 	bic.w	r2, r2, #2
 8002370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7e1b      	ldrb	r3, [r3, #24]
 800237c:	005a      	lsls	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	3b01      	subs	r3, #1
 80023bc:	035a      	lsls	r2, r3, #13
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	e007      	b.n	80023d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	051a      	lsls	r2, r3, #20
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800240c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6899      	ldr	r1, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800241a:	025a      	lsls	r2, r3, #9
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	029a      	lsls	r2, r3, #10
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40012300 	.word	0x40012300
 8002458:	0f000001 	.word	0x0f000001

0800245c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248e:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <__NVIC_GetPriorityGrouping+0x18>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 0307 	and.w	r3, r3, #7
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db0b      	blt.n	80024ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	4907      	ldr	r1, [pc, #28]	; (80024f8 <__NVIC_EnableIRQ+0x38>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2001      	movs	r0, #1
 80024e2:	fa00 f202 	lsl.w	r2, r0, r2
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100

080024fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	db0a      	blt.n	8002526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	490c      	ldr	r1, [pc, #48]	; (8002548 <__NVIC_SetPriority+0x4c>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002524:	e00a      	b.n	800253c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4908      	ldr	r1, [pc, #32]	; (800254c <__NVIC_SetPriority+0x50>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	3b04      	subs	r3, #4
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	440b      	add	r3, r1
 800253a:	761a      	strb	r2, [r3, #24]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000e100 	.word	0xe000e100
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f1c3 0307 	rsb	r3, r3, #7
 800256a:	2b04      	cmp	r3, #4
 800256c:	bf28      	it	cs
 800256e:	2304      	movcs	r3, #4
 8002570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3304      	adds	r3, #4
 8002576:	2b06      	cmp	r3, #6
 8002578:	d902      	bls.n	8002580 <NVIC_EncodePriority+0x30>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3b03      	subs	r3, #3
 800257e:	e000      	b.n	8002582 <NVIC_EncodePriority+0x32>
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	4313      	orrs	r3, r2
         );
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c8:	d301      	bcc.n	80025ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00f      	b.n	80025ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <SysTick_Config+0x40>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d6:	210f      	movs	r1, #15
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f7ff ff8e 	bl	80024fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <SysTick_Config+0x40>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <SysTick_Config+0x40>)
 80025e8:	2207      	movs	r2, #7
 80025ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	e000e010 	.word	0xe000e010

080025fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff29 	bl	800245c <__NVIC_SetPriorityGrouping>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002624:	f7ff ff3e 	bl	80024a4 <__NVIC_GetPriorityGrouping>
 8002628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff ff8e 	bl	8002550 <NVIC_EncodePriority>
 8002634:	4602      	mov	r2, r0
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff5d 	bl	80024fc <__NVIC_SetPriority>
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff31 	bl	80024c0 <__NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffa2 	bl	80025b8 <SysTick_Config>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7ff fc44 	bl	8001f18 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e099      	b.n	80027d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026bc:	e00f      	b.n	80026de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026be:	f7ff fc2b 	bl	8001f18 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d908      	bls.n	80026de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2203      	movs	r2, #3
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e078      	b.n	80027d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e8      	bne.n	80026be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_DMA_Init+0x158>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	2b04      	cmp	r3, #4
 8002736:	d107      	bne.n	8002748 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	4313      	orrs	r3, r2
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0307 	bic.w	r3, r3, #7
 800275e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	2b04      	cmp	r3, #4
 8002770:	d117      	bne.n	80027a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00e      	beq.n	80027a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fb0f 	bl	8002da8 <DMA_CheckFifoParam>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800279e:	2301      	movs	r3, #1
 80027a0:	e016      	b.n	80027d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fac6 	bl	8002d3c <DMA_CalcBaseAndBitshift>
 80027b0:	4603      	mov	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	223f      	movs	r2, #63	; 0x3f
 80027ba:	409a      	lsls	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	f010803f 	.word	0xf010803f

080027dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_DMA_Start_IT+0x26>
 80027fe:	2302      	movs	r3, #2
 8002800:	e040      	b.n	8002884 <HAL_DMA_Start_IT+0xa8>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d12f      	bne.n	8002876 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fa58 	bl	8002ce0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0216 	orr.w	r2, r2, #22
 800284a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0208 	orr.w	r2, r2, #8
 8002862:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e005      	b.n	8002882 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800287e:	2302      	movs	r3, #2
 8002880:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800289a:	f7ff fb3d 	bl	8001f18 <HAL_GetTick>
 800289e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e052      	b.n	8002964 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0216 	bic.w	r2, r2, #22
 80028cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <HAL_DMA_Abort+0x62>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0208 	bic.w	r2, r2, #8
 80028fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290e:	e013      	b.n	8002938 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002910:	f7ff fb02 	bl	8001f18 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b05      	cmp	r3, #5
 800291c:	d90c      	bls.n	8002938 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2203      	movs	r2, #3
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e015      	b.n	8002964 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e4      	bne.n	8002910 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	223f      	movs	r2, #63	; 0x3f
 800294c:	409a      	lsls	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d004      	beq.n	800298a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00c      	b.n	80029a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2205      	movs	r2, #5
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029bc:	4b8e      	ldr	r3, [pc, #568]	; (8002bf8 <HAL_DMA_IRQHandler+0x248>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a8e      	ldr	r2, [pc, #568]	; (8002bfc <HAL_DMA_IRQHandler+0x24c>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0a9b      	lsrs	r3, r3, #10
 80029c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2208      	movs	r2, #8
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01a      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2208      	movs	r2, #8
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d012      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2201      	movs	r2, #1
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f043 0202 	orr.w	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2204      	movs	r2, #4
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2204      	movs	r2, #4
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0204 	orr.w	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d043      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03c      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2210      	movs	r2, #16
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d018      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d108      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d024      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
 8002ade:	e01f      	b.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
 8002af0:	e016      	b.n	8002b20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0208 	bic.w	r2, r2, #8
 8002b0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2220      	movs	r2, #32
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 808f 	beq.w	8002c50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8087 	beq.w	8002c50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2220      	movs	r2, #32
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d136      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0216 	bic.w	r2, r2, #22
 8002b68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <HAL_DMA_IRQHandler+0x1da>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0208 	bic.w	r2, r2, #8
 8002b98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	223f      	movs	r2, #63	; 0x3f
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d07e      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
        }
        return;
 8002bc6:	e079      	b.n	8002cbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01d      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d031      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e02c      	b.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
 8002bf6:	bf00      	nop
 8002bf8:	20000010 	.word	0x20000010
 8002bfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d023      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
 8002c10:	e01e      	b.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0210 	bic.w	r2, r2, #16
 8002c2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d032      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d022      	beq.n	8002caa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2205      	movs	r2, #5
 8002c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d307      	bcc.n	8002c98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f2      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x2cc>
 8002c96:	e000      	b.n	8002c9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
 8002cba:	e000      	b.n	8002cbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cbc:	bf00      	nop
    }
  }
}
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd2:	b2db      	uxtb	r3, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d108      	bne.n	8002d20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d1e:	e007      	b.n	8002d30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3b10      	subs	r3, #16
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d909      	bls.n	8002d7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	1d1a      	adds	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d7c:	e007      	b.n	8002d8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d86:	f023 0303 	bic.w	r3, r3, #3
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	aaaaaaab 	.word	0xaaaaaaab
 8002da4:	08008284 	.word	0x08008284

08002da8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d11f      	bne.n	8002e02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d856      	bhi.n	8002e76 <DMA_CheckFifoParam+0xce>
 8002dc8:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <DMA_CheckFifoParam+0x28>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002df3 	.word	0x08002df3
 8002dd8:	08002de1 	.word	0x08002de1
 8002ddc:	08002e77 	.word	0x08002e77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d046      	beq.n	8002e7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df0:	e043      	b.n	8002e7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dfa:	d140      	bne.n	8002e7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e00:	e03d      	b.n	8002e7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0a:	d121      	bne.n	8002e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d837      	bhi.n	8002e82 <DMA_CheckFifoParam+0xda>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <DMA_CheckFifoParam+0x70>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002e2f 	.word	0x08002e2f
 8002e20:	08002e29 	.word	0x08002e29
 8002e24:	08002e41 	.word	0x08002e41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e030      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d025      	beq.n	8002e86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3e:	e022      	b.n	8002e86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e48:	d11f      	bne.n	8002e8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e4e:	e01c      	b.n	8002e8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d903      	bls.n	8002e5e <DMA_CheckFifoParam+0xb6>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d003      	beq.n	8002e64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e5c:	e018      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
      break;
 8002e62:	e015      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00e      	beq.n	8002e8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e00b      	b.n	8002e8e <DMA_CheckFifoParam+0xe6>
      break;
 8002e76:	bf00      	nop
 8002e78:	e00a      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e008      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e006      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e82:	bf00      	nop
 8002e84:	e004      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e86:	bf00      	nop
 8002e88:	e002      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	e159      	b.n	8003170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f040 8148 	bne.w	800316a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d005      	beq.n	8002ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d130      	bne.n	8002f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 0201 	and.w	r2, r3, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d017      	beq.n	8002f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d123      	bne.n	8002fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	08da      	lsrs	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3208      	adds	r2, #8
 8002fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	08da      	lsrs	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3208      	adds	r2, #8
 8002fde:	69b9      	ldr	r1, [r7, #24]
 8002fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0203 	and.w	r2, r3, #3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a2 	beq.w	800316a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b57      	ldr	r3, [pc, #348]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 8003030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b54      	ldr	r3, [pc, #336]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003042:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_GPIO_Init+0x2ec>)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3302      	adds	r3, #2
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	220f      	movs	r2, #15
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a49      	ldr	r2, [pc, #292]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d019      	beq.n	80030a2 <HAL_GPIO_Init+0x202>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a48      	ldr	r2, [pc, #288]	; (8003194 <HAL_GPIO_Init+0x2f4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0x1fe>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a47      	ldr	r2, [pc, #284]	; (8003198 <HAL_GPIO_Init+0x2f8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00d      	beq.n	800309a <HAL_GPIO_Init+0x1fa>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a46      	ldr	r2, [pc, #280]	; (800319c <HAL_GPIO_Init+0x2fc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x1f6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a45      	ldr	r2, [pc, #276]	; (80031a0 <HAL_GPIO_Init+0x300>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_GPIO_Init+0x1f2>
 800308e:	2304      	movs	r3, #4
 8003090:	e008      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 8003092:	2307      	movs	r3, #7
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 8003096:	2303      	movs	r3, #3
 8003098:	e004      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 800309a:	2302      	movs	r3, #2
 800309c:	e002      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 80030a2:	2300      	movs	r3, #0
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	f002 0203 	and.w	r2, r2, #3
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	4093      	lsls	r3, r2
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b4:	4935      	ldr	r1, [pc, #212]	; (800318c <HAL_GPIO_Init+0x2ec>)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c2:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e6:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_GPIO_Init+0x304>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003164:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	f67f aea2 	bls.w	8002ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	40013800 	.word	0x40013800
 8003190:	40020000 	.word	0x40020000
 8003194:	40020400 	.word	0x40020400
 8003198:	40020800 	.word	0x40020800
 800319c:	40020c00 	.word	0x40020c00
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40013c00 	.word	0x40013c00

080031a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	e001      	b.n	80031ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031f4:	e003      	b.n	80031fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031f6:	887b      	ldrh	r3, [r7, #2]
 80031f8:	041a      	lsls	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	619a      	str	r2, [r3, #24]
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e12b      	b.n	8003476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe f9ee 	bl	8001614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2224      	movs	r2, #36	; 0x24
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800325e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800326e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003270:	f002 fbcc 	bl	8005a0c <HAL_RCC_GetPCLK1Freq>
 8003274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4a81      	ldr	r2, [pc, #516]	; (8003480 <HAL_I2C_Init+0x274>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d807      	bhi.n	8003290 <HAL_I2C_Init+0x84>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a80      	ldr	r2, [pc, #512]	; (8003484 <HAL_I2C_Init+0x278>)
 8003284:	4293      	cmp	r3, r2
 8003286:	bf94      	ite	ls
 8003288:	2301      	movls	r3, #1
 800328a:	2300      	movhi	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e006      	b.n	800329e <HAL_I2C_Init+0x92>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a7d      	ldr	r2, [pc, #500]	; (8003488 <HAL_I2C_Init+0x27c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	bf94      	ite	ls
 8003298:	2301      	movls	r3, #1
 800329a:	2300      	movhi	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0e7      	b.n	8003476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a78      	ldr	r2, [pc, #480]	; (800348c <HAL_I2C_Init+0x280>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	0c9b      	lsrs	r3, r3, #18
 80032b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a6a      	ldr	r2, [pc, #424]	; (8003480 <HAL_I2C_Init+0x274>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d802      	bhi.n	80032e0 <HAL_I2C_Init+0xd4>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	3301      	adds	r3, #1
 80032de:	e009      	b.n	80032f4 <HAL_I2C_Init+0xe8>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	4a69      	ldr	r2, [pc, #420]	; (8003490 <HAL_I2C_Init+0x284>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	3301      	adds	r3, #1
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	495c      	ldr	r1, [pc, #368]	; (8003480 <HAL_I2C_Init+0x274>)
 8003310:	428b      	cmp	r3, r1
 8003312:	d819      	bhi.n	8003348 <HAL_I2C_Init+0x13c>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1e59      	subs	r1, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003322:	1c59      	adds	r1, r3, #1
 8003324:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003328:	400b      	ands	r3, r1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_I2C_Init+0x138>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1e59      	subs	r1, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fbb1 f3f3 	udiv	r3, r1, r3
 800333c:	3301      	adds	r3, #1
 800333e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003342:	e051      	b.n	80033e8 <HAL_I2C_Init+0x1dc>
 8003344:	2304      	movs	r3, #4
 8003346:	e04f      	b.n	80033e8 <HAL_I2C_Init+0x1dc>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d111      	bne.n	8003374 <HAL_I2C_Init+0x168>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	440b      	add	r3, r1
 800335e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e012      	b.n	800339a <HAL_I2C_Init+0x18e>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	0099      	lsls	r1, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	fbb0 f3f3 	udiv	r3, r0, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x196>
 800339e:	2301      	movs	r3, #1
 80033a0:	e022      	b.n	80033e8 <HAL_I2C_Init+0x1dc>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10e      	bne.n	80033c8 <HAL_I2C_Init+0x1bc>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e58      	subs	r0, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	440b      	add	r3, r1
 80033b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c6:	e00f      	b.n	80033e8 <HAL_I2C_Init+0x1dc>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e58      	subs	r0, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	0099      	lsls	r1, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	6809      	ldr	r1, [r1, #0]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6911      	ldr	r1, [r2, #16]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68d2      	ldr	r2, [r2, #12]
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	430b      	orrs	r3, r1
 800342a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	000186a0 	.word	0x000186a0
 8003484:	001e847f 	.word	0x001e847f
 8003488:	003d08ff 	.word	0x003d08ff
 800348c:	431bde83 	.word	0x431bde83
 8003490:	10624dd3 	.word	0x10624dd3

08003494 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	817b      	strh	r3, [r7, #10]
 80034a6:	460b      	mov	r3, r1
 80034a8:	813b      	strh	r3, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	f040 808e 	bne.w	80035dc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_I2C_Mem_Write_IT+0x158>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <HAL_I2C_Mem_Write_IT+0x15c>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0a1a      	lsrs	r2, r3, #8
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009a      	lsls	r2, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3b01      	subs	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e064      	b.n	80035de <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d0db      	beq.n	80034da <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2C_Mem_Write_IT+0x9c>
 800352c:	2302      	movs	r3, #2
 800352e:	e056      	b.n	80035de <HAL_I2C_Mem_Write_IT+0x14a>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d007      	beq.n	8003556 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003564:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2221      	movs	r2, #33	; 0x21
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a3a      	ldr	r2, [r7, #32]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <HAL_I2C_Mem_Write_IT+0x160>)
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003598:	897a      	ldrh	r2, [r7, #10]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800359e:	893a      	ldrh	r2, [r7, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035be:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80035d6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000010 	.word	0x20000010
 80035f0:	14f8b589 	.word	0x14f8b589
 80035f4:	ffff0000 	.word	0xffff0000

080035f8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	460b      	mov	r3, r1
 800360c:	813b      	strh	r3, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b20      	cmp	r3, #32
 8003620:	f040 809a 	bne.w	8003758 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <HAL_I2C_Mem_Read_IT+0x170>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	08db      	lsrs	r3, r3, #3
 800362a:	4a50      	ldr	r2, [pc, #320]	; (800376c <HAL_I2C_Mem_Read_IT+0x174>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	0a1a      	lsrs	r2, r3, #8
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009a      	lsls	r2, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3b01      	subs	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e070      	b.n	800375a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b02      	cmp	r3, #2
 8003684:	d0db      	beq.n	800363e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_I2C_Mem_Read_IT+0x9c>
 8003690:	2302      	movs	r3, #2
 8003692:	e062      	b.n	800375a <HAL_I2C_Mem_Read_IT+0x162>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d007      	beq.n	80036ba <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2222      	movs	r2, #34	; 0x22
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2240      	movs	r2, #64	; 0x40
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <HAL_I2C_Mem_Read_IT+0x178>)
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80036fc:	897a      	ldrh	r2, [r7, #10]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003702:	893a      	ldrh	r2, [r7, #8]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003722:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003732:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003752:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000010 	.word	0x20000010
 800376c:	14f8b589 	.word	0x14f8b589
 8003770:	ffff0000 	.word	0xffff0000

08003774 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003794:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d003      	beq.n	80037ac <HAL_I2C_EV_IRQHandler+0x38>
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	f040 80c1 	bne.w	800392e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80037cc:	d003      	beq.n	80037d6 <HAL_I2C_EV_IRQHandler+0x62>
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80037d4:	d101      	bne.n	80037da <HAL_I2C_EV_IRQHandler+0x66>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_I2C_EV_IRQHandler+0x68>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f000 8132 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00c      	beq.n	8003806 <HAL_I2C_EV_IRQHandler+0x92>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	0a5b      	lsrs	r3, r3, #9
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f001 fc7b 	bl	80050f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fd83 	bl	800430a <I2C_Master_SB>
 8003804:	e092      	b.n	800392c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	08db      	lsrs	r3, r3, #3
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_I2C_EV_IRQHandler+0xb2>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	0a5b      	lsrs	r3, r3, #9
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fdf9 	bl	8004416 <I2C_Master_ADD10>
 8003824:	e082      	b.n	800392c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_I2C_EV_IRQHandler+0xd2>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	0a5b      	lsrs	r3, r3, #9
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fe13 	bl	800446a <I2C_Master_ADDR>
 8003844:	e072      	b.n	800392c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03b      	beq.n	80038ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003860:	f000 80f3 	beq.w	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	09db      	lsrs	r3, r3, #7
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00f      	beq.n	8003890 <HAL_I2C_EV_IRQHandler+0x11c>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_I2C_EV_IRQHandler+0x11c>
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f9f3 	bl	8003c74 <I2C_MasterTransmit_TXE>
 800388e:	e04d      	b.n	800392c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80d6 	beq.w	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	0a5b      	lsrs	r3, r3, #9
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80cf 	beq.w	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038ac:	7bbb      	ldrb	r3, [r7, #14]
 80038ae:	2b21      	cmp	r3, #33	; 0x21
 80038b0:	d103      	bne.n	80038ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa7a 	bl	8003dac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b8:	e0c7      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	f040 80c4 	bne.w	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fae8 	bl	8003e98 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c8:	e0bf      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d8:	f000 80b7 	beq.w	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	099b      	lsrs	r3, r3, #6
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <HAL_I2C_EV_IRQHandler+0x194>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	0a9b      	lsrs	r3, r3, #10
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <HAL_I2C_EV_IRQHandler+0x194>
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fb5d 	bl	8003fc0 <I2C_MasterReceive_RXNE>
 8003906:	e011      	b.n	800392c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 809a 	beq.w	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	0a5b      	lsrs	r3, r3, #9
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8093 	beq.w	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fc06 	bl	8004136 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800392a:	e08e      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
 800392c:	e08d      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	e007      	b.n	8003950 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d012      	beq.n	8003982 <HAL_I2C_EV_IRQHandler+0x20e>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	0a5b      	lsrs	r3, r3, #9
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 ffc4 	bl	8004908 <I2C_Slave_ADDR>
 8003980:	e066      	b.n	8003a50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	0a5b      	lsrs	r3, r3, #9
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fffe 	bl	800499c <I2C_Slave_STOPF>
 80039a0:	e056      	b.n	8003a50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039a2:	7bbb      	ldrb	r3, [r7, #14]
 80039a4:	2b21      	cmp	r3, #33	; 0x21
 80039a6:	d002      	beq.n	80039ae <HAL_I2C_EV_IRQHandler+0x23a>
 80039a8:	7bbb      	ldrb	r3, [r7, #14]
 80039aa:	2b29      	cmp	r3, #41	; 0x29
 80039ac:	d125      	bne.n	80039fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	09db      	lsrs	r3, r3, #7
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00f      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0x266>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	0a9b      	lsrs	r3, r3, #10
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0x266>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 feda 	bl	800478c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039d8:	e039      	b.n	8003a4e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d033      	beq.n	8003a4e <HAL_I2C_EV_IRQHandler+0x2da>
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	0a5b      	lsrs	r3, r3, #9
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d02d      	beq.n	8003a4e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 ff07 	bl	8004806 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039f8:	e029      	b.n	8003a4e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00f      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	0a9b      	lsrs	r3, r3, #10
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 ff12 	bl	8004848 <I2C_SlaveReceive_RXNE>
 8003a24:	e014      	b.n	8003a50 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00e      	beq.n	8003a50 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	0a5b      	lsrs	r3, r3, #9
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 ff40 	bl	80048c4 <I2C_SlaveReceive_BTF>
 8003a44:	e004      	b.n	8003a50 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a4e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08a      	sub	sp, #40	; 0x28
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a78:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00e      	beq.n	8003aa4 <HAL_I2C_ER_IRQHandler+0x4e>
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003aa2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	0a5b      	lsrs	r3, r3, #9
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00e      	beq.n	8003ace <HAL_I2C_ER_IRQHandler+0x78>
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003acc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	0a9b      	lsrs	r3, r3, #10
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d03f      	beq.n	8003b5a <HAL_I2C_ER_IRQHandler+0x104>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d039      	beq.n	8003b5a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003ae6:	7efb      	ldrb	r3, [r7, #27]
 8003ae8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003b00:	7ebb      	ldrb	r3, [r7, #26]
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d112      	bne.n	8003b2c <HAL_I2C_ER_IRQHandler+0xd6>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10f      	bne.n	8003b2c <HAL_I2C_ER_IRQHandler+0xd6>
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	2b21      	cmp	r3, #33	; 0x21
 8003b10:	d008      	beq.n	8003b24 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	2b29      	cmp	r3, #41	; 0x29
 8003b16:	d005      	beq.n	8003b24 <HAL_I2C_ER_IRQHandler+0xce>
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b28      	cmp	r3, #40	; 0x28
 8003b1c:	d106      	bne.n	8003b2c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b21      	cmp	r3, #33	; 0x21
 8003b22:	d103      	bne.n	8003b2c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f001 f869 	bl	8004bfc <I2C_Slave_AF>
 8003b2a:	e016      	b.n	8003b5a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b34:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b3e:	7efb      	ldrb	r3, [r7, #27]
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d002      	beq.n	8003b4a <HAL_I2C_ER_IRQHandler+0xf4>
 8003b44:	7efb      	ldrb	r3, [r7, #27]
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d107      	bne.n	8003b5a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b58:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	0adb      	lsrs	r3, r3, #11
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <HAL_I2C_ER_IRQHandler+0x12e>
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	f043 0308 	orr.w	r3, r3, #8
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003b82:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f001 f8a0 	bl	8004cdc <I2C_ITError>
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3728      	adds	r7, #40	; 0x28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
 8003c00:	4613      	mov	r3, r2
 8003c02:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d150      	bne.n	8003d3c <I2C_MasterTransmit_TXE+0xc8>
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b21      	cmp	r3, #33	; 0x21
 8003c9e:	d14d      	bne.n	8003d3c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d01d      	beq.n	8003ce2 <I2C_MasterTransmit_TXE+0x6e>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d01a      	beq.n	8003ce2 <I2C_MasterTransmit_TXE+0x6e>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cb2:	d016      	beq.n	8003ce2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cc2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2211      	movs	r2, #17
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ff62 	bl	8003ba4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ce0:	e060      	b.n	8003da4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cf0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d00:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d107      	bne.n	8003d2c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff7d 	bl	8003c24 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d2a:	e03b      	b.n	8003da4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff35 	bl	8003ba4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d3a:	e033      	b.n	8003da4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b21      	cmp	r3, #33	; 0x21
 8003d40:	d005      	beq.n	8003d4e <I2C_MasterTransmit_TXE+0xda>
 8003d42:	7bbb      	ldrb	r3, [r7, #14]
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d12d      	bne.n	8003da4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b22      	cmp	r3, #34	; 0x22
 8003d4c:	d12a      	bne.n	8003da4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d108      	bne.n	8003d6a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d66:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d68:	e01c      	b.n	8003da4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d103      	bne.n	8003d7e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f88e 	bl	8003e98 <I2C_MemoryTransmit_TXE_BTF>
}
 8003d7c:	e012      	b.n	8003da4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003da2:	e7ff      	b.n	8003da4 <I2C_MasterTransmit_TXE+0x130>
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b21      	cmp	r3, #33	; 0x21
 8003dc4:	d164      	bne.n	8003e90 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d012      	beq.n	8003df6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003df4:	e04c      	b.n	8003e90 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d01d      	beq.n	8003e38 <I2C_MasterTransmit_BTF+0x8c>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d01a      	beq.n	8003e38 <I2C_MasterTransmit_BTF+0x8c>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e08:	d016      	beq.n	8003e38 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e18:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2211      	movs	r2, #17
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff feb7 	bl	8003ba4 <HAL_I2C_MasterTxCpltCallback>
}
 8003e36:	e02b      	b.n	8003e90 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e46:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e56:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d107      	bne.n	8003e82 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fed2 	bl	8003c24 <HAL_I2C_MemTxCpltCallback>
}
 8003e80:	e006      	b.n	8003e90 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fe8a 	bl	8003ba4 <HAL_I2C_MasterTxCpltCallback>
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d11d      	bne.n	8003eec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d10b      	bne.n	8003ed0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	1c9a      	adds	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ece:	e073      	b.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	121b      	asrs	r3, r3, #8
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003eea:	e065      	b.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d10b      	bne.n	8003f0c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f0a:	e055      	b.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d151      	bne.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b22      	cmp	r3, #34	; 0x22
 8003f18:	d10d      	bne.n	8003f36 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f28:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f34:	e040      	b.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b21      	cmp	r3, #33	; 0x21
 8003f44:	d112      	bne.n	8003f6c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f6a:	e025      	b.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d120      	bne.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b21      	cmp	r3, #33	; 0x21
 8003f7a:	d11d      	bne.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f8a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe36 	bl	8003c24 <HAL_I2C_MemTxCpltCallback>
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b22      	cmp	r3, #34	; 0x22
 8003fd2:	f040 80ac 	bne.w	800412e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d921      	bls.n	8004028 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b03      	cmp	r3, #3
 8004012:	f040 808c 	bne.w	800412e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004024:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004026:	e082      	b.n	800412e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	2b02      	cmp	r3, #2
 800402e:	d075      	beq.n	800411c <I2C_MasterReceive_RXNE+0x15c>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d002      	beq.n	800403c <I2C_MasterReceive_RXNE+0x7c>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d16f      	bne.n	800411c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f001 f827 	bl	8005090 <I2C_WaitOnSTOPRequestThroughIT>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d142      	bne.n	80040ce <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004056:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004066:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d10a      	bne.n	80040b8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fdc1 	bl	8003c38 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040b6:	e03a      	b.n	800412e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2212      	movs	r2, #18
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fd76 	bl	8003bb8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040cc:	e02f      	b.n	800412e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fd99 	bl	8003c4c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800411a:	e008      	b.n	800412e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412a:	605a      	str	r2, [r3, #4]
}
 800412c:	e7ff      	b.n	800412e <I2C_MasterReceive_RXNE+0x16e>
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b04      	cmp	r3, #4
 800414c:	d11b      	bne.n	8004186 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004184:	e0bd      	b.n	8004302 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b03      	cmp	r3, #3
 800418e:	d129      	bne.n	80041e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d00a      	beq.n	80041bc <I2C_MasterReceive_BTF+0x86>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d007      	beq.n	80041bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041e2:	e08e      	b.n	8004302 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d176      	bne.n	80042dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d002      	beq.n	80041fa <I2C_MasterReceive_BTF+0xc4>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d108      	bne.n	800420c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e019      	b.n	8004240 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b04      	cmp	r3, #4
 8004210:	d002      	beq.n	8004218 <I2C_MasterReceive_BTF+0xe2>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d108      	bne.n	800422a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e00a      	b.n	8004240 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d007      	beq.n	8004240 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800429a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	d10a      	bne.n	80042c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fcba 	bl	8003c38 <HAL_I2C_MemRxCpltCallback>
}
 80042c4:	e01d      	b.n	8004302 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2212      	movs	r2, #18
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fc6f 	bl	8003bb8 <HAL_I2C_MasterRxCpltCallback>
}
 80042da:	e012      	b.n	8004302 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d117      	bne.n	800434e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004336:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004338:	e067      	b.n	800440a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
}
 800434c:	e05d      	b.n	800440a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004356:	d133      	bne.n	80043c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b21      	cmp	r3, #33	; 0x21
 8004362:	d109      	bne.n	8004378 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004374:	611a      	str	r2, [r3, #16]
 8004376:	e008      	b.n	800438a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <I2C_Master_SB+0x92>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d032      	beq.n	800440a <I2C_Master_SB+0x100>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d02d      	beq.n	800440a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043bc:	605a      	str	r2, [r3, #4]
}
 80043be:	e024      	b.n	800440a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10e      	bne.n	80043e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	11db      	asrs	r3, r3, #7
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f063 030f 	orn	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]
}
 80043e4:	e011      	b.n	800440a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d10d      	bne.n	800440a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	11db      	asrs	r3, r3, #7
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f003 0306 	and.w	r3, r3, #6
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f063 030e 	orn	r3, r3, #14
 8004402:	b2da      	uxtb	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	b2da      	uxtb	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <I2C_Master_ADD10+0x26>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d108      	bne.n	800444e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00c      	beq.n	800445e <I2C_Master_ADD10+0x48>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800445c:	605a      	str	r2, [r3, #4]
  }
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800446a:	b480      	push	{r7}
 800446c:	b091      	sub	sp, #68	; 0x44
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004478:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b22      	cmp	r3, #34	; 0x22
 8004492:	f040 8169 	bne.w	8004768 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10f      	bne.n	80044be <I2C_Master_ADDR+0x54>
 800449e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d10b      	bne.n	80044be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	633b      	str	r3, [r7, #48]	; 0x30
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	e160      	b.n	8004780 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11d      	bne.n	8004502 <I2C_Master_ADDR+0x98>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044ce:	d118      	bne.n	8004502 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	651a      	str	r2, [r3, #80]	; 0x50
 8004500:	e13e      	b.n	8004780 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d113      	bne.n	8004534 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450c:	2300      	movs	r3, #0
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e115      	b.n	8004760 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	f040 808a 	bne.w	8004654 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004546:	d137      	bne.n	80045b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004556:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004566:	d113      	bne.n	8004590 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004576:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004578:	2300      	movs	r3, #0
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	e0e7      	b.n	8004760 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004590:	2300      	movs	r3, #0
 8004592:	623b      	str	r3, [r7, #32]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	623b      	str	r3, [r7, #32]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	623b      	str	r3, [r7, #32]
 80045a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e0d3      	b.n	8004760 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d02e      	beq.n	800461c <I2C_Master_ADDR+0x1b2>
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d02b      	beq.n	800461c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c6:	2b12      	cmp	r3, #18
 80045c8:	d102      	bne.n	80045d0 <I2C_Master_ADDR+0x166>
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d125      	bne.n	800461c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d00e      	beq.n	80045f4 <I2C_Master_ADDR+0x18a>
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d00b      	beq.n	80045f4 <I2C_Master_ADDR+0x18a>
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d008      	beq.n	80045f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e007      	b.n	8004604 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004602:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	e0a1      	b.n	8004760 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e085      	b.n	8004760 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d14d      	bne.n	80046fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	2b04      	cmp	r3, #4
 8004662:	d016      	beq.n	8004692 <I2C_Master_ADDR+0x228>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	2b02      	cmp	r3, #2
 8004668:	d013      	beq.n	8004692 <I2C_Master_ADDR+0x228>
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	2b10      	cmp	r3, #16
 800466e:	d010      	beq.n	8004692 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e007      	b.n	80046a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b0:	d117      	bne.n	80046e2 <I2C_Master_ADDR+0x278>
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046b8:	d00b      	beq.n	80046d2 <I2C_Master_ADDR+0x268>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d008      	beq.n	80046d2 <I2C_Master_ADDR+0x268>
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d005      	beq.n	80046d2 <I2C_Master_ADDR+0x268>
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d002      	beq.n	80046d2 <I2C_Master_ADDR+0x268>
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d107      	bne.n	80046e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	e032      	b.n	8004760 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004708:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004718:	d117      	bne.n	800474a <I2C_Master_ADDR+0x2e0>
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004720:	d00b      	beq.n	800473a <I2C_Master_ADDR+0x2d0>
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	2b01      	cmp	r3, #1
 8004726:	d008      	beq.n	800473a <I2C_Master_ADDR+0x2d0>
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	2b08      	cmp	r3, #8
 800472c:	d005      	beq.n	800473a <I2C_Master_ADDR+0x2d0>
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b10      	cmp	r3, #16
 8004732:	d002      	beq.n	800473a <I2C_Master_ADDR+0x2d0>
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	2b20      	cmp	r3, #32
 8004738:	d107      	bne.n	800474a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004748:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004766:	e00b      	b.n	8004780 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
}
 800477e:	e7ff      	b.n	8004780 <I2C_Master_ADDR+0x316>
 8004780:	bf00      	nop
 8004782:	3744      	adds	r7, #68	; 0x44
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d02b      	beq.n	80047fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d114      	bne.n	80047fe <I2C_SlaveTransmit_TXE+0x72>
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b29      	cmp	r3, #41	; 0x29
 80047d8:	d111      	bne.n	80047fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2221      	movs	r2, #33	; 0x21
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2228      	movs	r2, #40	; 0x28
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff f9e7 	bl	8003bcc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004856:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02c      	beq.n	80048bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d114      	bne.n	80048bc <I2C_SlaveReceive_RXNE+0x74>
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b2a      	cmp	r3, #42	; 0x2a
 8004896:	d111      	bne.n	80048bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2222      	movs	r2, #34	; 0x22
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2228      	movs	r2, #40	; 0x28
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff f992 	bl	8003be0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004922:	2b28      	cmp	r3, #40	; 0x28
 8004924:	d127      	bne.n	8004976 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004934:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	09db      	lsrs	r3, r3, #7
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	81bb      	strh	r3, [r7, #12]
 8004958:	e002      	b.n	8004960 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004968:	89ba      	ldrh	r2, [r7, #12]
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff f940 	bl	8003bf4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004974:	e00e      	b.n	8004994 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80049bc:	2300      	movs	r3, #0
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f8:	d172      	bne.n	8004ae0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b22      	cmp	r3, #34	; 0x22
 80049fe:	d002      	beq.n	8004a06 <I2C_Slave_STOPF+0x6a>
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b2a      	cmp	r3, #42	; 0x2a
 8004a04:	d135      	bne.n	8004a72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f043 0204 	orr.w	r2, r3, #4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe f940 	bl	8002cc4 <HAL_DMA_GetState>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d049      	beq.n	8004ade <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	4a69      	ldr	r2, [pc, #420]	; (8004bf4 <I2C_Slave_STOPF+0x258>)
 8004a50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fd ff88 	bl	800296c <HAL_DMA_Abort_IT>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d03d      	beq.n	8004ade <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a70:	e035      	b.n	8004ade <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f043 0204 	orr.w	r2, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe f90a 	bl	8002cc4 <HAL_DMA_GetState>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d014      	beq.n	8004ae0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	4a4e      	ldr	r2, [pc, #312]	; (8004bf4 <I2C_Slave_STOPF+0x258>)
 8004abc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd ff52 	bl	800296c <HAL_DMA_Abort_IT>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4798      	blx	r3
 8004adc:	e000      	b.n	8004ae0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ade:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d03e      	beq.n	8004b68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d112      	bne.n	8004b1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d112      	bne.n	8004b52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	f043 0204 	orr.w	r2, r3, #4
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f8b3 	bl	8004cdc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b76:	e039      	b.n	8004bec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b7c:	d109      	bne.n	8004b92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2228      	movs	r2, #40	; 0x28
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff f827 	bl	8003be0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b28      	cmp	r3, #40	; 0x28
 8004b9c:	d111      	bne.n	8004bc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <I2C_Slave_STOPF+0x25c>)
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff f828 	bl	8003c10 <HAL_I2C_ListenCpltCallback>
}
 8004bc0:	e014      	b.n	8004bec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	2b22      	cmp	r3, #34	; 0x22
 8004bc8:	d002      	beq.n	8004bd0 <I2C_Slave_STOPF+0x234>
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b22      	cmp	r3, #34	; 0x22
 8004bce:	d10d      	bne.n	8004bec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fe fffa 	bl	8003be0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	08004f41 	.word	0x08004f41
 8004bf8:	ffff0000 	.word	0xffff0000

08004bfc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d002      	beq.n	8004c1e <I2C_Slave_AF+0x22>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d129      	bne.n	8004c72 <I2C_Slave_AF+0x76>
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b28      	cmp	r3, #40	; 0x28
 8004c22:	d126      	bne.n	8004c72 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a2c      	ldr	r2, [pc, #176]	; (8004cd8 <I2C_Slave_AF+0xdc>)
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c38:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c42:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fe ffd0 	bl	8003c10 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c70:	e02e      	b.n	8004cd0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	2b21      	cmp	r3, #33	; 0x21
 8004c76:	d126      	bne.n	8004cc6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a17      	ldr	r2, [pc, #92]	; (8004cd8 <I2C_Slave_AF+0xdc>)
 8004c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2221      	movs	r2, #33	; 0x21
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ca2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fe ff84 	bl	8003bcc <HAL_I2C_SlaveTxCpltCallback>
}
 8004cc4:	e004      	b.n	8004cd0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cce:	615a      	str	r2, [r3, #20]
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	ffff0000 	.word	0xffff0000

08004cdc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d002      	beq.n	8004d00 <I2C_ITError+0x24>
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d10a      	bne.n	8004d16 <I2C_ITError+0x3a>
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b22      	cmp	r3, #34	; 0x22
 8004d04:	d107      	bne.n	8004d16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d1c:	2b28      	cmp	r3, #40	; 0x28
 8004d1e:	d107      	bne.n	8004d30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2228      	movs	r2, #40	; 0x28
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d2e:	e015      	b.n	8004d5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3e:	d00a      	beq.n	8004d56 <I2C_ITError+0x7a>
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b60      	cmp	r3, #96	; 0x60
 8004d44:	d007      	beq.n	8004d56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6a:	d162      	bne.n	8004e32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d020      	beq.n	8004dcc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	4a6a      	ldr	r2, [pc, #424]	; (8004f38 <I2C_ITError+0x25c>)
 8004d90:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fd fde8 	bl	800296c <HAL_DMA_Abort_IT>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8089 	beq.w	8004eb6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4798      	blx	r3
 8004dca:	e074      	b.n	8004eb6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	4a59      	ldr	r2, [pc, #356]	; (8004f38 <I2C_ITError+0x25c>)
 8004dd2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fd fdc7 	bl	800296c <HAL_DMA_Abort_IT>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d068      	beq.n	8004eb6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d10b      	bne.n	8004e0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4798      	blx	r3
 8004e30:	e041      	b.n	8004eb6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b60      	cmp	r3, #96	; 0x60
 8004e3c:	d125      	bne.n	8004e8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e56:	2b40      	cmp	r3, #64	; 0x40
 8004e58:	d10b      	bne.n	8004e72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fe feec 	bl	8003c60 <HAL_I2C_AbortCpltCallback>
 8004e88:	e015      	b.n	8004eb6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d10b      	bne.n	8004eb0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fe fecb 	bl	8003c4c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10e      	bne.n	8004ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d113      	bne.n	8004f30 <I2C_ITError+0x254>
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b28      	cmp	r3, #40	; 0x28
 8004f0c:	d110      	bne.n	8004f30 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <I2C_ITError+0x260>)
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fe fe70 	bl	8003c10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	08004f41 	.word	0x08004f41
 8004f3c:	ffff0000 	.word	0xffff0000

08004f40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f5a:	4b4b      	ldr	r3, [pc, #300]	; (8005088 <I2C_DMAAbort+0x148>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	08db      	lsrs	r3, r3, #3
 8004f60:	4a4a      	ldr	r2, [pc, #296]	; (800508c <I2C_DMAAbort+0x14c>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	0a1a      	lsrs	r2, r3, #8
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00da      	lsls	r2, r3, #3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f86:	e00a      	b.n	8004f9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9c:	d0ea      	beq.n	8004f74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	2200      	movs	r2, #0
 8004fac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	2200      	movs	r2, #0
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b60      	cmp	r3, #96	; 0x60
 800500e:	d10e      	bne.n	800502e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2200      	movs	r2, #0
 8005024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	f7fe fe1a 	bl	8003c60 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800502c:	e027      	b.n	800507e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800502e:	7cfb      	ldrb	r3, [r7, #19]
 8005030:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005034:	2b28      	cmp	r3, #40	; 0x28
 8005036:	d117      	bne.n	8005068 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005056:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2200      	movs	r2, #0
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2228      	movs	r2, #40	; 0x28
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005066:	e007      	b.n	8005078 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005078:	6978      	ldr	r0, [r7, #20]
 800507a:	f7fe fde7 	bl	8003c4c <HAL_I2C_ErrorCallback>
}
 800507e:	bf00      	nop
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000010 	.word	0x20000010
 800508c:	14f8b589 	.word	0x14f8b589

08005090 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800509c:	4b13      	ldr	r3, [pc, #76]	; (80050ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	08db      	lsrs	r3, r3, #3
 80050a2:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	0a1a      	lsrs	r2, r3, #8
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d107      	bne.n	80050ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e008      	b.n	80050e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050dc:	d0e9      	beq.n	80050b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	20000010 	.word	0x20000010
 80050f0:	14f8b589 	.word	0x14f8b589

080050f4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005104:	d103      	bne.n	800510e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800510c:	e007      	b.n	800511e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005116:	d102      	bne.n	800511e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2208      	movs	r2, #8
 800511c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e267      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d075      	beq.n	8005236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800514a:	4b88      	ldr	r3, [pc, #544]	; (800536c <HAL_RCC_OscConfig+0x240>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b04      	cmp	r3, #4
 8005154:	d00c      	beq.n	8005170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005156:	4b85      	ldr	r3, [pc, #532]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800515e:	2b08      	cmp	r3, #8
 8005160:	d112      	bne.n	8005188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005162:	4b82      	ldr	r3, [pc, #520]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516e:	d10b      	bne.n	8005188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005170:	4b7e      	ldr	r3, [pc, #504]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05b      	beq.n	8005234 <HAL_RCC_OscConfig+0x108>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d157      	bne.n	8005234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e242      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d106      	bne.n	80051a0 <HAL_RCC_OscConfig+0x74>
 8005192:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a75      	ldr	r2, [pc, #468]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e01d      	b.n	80051dc <HAL_RCC_OscConfig+0xb0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x98>
 80051aa:	4b70      	ldr	r3, [pc, #448]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6f      	ldr	r2, [pc, #444]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80051b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a6c      	ldr	r2, [pc, #432]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e00b      	b.n	80051dc <HAL_RCC_OscConfig+0xb0>
 80051c4:	4b69      	ldr	r3, [pc, #420]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a68      	ldr	r2, [pc, #416]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b66      	ldr	r3, [pc, #408]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a65      	ldr	r2, [pc, #404]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80051d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d013      	beq.n	800520c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7fc fe98 	bl	8001f18 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ec:	f7fc fe94 	bl	8001f18 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e207      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fe:	4b5b      	ldr	r3, [pc, #364]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0xc0>
 800520a:	e014      	b.n	8005236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fc fe84 	bl	8001f18 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005214:	f7fc fe80 	bl	8001f18 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1f3      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005226:	4b51      	ldr	r3, [pc, #324]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0xe8>
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d063      	beq.n	800530a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005242:	4b4a      	ldr	r3, [pc, #296]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800524e:	4b47      	ldr	r3, [pc, #284]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005256:	2b08      	cmp	r3, #8
 8005258:	d11c      	bne.n	8005294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800525a:	4b44      	ldr	r3, [pc, #272]	; (800536c <HAL_RCC_OscConfig+0x240>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d116      	bne.n	8005294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005266:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_RCC_OscConfig+0x152>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d001      	beq.n	800527e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e1c7      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527e:	4b3b      	ldr	r3, [pc, #236]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4937      	ldr	r1, [pc, #220]	; (800536c <HAL_RCC_OscConfig+0x240>)
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005292:	e03a      	b.n	800530a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800529c:	4b34      	ldr	r3, [pc, #208]	; (8005370 <HAL_RCC_OscConfig+0x244>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fc fe39 	bl	8001f18 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052aa:	f7fc fe35 	bl	8001f18 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e1a8      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052bc:	4b2b      	ldr	r3, [pc, #172]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c8:	4b28      	ldr	r3, [pc, #160]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4925      	ldr	r1, [pc, #148]	; (800536c <HAL_RCC_OscConfig+0x240>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]
 80052dc:	e015      	b.n	800530a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052de:	4b24      	ldr	r3, [pc, #144]	; (8005370 <HAL_RCC_OscConfig+0x244>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fc fe18 	bl	8001f18 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ec:	f7fc fe14 	bl	8001f18 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e187      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052fe:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d036      	beq.n	8005384 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d016      	beq.n	800534c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <HAL_RCC_OscConfig+0x248>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fc fdf8 	bl	8001f18 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800532c:	f7fc fdf4 	bl	8001f18 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e167      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_OscConfig+0x240>)
 8005340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x200>
 800534a:	e01b      	b.n	8005384 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_RCC_OscConfig+0x248>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fc fde1 	bl	8001f18 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005358:	e00e      	b.n	8005378 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535a:	f7fc fddd 	bl	8001f18 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d907      	bls.n	8005378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e150      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
 800536c:	40023800 	.word	0x40023800
 8005370:	42470000 	.word	0x42470000
 8005374:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005378:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCC_OscConfig+0x470>)
 800537a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ea      	bne.n	800535a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8097 	beq.w	80054c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005392:	2300      	movs	r3, #0
 8005394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005396:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	4b7d      	ldr	r3, [pc, #500]	; (800559c <HAL_RCC_OscConfig+0x470>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	4a7c      	ldr	r2, [pc, #496]	; (800559c <HAL_RCC_OscConfig+0x470>)
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b0:	6413      	str	r3, [r2, #64]	; 0x40
 80053b2:	4b7a      	ldr	r3, [pc, #488]	; (800559c <HAL_RCC_OscConfig+0x470>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c2:	4b77      	ldr	r3, [pc, #476]	; (80055a0 <HAL_RCC_OscConfig+0x474>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d118      	bne.n	8005400 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ce:	4b74      	ldr	r3, [pc, #464]	; (80055a0 <HAL_RCC_OscConfig+0x474>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a73      	ldr	r2, [pc, #460]	; (80055a0 <HAL_RCC_OscConfig+0x474>)
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053da:	f7fc fd9d 	bl	8001f18 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e2:	f7fc fd99 	bl	8001f18 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e10c      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f4:	4b6a      	ldr	r3, [pc, #424]	; (80055a0 <HAL_RCC_OscConfig+0x474>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d106      	bne.n	8005416 <HAL_RCC_OscConfig+0x2ea>
 8005408:	4b64      	ldr	r3, [pc, #400]	; (800559c <HAL_RCC_OscConfig+0x470>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	4a63      	ldr	r2, [pc, #396]	; (800559c <HAL_RCC_OscConfig+0x470>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	; 0x70
 8005414:	e01c      	b.n	8005450 <HAL_RCC_OscConfig+0x324>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b05      	cmp	r3, #5
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x30c>
 800541e:	4b5f      	ldr	r3, [pc, #380]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4a5e      	ldr	r2, [pc, #376]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005424:	f043 0304 	orr.w	r3, r3, #4
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	4b5c      	ldr	r3, [pc, #368]	; (800559c <HAL_RCC_OscConfig+0x470>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	4a5b      	ldr	r2, [pc, #364]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
 8005436:	e00b      	b.n	8005450 <HAL_RCC_OscConfig+0x324>
 8005438:	4b58      	ldr	r3, [pc, #352]	; (800559c <HAL_RCC_OscConfig+0x470>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	4a57      	ldr	r2, [pc, #348]	; (800559c <HAL_RCC_OscConfig+0x470>)
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	6713      	str	r3, [r2, #112]	; 0x70
 8005444:	4b55      	ldr	r3, [pc, #340]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	4a54      	ldr	r2, [pc, #336]	; (800559c <HAL_RCC_OscConfig+0x470>)
 800544a:	f023 0304 	bic.w	r3, r3, #4
 800544e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d015      	beq.n	8005484 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fc fd5e 	bl	8001f18 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545e:	e00a      	b.n	8005476 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005460:	f7fc fd5a 	bl	8001f18 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f241 3288 	movw	r2, #5000	; 0x1388
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e0cb      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005476:	4b49      	ldr	r3, [pc, #292]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0ee      	beq.n	8005460 <HAL_RCC_OscConfig+0x334>
 8005482:	e014      	b.n	80054ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005484:	f7fc fd48 	bl	8001f18 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800548a:	e00a      	b.n	80054a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800548c:	f7fc fd44 	bl	8001f18 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f241 3288 	movw	r2, #5000	; 0x1388
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e0b5      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a2:	4b3e      	ldr	r3, [pc, #248]	; (800559c <HAL_RCC_OscConfig+0x470>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1ee      	bne.n	800548c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b4:	4b39      	ldr	r3, [pc, #228]	; (800559c <HAL_RCC_OscConfig+0x470>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	4a38      	ldr	r2, [pc, #224]	; (800559c <HAL_RCC_OscConfig+0x470>)
 80054ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80a1 	beq.w	800560c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ca:	4b34      	ldr	r3, [pc, #208]	; (800559c <HAL_RCC_OscConfig+0x470>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d05c      	beq.n	8005590 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d141      	bne.n	8005562 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b31      	ldr	r3, [pc, #196]	; (80055a4 <HAL_RCC_OscConfig+0x478>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fc fd18 	bl	8001f18 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fc fd14 	bl	8001f18 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e087      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fe:	4b27      	ldr	r3, [pc, #156]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	019b      	lsls	r3, r3, #6
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	3b01      	subs	r3, #1
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	061b      	lsls	r3, r3, #24
 800552e:	491b      	ldr	r1, [pc, #108]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005530:	4313      	orrs	r3, r2
 8005532:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005534:	4b1b      	ldr	r3, [pc, #108]	; (80055a4 <HAL_RCC_OscConfig+0x478>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553a:	f7fc fced 	bl	8001f18 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005542:	f7fc fce9 	bl	8001f18 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e05c      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005554:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x416>
 8005560:	e054      	b.n	800560c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <HAL_RCC_OscConfig+0x478>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005568:	f7fc fcd6 	bl	8001f18 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005570:	f7fc fcd2 	bl	8001f18 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e045      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_RCC_OscConfig+0x470>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x444>
 800558e:	e03d      	b.n	800560c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e038      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
 800559c:	40023800 	.word	0x40023800
 80055a0:	40007000 	.word	0x40007000
 80055a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <HAL_RCC_OscConfig+0x4ec>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d028      	beq.n	8005608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d121      	bne.n	8005608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d11a      	bne.n	8005608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d111      	bne.n	8005608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	3b01      	subs	r3, #1
 80055f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d107      	bne.n	8005608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005604:	429a      	cmp	r2, r3
 8005606:	d001      	beq.n	800560c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800

0800561c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0cc      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b68      	ldr	r3, [pc, #416]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d90c      	bls.n	8005658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b63      	ldr	r3, [pc, #396]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0b8      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005670:	4b59      	ldr	r3, [pc, #356]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a58      	ldr	r2, [pc, #352]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800567a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005688:	4b53      	ldr	r3, [pc, #332]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4a52      	ldr	r2, [pc, #328]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005694:	4b50      	ldr	r3, [pc, #320]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	494d      	ldr	r1, [pc, #308]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d044      	beq.n	800573c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d107      	bne.n	80056ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ba:	4b47      	ldr	r3, [pc, #284]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d119      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e07f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d003      	beq.n	80056da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056da:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e06f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ea:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e067      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056fa:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 0203 	bic.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4934      	ldr	r1, [pc, #208]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005708:	4313      	orrs	r3, r2
 800570a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800570c:	f7fc fc04 	bl	8001f18 <HAL_GetTick>
 8005710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005712:	e00a      	b.n	800572a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005714:	f7fc fc00 	bl	8001f18 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e04f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572a:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 020c 	and.w	r2, r3, #12
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	429a      	cmp	r2, r3
 800573a:	d1eb      	bne.n	8005714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d20c      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e032      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4916      	ldr	r1, [pc, #88]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	490e      	ldr	r1, [pc, #56]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057a2:	f000 f821 	bl	80057e8 <HAL_RCC_GetSysClockFreq>
 80057a6:	4602      	mov	r2, r0
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	490a      	ldr	r1, [pc, #40]	; (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 80057b4:	5ccb      	ldrb	r3, [r1, r3]
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80057bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fc fb64 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40023c00 	.word	0x40023c00
 80057d8:	40023800 	.word	0x40023800
 80057dc:	0800826c 	.word	0x0800826c
 80057e0:	20000010 	.word	0x20000010
 80057e4:	20000014 	.word	0x20000014

080057e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ec:	b094      	sub	sp, #80	; 0x50
 80057ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	647b      	str	r3, [r7, #68]	; 0x44
 80057f4:	2300      	movs	r3, #0
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f8:	2300      	movs	r3, #0
 80057fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005800:	4b79      	ldr	r3, [pc, #484]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 030c 	and.w	r3, r3, #12
 8005808:	2b08      	cmp	r3, #8
 800580a:	d00d      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0x40>
 800580c:	2b08      	cmp	r3, #8
 800580e:	f200 80e1 	bhi.w	80059d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x34>
 8005816:	2b04      	cmp	r3, #4
 8005818:	d003      	beq.n	8005822 <HAL_RCC_GetSysClockFreq+0x3a>
 800581a:	e0db      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800581c:	4b73      	ldr	r3, [pc, #460]	; (80059ec <HAL_RCC_GetSysClockFreq+0x204>)
 800581e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005820:	e0db      	b.n	80059da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005822:	4b73      	ldr	r3, [pc, #460]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005826:	e0d8      	b.n	80059da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005828:	4b6f      	ldr	r3, [pc, #444]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005832:	4b6d      	ldr	r3, [pc, #436]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d063      	beq.n	8005906 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800583e:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	099b      	lsrs	r3, r3, #6
 8005844:	2200      	movs	r2, #0
 8005846:	63bb      	str	r3, [r7, #56]	; 0x38
 8005848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005850:	633b      	str	r3, [r7, #48]	; 0x30
 8005852:	2300      	movs	r3, #0
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
 8005856:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800585a:	4622      	mov	r2, r4
 800585c:	462b      	mov	r3, r5
 800585e:	f04f 0000 	mov.w	r0, #0
 8005862:	f04f 0100 	mov.w	r1, #0
 8005866:	0159      	lsls	r1, r3, #5
 8005868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800586c:	0150      	lsls	r0, r2, #5
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4621      	mov	r1, r4
 8005874:	1a51      	subs	r1, r2, r1
 8005876:	6139      	str	r1, [r7, #16]
 8005878:	4629      	mov	r1, r5
 800587a:	eb63 0301 	sbc.w	r3, r3, r1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800588c:	4659      	mov	r1, fp
 800588e:	018b      	lsls	r3, r1, #6
 8005890:	4651      	mov	r1, sl
 8005892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005896:	4651      	mov	r1, sl
 8005898:	018a      	lsls	r2, r1, #6
 800589a:	4651      	mov	r1, sl
 800589c:	ebb2 0801 	subs.w	r8, r2, r1
 80058a0:	4659      	mov	r1, fp
 80058a2:	eb63 0901 	sbc.w	r9, r3, r1
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ba:	4690      	mov	r8, r2
 80058bc:	4699      	mov	r9, r3
 80058be:	4623      	mov	r3, r4
 80058c0:	eb18 0303 	adds.w	r3, r8, r3
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	462b      	mov	r3, r5
 80058c8:	eb49 0303 	adc.w	r3, r9, r3
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058da:	4629      	mov	r1, r5
 80058dc:	024b      	lsls	r3, r1, #9
 80058de:	4621      	mov	r1, r4
 80058e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058e4:	4621      	mov	r1, r4
 80058e6:	024a      	lsls	r2, r1, #9
 80058e8:	4610      	mov	r0, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ee:	2200      	movs	r2, #0
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058f8:	f7fa fcca 	bl	8000290 <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4613      	mov	r3, r2
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005904:	e058      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005906:	4b38      	ldr	r3, [pc, #224]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	099b      	lsrs	r3, r3, #6
 800590c:	2200      	movs	r2, #0
 800590e:	4618      	mov	r0, r3
 8005910:	4611      	mov	r1, r2
 8005912:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005916:	623b      	str	r3, [r7, #32]
 8005918:	2300      	movs	r3, #0
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
 800591c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	f04f 0000 	mov.w	r0, #0
 8005928:	f04f 0100 	mov.w	r1, #0
 800592c:	0159      	lsls	r1, r3, #5
 800592e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005932:	0150      	lsls	r0, r2, #5
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4641      	mov	r1, r8
 800593a:	ebb2 0a01 	subs.w	sl, r2, r1
 800593e:	4649      	mov	r1, r9
 8005940:	eb63 0b01 	sbc.w	fp, r3, r1
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005950:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005954:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005958:	ebb2 040a 	subs.w	r4, r2, sl
 800595c:	eb63 050b 	sbc.w	r5, r3, fp
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	00eb      	lsls	r3, r5, #3
 800596a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800596e:	00e2      	lsls	r2, r4, #3
 8005970:	4614      	mov	r4, r2
 8005972:	461d      	mov	r5, r3
 8005974:	4643      	mov	r3, r8
 8005976:	18e3      	adds	r3, r4, r3
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	464b      	mov	r3, r9
 800597c:	eb45 0303 	adc.w	r3, r5, r3
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800598e:	4629      	mov	r1, r5
 8005990:	028b      	lsls	r3, r1, #10
 8005992:	4621      	mov	r1, r4
 8005994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005998:	4621      	mov	r1, r4
 800599a:	028a      	lsls	r2, r1, #10
 800599c:	4610      	mov	r0, r2
 800599e:	4619      	mov	r1, r3
 80059a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a2:	2200      	movs	r2, #0
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	61fa      	str	r2, [r7, #28]
 80059a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ac:	f7fa fc70 	bl	8000290 <__aeabi_uldivmod>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4613      	mov	r3, r2
 80059b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059b8:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	3301      	adds	r3, #1
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80059c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059d2:	e002      	b.n	80059da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <HAL_RCC_GetSysClockFreq+0x204>)
 80059d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3750      	adds	r7, #80	; 0x50
 80059e0:	46bd      	mov	sp, r7
 80059e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e6:	bf00      	nop
 80059e8:	40023800 	.word	0x40023800
 80059ec:	00f42400 	.word	0x00f42400
 80059f0:	007a1200 	.word	0x007a1200

080059f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f8:	4b03      	ldr	r3, [pc, #12]	; (8005a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010

08005a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a10:	f7ff fff0 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a14:	4602      	mov	r2, r0
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	0a9b      	lsrs	r3, r3, #10
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	4903      	ldr	r1, [pc, #12]	; (8005a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a22:	5ccb      	ldrb	r3, [r1, r3]
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	0800827c 	.word	0x0800827c

08005a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a38:	f7ff ffdc 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	0b5b      	lsrs	r3, r3, #13
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4903      	ldr	r1, [pc, #12]	; (8005a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	0800827c 	.word	0x0800827c

08005a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e07b      	b.n	8005b66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d108      	bne.n	8005a88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7e:	d009      	beq.n	8005a94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	61da      	str	r2, [r3, #28]
 8005a86:	e005      	b.n	8005a94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb ff40 	bl	8001934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b18:	ea42 0103 	orr.w	r1, r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	f003 0104 	and.w	r1, r3, #4
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	f003 0210 	and.w	r2, r3, #16
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_SPI_TransmitReceive_IT+0x20>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e075      	b.n	8005c7c <HAL_SPI_TransmitReceive_IT+0x10c>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b9e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ba6:	7dbb      	ldrb	r3, [r7, #22]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d00d      	beq.n	8005bc8 <HAL_SPI_TransmitReceive_IT+0x58>
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb2:	d106      	bne.n	8005bc2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <HAL_SPI_TransmitReceive_IT+0x52>
 8005bbc:	7dbb      	ldrb	r3, [r7, #22]
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bc6:	e054      	b.n	8005c72 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_SPI_TransmitReceive_IT+0x6a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_TransmitReceive_IT+0x6a>
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bde:	e048      	b.n	8005c72 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d003      	beq.n	8005bf4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2205      	movs	r2, #5
 8005bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	887a      	ldrh	r2, [r7, #2]
 8005c04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	887a      	ldrh	r2, [r7, #2]
 8005c0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	887a      	ldrh	r2, [r7, #2]
 8005c16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	887a      	ldrh	r2, [r7, #2]
 8005c1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <HAL_SPI_TransmitReceive_IT+0x118>)
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44
 8005c32:	e005      	b.n	8005c40 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <HAL_SPI_TransmitReceive_IT+0x120>)
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <HAL_SPI_TransmitReceive_IT+0x124>)
 8005c3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005c4e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d008      	beq.n	8005c70 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e000      	b.n	8005c72 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005c70:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	08005fad 	.word	0x08005fad
 8005c8c:	0800600d 	.word	0x0800600d
 8005c90:	08005ee9 	.word	0x08005ee9
 8005c94:	08005f4d 	.word	0x08005f4d

08005c98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	099b      	lsrs	r3, r3, #6
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10f      	bne.n	8005cdc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	099b      	lsrs	r3, r3, #6
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
    return;
 8005cda:	e0d7      	b.n	8005e8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HAL_SPI_IRQHandler+0x66>
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	09db      	lsrs	r3, r3, #7
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
    return;
 8005cfc:	e0c6      	b.n	8005e8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10c      	bne.n	8005d24 <HAL_SPI_IRQHandler+0x8c>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	099b      	lsrs	r3, r3, #6
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	0a1b      	lsrs	r3, r3, #8
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80b4 	beq.w	8005e8c <HAL_SPI_IRQHandler+0x1f4>
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80ad 	beq.w	8005e8c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	099b      	lsrs	r3, r3, #6
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d023      	beq.n	8005d86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d011      	beq.n	8005d6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f043 0204 	orr.w	r2, r3, #4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	e00b      	b.n	8005d86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	693b      	ldr	r3, [r7, #16]
        return;
 8005d84:	e082      	b.n	8005e8c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d014      	beq.n	8005dbc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f043 0201 	orr.w	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	0a1b      	lsrs	r3, r3, #8
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00c      	beq.n	8005de2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	f043 0208 	orr.w	r2, r3, #8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d04f      	beq.n	8005e8a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005df8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <HAL_SPI_IRQHandler+0x17e>
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d034      	beq.n	8005e80 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0203 	bic.w	r2, r2, #3
 8005e24:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <HAL_SPI_IRQHandler+0x1fc>)
 8005e34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fc fd96 	bl	800296c <HAL_DMA_Abort_IT>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d016      	beq.n	8005e88 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <HAL_SPI_IRQHandler+0x1fc>)
 8005e60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fc fd80 	bl	800296c <HAL_DMA_Abort_IT>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005e7e:	e003      	b.n	8005e88 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f813 	bl	8005eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e86:	e000      	b.n	8005e8a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005e88:	bf00      	nop
    return;
 8005e8a:	bf00      	nop
  }
}
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	08005ec1 	.word	0x08005ec1

08005e98 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff ffe6 	bl	8005eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ee0:	bf00      	nop
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f103 020c 	add.w	r2, r3, #12
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	7812      	ldrb	r2, [r2, #0]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10f      	bne.n	8005f44 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f95e 	bl	8006200 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10f      	bne.n	8005fa4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f92:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f92e 	bl	8006200 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	b292      	uxth	r2, r2
 8005fc0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10f      	bne.n	8006004 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f8fe 	bl	8006200 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006004:	bf00      	nop
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	881a      	ldrh	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	1c9a      	adds	r2, r3, #2
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006050:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8cf 	bl	8006200 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800607c:	f7fb ff4c 	bl	8001f18 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	4413      	add	r3, r2
 800608a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800608c:	f7fb ff44 	bl	8001f18 <HAL_GetTick>
 8006090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006092:	4b39      	ldr	r3, [pc, #228]	; (8006178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	015b      	lsls	r3, r3, #5
 8006098:	0d1b      	lsrs	r3, r3, #20
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060a2:	e054      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d050      	beq.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060ac:	f7fb ff34 	bl	8001f18 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d902      	bls.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d13d      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060da:	d111      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e4:	d004      	beq.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ee:	d107      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006108:	d10f      	bne.n	800612a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e017      	b.n	800616e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3b01      	subs	r3, #1
 800614c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d19b      	bne.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000010 	.word	0x20000010

0800617c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006188:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <SPI_EndRxTxTransaction+0x7c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <SPI_EndRxTxTransaction+0x80>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	0d5b      	lsrs	r3, r3, #21
 8006194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006198:	fb02 f303 	mul.w	r3, r2, r3
 800619c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a6:	d112      	bne.n	80061ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2200      	movs	r2, #0
 80061b0:	2180      	movs	r1, #128	; 0x80
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff ff5a 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c2:	f043 0220 	orr.w	r2, r3, #32
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e00f      	b.n	80061ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e4:	2b80      	cmp	r3, #128	; 0x80
 80061e6:	d0f2      	beq.n	80061ce <SPI_EndRxTxTransaction+0x52>
 80061e8:	e000      	b.n	80061ec <SPI_EndRxTxTransaction+0x70>
        break;
 80061ea:	bf00      	nop
  }

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000010 	.word	0x20000010
 80061fc:	165e9f81 	.word	0x165e9f81

08006200 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006208:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <SPI_CloseRxTx_ISR+0xe0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a35      	ldr	r2, [pc, #212]	; (80062e4 <SPI_CloseRxTx_ISR+0xe4>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	0a5b      	lsrs	r3, r3, #9
 8006214:	2264      	movs	r2, #100	; 0x64
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800621c:	f7fb fe7c 	bl	8001f18 <HAL_GetTick>
 8006220:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0220 	bic.w	r2, r2, #32
 8006230:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006244:	e009      	b.n	800625a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	3b01      	subs	r3, #1
 800624a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0eb      	beq.n	8006232 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	2164      	movs	r1, #100	; 0x64
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff ff8c 	bl	800617c <SPI_EndRxTxTransaction>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	2b00      	cmp	r3, #0
 800629a:	d115      	bne.n	80062c8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d107      	bne.n	80062b8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fdf1 	bl	8005e98 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80062b6:	e00e      	b.n	80062d6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fb f8c1 	bl	8001448 <HAL_SPI_TxRxCpltCallback>
}
 80062c6:	e006      	b.n	80062d6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fdeb 	bl	8005eac <HAL_SPI_ErrorCallback>
}
 80062d6:	bf00      	nop
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000010 	.word	0x20000010
 80062e4:	057619f1 	.word	0x057619f1

080062e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e03f      	b.n	800637a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fb fbbe 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 f84d 	bl	80073cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695a      	ldr	r2, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b08a      	sub	sp, #40	; 0x28
 8006386:	af02      	add	r7, sp, #8
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d17c      	bne.n	800649c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_UART_Transmit+0x2c>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e075      	b.n	800649e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Transmit+0x3e>
 80063bc:	2302      	movs	r3, #2
 80063be:	e06e      	b.n	800649e <HAL_UART_Transmit+0x11c>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2221      	movs	r2, #33	; 0x21
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063d6:	f7fb fd9f 	bl	8001f18 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	88fa      	ldrh	r2, [r7, #6]
 80063e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f0:	d108      	bne.n	8006404 <HAL_UART_Transmit+0x82>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	e003      	b.n	800640c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006408:	2300      	movs	r3, #0
 800640a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006414:	e02a      	b.n	800646c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fd04 	bl	8006e2e <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e036      	b.n	800649e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	3302      	adds	r3, #2
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e007      	b.n	800645e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	3301      	adds	r3, #1
 800645c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1cf      	bne.n	8006416 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2200      	movs	r2, #0
 800647e:	2140      	movs	r1, #64	; 0x40
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fcd4 	bl	8006e2e <UART_WaitOnFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e006      	b.n	800649e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	e000      	b.n	800649e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d165      	bne.n	800658e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_UART_Transmit_DMA+0x26>
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e05e      	b.n	8006590 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_UART_Transmit_DMA+0x38>
 80064dc:	2302      	movs	r3, #2
 80064de:	e057      	b.n	8006590 <HAL_UART_Transmit_DMA+0xe8>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	88fa      	ldrh	r2, [r7, #6]
 80064f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	88fa      	ldrh	r2, [r7, #6]
 80064f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2221      	movs	r2, #33	; 0x21
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <HAL_UART_Transmit_DMA+0xf0>)
 800650e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_UART_Transmit_DMA+0xf4>)
 8006516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651c:	4a20      	ldr	r2, [pc, #128]	; (80065a0 <HAL_UART_Transmit_DMA+0xf8>)
 800651e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	2200      	movs	r2, #0
 8006526:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006528:	f107 0308 	add.w	r3, r7, #8
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	6819      	ldr	r1, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3304      	adds	r3, #4
 800653c:	461a      	mov	r2, r3
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	f7fc f94c 	bl	80027dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800654c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3314      	adds	r3, #20
 800655c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	617b      	str	r3, [r7, #20]
   return(result);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006576:	627a      	str	r2, [r7, #36]	; 0x24
 8006578:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6a39      	ldr	r1, [r7, #32]
 800657c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	61fb      	str	r3, [r7, #28]
   return(result);
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e5      	bne.n	8006556 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3730      	adds	r7, #48	; 0x30
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08006b89 	.word	0x08006b89
 800659c:	08006c23 	.word	0x08006c23
 80065a0:	08006d9b 	.word	0x08006d9b

080065a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	4613      	mov	r3, r2
 80065b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d11d      	bne.n	80065fa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_UART_Receive_DMA+0x26>
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e016      	b.n	80065fc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_UART_Receive_DMA+0x38>
 80065d8:	2302      	movs	r3, #2
 80065da:	e00f      	b.n	80065fc <HAL_UART_Receive_DMA+0x58>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	461a      	mov	r2, r3
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fc8b 	bl	8006f0c <UART_Start_Receive_DMA>
 80065f6:	4603      	mov	r3, r0
 80065f8:	e000      	b.n	80065fc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
  }
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b0ba      	sub	sp, #232	; 0xe8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006630:	2300      	movs	r3, #0
 8006632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10f      	bne.n	800666a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800664a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_UART_IRQHandler+0x66>
 8006656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fdf7 	bl	8007256 <UART_Receive_IT>
      return;
 8006668:	e256      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800666a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80de 	beq.w	8006830 <HAL_UART_IRQHandler+0x22c>
 8006674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80d1 	beq.w	8006830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <HAL_UART_IRQHandler+0xae>
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f043 0201 	orr.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <HAL_UART_IRQHandler+0xd2>
 80066be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f043 0202 	orr.w	r2, r3, #2
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0xf6>
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f043 0204 	orr.w	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d011      	beq.n	800672a <HAL_UART_IRQHandler+0x126>
 8006706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f043 0208 	orr.w	r2, r3, #8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 81ed 	beq.w	8006b0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_UART_IRQHandler+0x14e>
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fd82 	bl	8007256 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b40      	cmp	r3, #64	; 0x40
 800675e:	bf0c      	ite	eq
 8006760:	2301      	moveq	r3, #1
 8006762:	2300      	movne	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <HAL_UART_IRQHandler+0x17a>
 8006776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d04f      	beq.n	800681e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc8a 	bl	8007098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d141      	bne.n	8006816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3314      	adds	r3, #20
 8006798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3314      	adds	r3, #20
 80067ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1d9      	bne.n	8006792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d013      	beq.n	800680e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	4a7d      	ldr	r2, [pc, #500]	; (80069e0 <HAL_UART_IRQHandler+0x3dc>)
 80067ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fc f8ba 	bl	800296c <HAL_DMA_Abort_IT>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d016      	beq.n	800682c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006808:	4610      	mov	r0, r2
 800680a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	e00e      	b.n	800682c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f9a4 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	e00a      	b.n	800682c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9a0 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e006      	b.n	800682c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f99c 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800682a:	e170      	b.n	8006b0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	bf00      	nop
    return;
 800682e:	e16e      	b.n	8006b0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	2b01      	cmp	r3, #1
 8006836:	f040 814a 	bne.w	8006ace <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8143 	beq.w	8006ace <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 813c 	beq.w	8006ace <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	60bb      	str	r3, [r7, #8]
 800686a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	f040 80b4 	bne.w	80069e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8140 	beq.w	8006b12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800689a:	429a      	cmp	r2, r3
 800689c:	f080 8139 	bcs.w	8006b12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b2:	f000 8088 	beq.w	80069c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1d9      	bne.n	80068b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3314      	adds	r3, #20
 8006908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3314      	adds	r3, #20
 8006922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800692a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800692e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e1      	bne.n	8006902 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800694e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e3      	bne.n	800693e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80069aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e3      	bne.n	8006984 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fb ff63 	bl	800288c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f8ca 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069dc:	e099      	b.n	8006b12 <HAL_UART_IRQHandler+0x50e>
 80069de:	bf00      	nop
 80069e0:	0800715f 	.word	0x0800715f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 808b 	beq.w	8006b16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8086 	beq.w	8006b16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a2e:	647a      	str	r2, [r7, #68]	; 0x44
 8006a30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e3      	bne.n	8006a0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	623b      	str	r3, [r7, #32]
   return(result);
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3314      	adds	r3, #20
 8006a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a66:	633a      	str	r2, [r7, #48]	; 0x30
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0310 	bic.w	r3, r3, #16
 8006a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006aac:	61fa      	str	r2, [r7, #28]
 8006aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	69b9      	ldr	r1, [r7, #24]
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e3      	bne.n	8006a88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f852 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006acc:	e023      	b.n	8006b16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d009      	beq.n	8006aee <HAL_UART_IRQHandler+0x4ea>
 8006ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fb4d 	bl	8007186 <UART_Transmit_IT>
    return;
 8006aec:	e014      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00e      	beq.n	8006b18 <HAL_UART_IRQHandler+0x514>
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fb8d 	bl	8007226 <UART_EndTransmit_IT>
    return;
 8006b0c:	e004      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
    return;
 8006b0e:	bf00      	nop
 8006b10:	e002      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
      return;
 8006b12:	bf00      	nop
 8006b14:	e000      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
      return;
 8006b16:	bf00      	nop
  }
}
 8006b18:	37e8      	adds	r7, #232	; 0xe8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop

08006b20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b090      	sub	sp, #64	; 0x40
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d137      	bne.n	8006c14 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3314      	adds	r3, #20
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3314      	adds	r3, #20
 8006bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bca:	633a      	str	r2, [r7, #48]	; 0x30
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e5      	bne.n	8006baa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bfe:	61fa      	str	r2, [r7, #28]
 8006c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	69b9      	ldr	r1, [r7, #24]
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e5      	bne.n	8006bde <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c12:	e002      	b.n	8006c1a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006c16:	f7ff ff83 	bl	8006b20 <HAL_UART_TxCpltCallback>
}
 8006c1a:	bf00      	nop
 8006c1c:	3740      	adds	r7, #64	; 0x40
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff ff7f 	bl	8006b34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b09c      	sub	sp, #112	; 0x70
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d172      	bne.n	8006d40 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c80:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e5      	bne.n	8006c60 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca6:	f023 0301 	bic.w	r3, r3, #1
 8006caa:	667b      	str	r3, [r7, #100]	; 0x64
 8006cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006cb4:	647a      	str	r2, [r7, #68]	; 0x44
 8006cb6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cde:	663b      	str	r3, [r7, #96]	; 0x60
 8006ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d119      	bne.n	8006d40 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0310 	bic.w	r3, r3, #16
 8006d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	330c      	adds	r3, #12
 8006d2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d2c:	61fa      	str	r2, [r7, #28]
 8006d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	69b9      	ldr	r1, [r7, #24]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e5      	bne.n	8006d0c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d106      	bne.n	8006d56 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d50:	f7ff ff0e 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d54:	e002      	b.n	8006d5c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006d56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d58:	f7f9 ff44 	bl	8000be4 <HAL_UART_RxCpltCallback>
}
 8006d5c:	bf00      	nop
 8006d5e:	3770      	adds	r7, #112	; 0x70
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d108      	bne.n	8006d8c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff fef3 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d8a:	e002      	b.n	8006d92 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fedb 	bl	8006b48 <HAL_UART_RxHalfCpltCallback>
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db6:	2b80      	cmp	r3, #128	; 0x80
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b21      	cmp	r3, #33	; 0x21
 8006dcc:	d108      	bne.n	8006de0 <UART_DMAError+0x46>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006dda:	68b8      	ldr	r0, [r7, #8]
 8006ddc:	f000 f934 	bl	8007048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	bf0c      	ite	eq
 8006dee:	2301      	moveq	r3, #1
 8006df0:	2300      	movne	r3, #0
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b22      	cmp	r3, #34	; 0x22
 8006e00:	d108      	bne.n	8006e14 <UART_DMAError+0x7a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e0e:	68b8      	ldr	r0, [r7, #8]
 8006e10:	f000 f942 	bl	8007098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	f043 0210 	orr.w	r2, r3, #16
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e20:	68b8      	ldr	r0, [r7, #8]
 8006e22:	f7ff fe9b 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b090      	sub	sp, #64	; 0x40
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	60f8      	str	r0, [r7, #12]
 8006e36:	60b9      	str	r1, [r7, #8]
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3e:	e050      	b.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d04c      	beq.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e4e:	f7fb f863 	bl	8001f18 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d241      	bcs.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e7e:	637a      	str	r2, [r7, #52]	; 0x34
 8006e80:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e5      	bne.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3314      	adds	r3, #20
 8006eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb2:	623a      	str	r2, [r7, #32]
 8006eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	69f9      	ldr	r1, [r7, #28]
 8006eb8:	6a3a      	ldr	r2, [r7, #32]
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e5      	bne.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e00f      	b.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4013      	ands	r3, r2
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	bf0c      	ite	eq
 8006ef2:	2301      	moveq	r3, #1
 8006ef4:	2300      	movne	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d09f      	beq.n	8006e40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3740      	adds	r7, #64	; 0x40
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b098      	sub	sp, #96	; 0x60
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2222      	movs	r2, #34	; 0x22
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	4a40      	ldr	r2, [pc, #256]	; (800703c <UART_Start_Receive_DMA+0x130>)
 8006f3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	4a3f      	ldr	r2, [pc, #252]	; (8007040 <UART_Start_Receive_DMA+0x134>)
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	4a3e      	ldr	r2, [pc, #248]	; (8007044 <UART_Start_Receive_DMA+0x138>)
 8006f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	2200      	movs	r2, #0
 8006f52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f54:	f107 0308 	add.w	r3, r7, #8
 8006f58:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	f7fb fc36 	bl	80027dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f70:	2300      	movs	r3, #0
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d019      	beq.n	8006fca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006fb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3314      	adds	r3, #20
 8006fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fea:	63ba      	str	r2, [r7, #56]	; 0x38
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e5      	bne.n	8006fca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3314      	adds	r3, #20
 8007004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	617b      	str	r3, [r7, #20]
   return(result);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007014:	653b      	str	r3, [r7, #80]	; 0x50
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3314      	adds	r3, #20
 800701c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800701e:	627a      	str	r2, [r7, #36]	; 0x24
 8007020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6a39      	ldr	r1, [r7, #32]
 8007024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	61fb      	str	r3, [r7, #28]
   return(result);
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e5      	bne.n	8006ffe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3760      	adds	r7, #96	; 0x60
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	08006c3f 	.word	0x08006c3f
 8007040:	08006d65 	.word	0x08006d65
 8007044:	08006d9b 	.word	0x08006d9b

08007048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b089      	sub	sp, #36	; 0x24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007066:	61fb      	str	r3, [r7, #28]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	330c      	adds	r3, #12
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	61ba      	str	r2, [r7, #24]
 8007072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6979      	ldr	r1, [r7, #20]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	613b      	str	r3, [r7, #16]
   return(result);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e5      	bne.n	8007050 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800708c:	bf00      	nop
 800708e:	3724      	adds	r7, #36	; 0x24
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b095      	sub	sp, #84	; 0x54
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070c0:	643a      	str	r2, [r7, #64]	; 0x40
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3314      	adds	r3, #20
 80070da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3314      	adds	r3, #20
 80070f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e5      	bne.n	80070d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	2b01      	cmp	r3, #1
 800710e:	d119      	bne.n	8007144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	647b      	str	r3, [r7, #68]	; 0x44
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007130:	61ba      	str	r2, [r7, #24]
 8007132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	613b      	str	r3, [r7, #16]
   return(result);
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e5      	bne.n	8007110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007152:	bf00      	nop
 8007154:	3754      	adds	r7, #84	; 0x54
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7ff fcef 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800717e:	bf00      	nop
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b21      	cmp	r3, #33	; 0x21
 8007198:	d13e      	bne.n	8007218 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a2:	d114      	bne.n	80071ce <UART_Transmit_IT+0x48>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d110      	bne.n	80071ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	1c9a      	adds	r2, r3, #2
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	621a      	str	r2, [r3, #32]
 80071cc:	e008      	b.n	80071e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	1c59      	adds	r1, r3, #1
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6211      	str	r1, [r2, #32]
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4619      	mov	r1, r3
 80071ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10f      	bne.n	8007214 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007202:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007212:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	e000      	b.n	800721a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007218:	2302      	movs	r3, #2
  }
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800723c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff fc6a 	bl	8006b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b08c      	sub	sp, #48	; 0x30
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b22      	cmp	r3, #34	; 0x22
 8007268:	f040 80ab 	bne.w	80073c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007274:	d117      	bne.n	80072a6 <UART_Receive_IT+0x50>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d113      	bne.n	80072a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800727e:	2300      	movs	r3, #0
 8007280:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	b29b      	uxth	r3, r3
 8007290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007294:	b29a      	uxth	r2, r3
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729e:	1c9a      	adds	r2, r3, #2
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	629a      	str	r2, [r3, #40]	; 0x28
 80072a4:	e026      	b.n	80072f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072ac:	2300      	movs	r3, #0
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b8:	d007      	beq.n	80072ca <UART_Receive_IT+0x74>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <UART_Receive_IT+0x82>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d106      	bne.n	80072d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	e008      	b.n	80072ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4619      	mov	r1, r3
 8007302:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007304:	2b00      	cmp	r3, #0
 8007306:	d15a      	bne.n	80073be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0220 	bic.w	r2, r2, #32
 8007316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695a      	ldr	r2, [r3, #20]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	2b01      	cmp	r3, #1
 8007346:	d135      	bne.n	80073b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	613b      	str	r3, [r7, #16]
   return(result);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f023 0310 	bic.w	r3, r3, #16
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736e:	623a      	str	r2, [r7, #32]
 8007370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	69f9      	ldr	r1, [r7, #28]
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	61bb      	str	r3, [r7, #24]
   return(result);
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e5      	bne.n	800734e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b10      	cmp	r3, #16
 800738e:	d10a      	bne.n	80073a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff fbdf 	bl	8006b70 <HAL_UARTEx_RxEventCallback>
 80073b2:	e002      	b.n	80073ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7f9 fc15 	bl	8000be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e002      	b.n	80073c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	e000      	b.n	80073c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80073c2:	2302      	movs	r3, #2
  }
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3730      	adds	r7, #48	; 0x30
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d0:	b0c0      	sub	sp, #256	; 0x100
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e8:	68d9      	ldr	r1, [r3, #12]
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	ea40 0301 	orr.w	r3, r0, r1
 80073f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	431a      	orrs	r2, r3
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	431a      	orrs	r2, r3
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007424:	f021 010c 	bic.w	r1, r1, #12
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007432:	430b      	orrs	r3, r1
 8007434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007446:	6999      	ldr	r1, [r3, #24]
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	ea40 0301 	orr.w	r3, r0, r1
 8007452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b8f      	ldr	r3, [pc, #572]	; (8007698 <UART_SetConfig+0x2cc>)
 800745c:	429a      	cmp	r2, r3
 800745e:	d005      	beq.n	800746c <UART_SetConfig+0xa0>
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4b8d      	ldr	r3, [pc, #564]	; (800769c <UART_SetConfig+0x2d0>)
 8007468:	429a      	cmp	r2, r3
 800746a:	d104      	bne.n	8007476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800746c:	f7fe fae2 	bl	8005a34 <HAL_RCC_GetPCLK2Freq>
 8007470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007474:	e003      	b.n	800747e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007476:	f7fe fac9 	bl	8005a0c <HAL_RCC_GetPCLK1Freq>
 800747a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007488:	f040 810c 	bne.w	80076a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800748c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007490:	2200      	movs	r2, #0
 8007492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800749a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	1891      	adds	r1, r2, r2
 80074a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80074a6:	415b      	adcs	r3, r3
 80074a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074ae:	4621      	mov	r1, r4
 80074b0:	eb12 0801 	adds.w	r8, r2, r1
 80074b4:	4629      	mov	r1, r5
 80074b6:	eb43 0901 	adc.w	r9, r3, r1
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ce:	4690      	mov	r8, r2
 80074d0:	4699      	mov	r9, r3
 80074d2:	4623      	mov	r3, r4
 80074d4:	eb18 0303 	adds.w	r3, r8, r3
 80074d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074dc:	462b      	mov	r3, r5
 80074de:	eb49 0303 	adc.w	r3, r9, r3
 80074e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80074f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074fa:	460b      	mov	r3, r1
 80074fc:	18db      	adds	r3, r3, r3
 80074fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007500:	4613      	mov	r3, r2
 8007502:	eb42 0303 	adc.w	r3, r2, r3
 8007506:	657b      	str	r3, [r7, #84]	; 0x54
 8007508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800750c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007510:	f7f8 febe 	bl	8000290 <__aeabi_uldivmod>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4b61      	ldr	r3, [pc, #388]	; (80076a0 <UART_SetConfig+0x2d4>)
 800751a:	fba3 2302 	umull	r2, r3, r3, r2
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	011c      	lsls	r4, r3, #4
 8007522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007526:	2200      	movs	r2, #0
 8007528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800752c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007534:	4642      	mov	r2, r8
 8007536:	464b      	mov	r3, r9
 8007538:	1891      	adds	r1, r2, r2
 800753a:	64b9      	str	r1, [r7, #72]	; 0x48
 800753c:	415b      	adcs	r3, r3
 800753e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007544:	4641      	mov	r1, r8
 8007546:	eb12 0a01 	adds.w	sl, r2, r1
 800754a:	4649      	mov	r1, r9
 800754c:	eb43 0b01 	adc.w	fp, r3, r1
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800755c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007564:	4692      	mov	sl, r2
 8007566:	469b      	mov	fp, r3
 8007568:	4643      	mov	r3, r8
 800756a:	eb1a 0303 	adds.w	r3, sl, r3
 800756e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007572:	464b      	mov	r3, r9
 8007574:	eb4b 0303 	adc.w	r3, fp, r3
 8007578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800758c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007590:	460b      	mov	r3, r1
 8007592:	18db      	adds	r3, r3, r3
 8007594:	643b      	str	r3, [r7, #64]	; 0x40
 8007596:	4613      	mov	r3, r2
 8007598:	eb42 0303 	adc.w	r3, r2, r3
 800759c:	647b      	str	r3, [r7, #68]	; 0x44
 800759e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075a6:	f7f8 fe73 	bl	8000290 <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	4b3b      	ldr	r3, [pc, #236]	; (80076a0 <UART_SetConfig+0x2d4>)
 80075b2:	fba3 2301 	umull	r2, r3, r3, r1
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	2264      	movs	r2, #100	; 0x64
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
 80075be:	1acb      	subs	r3, r1, r3
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075c6:	4b36      	ldr	r3, [pc, #216]	; (80076a0 <UART_SetConfig+0x2d4>)
 80075c8:	fba3 2302 	umull	r2, r3, r3, r2
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075d4:	441c      	add	r4, r3
 80075d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	1891      	adds	r1, r2, r2
 80075ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80075f0:	415b      	adcs	r3, r3
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075f8:	4641      	mov	r1, r8
 80075fa:	1851      	adds	r1, r2, r1
 80075fc:	6339      	str	r1, [r7, #48]	; 0x30
 80075fe:	4649      	mov	r1, r9
 8007600:	414b      	adcs	r3, r1
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007610:	4659      	mov	r1, fp
 8007612:	00cb      	lsls	r3, r1, #3
 8007614:	4651      	mov	r1, sl
 8007616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800761a:	4651      	mov	r1, sl
 800761c:	00ca      	lsls	r2, r1, #3
 800761e:	4610      	mov	r0, r2
 8007620:	4619      	mov	r1, r3
 8007622:	4603      	mov	r3, r0
 8007624:	4642      	mov	r2, r8
 8007626:	189b      	adds	r3, r3, r2
 8007628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800762c:	464b      	mov	r3, r9
 800762e:	460a      	mov	r2, r1
 8007630:	eb42 0303 	adc.w	r3, r2, r3
 8007634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800764c:	460b      	mov	r3, r1
 800764e:	18db      	adds	r3, r3, r3
 8007650:	62bb      	str	r3, [r7, #40]	; 0x28
 8007652:	4613      	mov	r3, r2
 8007654:	eb42 0303 	adc.w	r3, r2, r3
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800765a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800765e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007662:	f7f8 fe15 	bl	8000290 <__aeabi_uldivmod>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <UART_SetConfig+0x2d4>)
 800766c:	fba3 1302 	umull	r1, r3, r3, r2
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	2164      	movs	r1, #100	; 0x64
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	3332      	adds	r3, #50	; 0x32
 800767e:	4a08      	ldr	r2, [pc, #32]	; (80076a0 <UART_SetConfig+0x2d4>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	f003 0207 	and.w	r2, r3, #7
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4422      	add	r2, r4
 8007692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007694:	e105      	b.n	80078a2 <UART_SetConfig+0x4d6>
 8007696:	bf00      	nop
 8007698:	40011000 	.word	0x40011000
 800769c:	40011400 	.word	0x40011400
 80076a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076b6:	4642      	mov	r2, r8
 80076b8:	464b      	mov	r3, r9
 80076ba:	1891      	adds	r1, r2, r2
 80076bc:	6239      	str	r1, [r7, #32]
 80076be:	415b      	adcs	r3, r3
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
 80076c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076c6:	4641      	mov	r1, r8
 80076c8:	1854      	adds	r4, r2, r1
 80076ca:	4649      	mov	r1, r9
 80076cc:	eb43 0501 	adc.w	r5, r3, r1
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	00eb      	lsls	r3, r5, #3
 80076da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076de:	00e2      	lsls	r2, r4, #3
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	4643      	mov	r3, r8
 80076e6:	18e3      	adds	r3, r4, r3
 80076e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076ec:	464b      	mov	r3, r9
 80076ee:	eb45 0303 	adc.w	r3, r5, r3
 80076f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007712:	4629      	mov	r1, r5
 8007714:	008b      	lsls	r3, r1, #2
 8007716:	4621      	mov	r1, r4
 8007718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800771c:	4621      	mov	r1, r4
 800771e:	008a      	lsls	r2, r1, #2
 8007720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007724:	f7f8 fdb4 	bl	8000290 <__aeabi_uldivmod>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4b60      	ldr	r3, [pc, #384]	; (80078b0 <UART_SetConfig+0x4e4>)
 800772e:	fba3 2302 	umull	r2, r3, r3, r2
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	011c      	lsls	r4, r3, #4
 8007736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800773a:	2200      	movs	r2, #0
 800773c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	1891      	adds	r1, r2, r2
 800774e:	61b9      	str	r1, [r7, #24]
 8007750:	415b      	adcs	r3, r3
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007758:	4641      	mov	r1, r8
 800775a:	1851      	adds	r1, r2, r1
 800775c:	6139      	str	r1, [r7, #16]
 800775e:	4649      	mov	r1, r9
 8007760:	414b      	adcs	r3, r1
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007770:	4659      	mov	r1, fp
 8007772:	00cb      	lsls	r3, r1, #3
 8007774:	4651      	mov	r1, sl
 8007776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800777a:	4651      	mov	r1, sl
 800777c:	00ca      	lsls	r2, r1, #3
 800777e:	4610      	mov	r0, r2
 8007780:	4619      	mov	r1, r3
 8007782:	4603      	mov	r3, r0
 8007784:	4642      	mov	r2, r8
 8007786:	189b      	adds	r3, r3, r2
 8007788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800778c:	464b      	mov	r3, r9
 800778e:	460a      	mov	r2, r1
 8007790:	eb42 0303 	adc.w	r3, r2, r3
 8007794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077b0:	4649      	mov	r1, r9
 80077b2:	008b      	lsls	r3, r1, #2
 80077b4:	4641      	mov	r1, r8
 80077b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ba:	4641      	mov	r1, r8
 80077bc:	008a      	lsls	r2, r1, #2
 80077be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077c2:	f7f8 fd65 	bl	8000290 <__aeabi_uldivmod>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4b39      	ldr	r3, [pc, #228]	; (80078b0 <UART_SetConfig+0x4e4>)
 80077cc:	fba3 1302 	umull	r1, r3, r3, r2
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	2164      	movs	r1, #100	; 0x64
 80077d4:	fb01 f303 	mul.w	r3, r1, r3
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	3332      	adds	r3, #50	; 0x32
 80077de:	4a34      	ldr	r2, [pc, #208]	; (80078b0 <UART_SetConfig+0x4e4>)
 80077e0:	fba2 2303 	umull	r2, r3, r2, r3
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077ea:	441c      	add	r4, r3
 80077ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077f0:	2200      	movs	r2, #0
 80077f2:	673b      	str	r3, [r7, #112]	; 0x70
 80077f4:	677a      	str	r2, [r7, #116]	; 0x74
 80077f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80077fa:	4642      	mov	r2, r8
 80077fc:	464b      	mov	r3, r9
 80077fe:	1891      	adds	r1, r2, r2
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	415b      	adcs	r3, r3
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800780a:	4641      	mov	r1, r8
 800780c:	1851      	adds	r1, r2, r1
 800780e:	6039      	str	r1, [r7, #0]
 8007810:	4649      	mov	r1, r9
 8007812:	414b      	adcs	r3, r1
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007822:	4659      	mov	r1, fp
 8007824:	00cb      	lsls	r3, r1, #3
 8007826:	4651      	mov	r1, sl
 8007828:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800782c:	4651      	mov	r1, sl
 800782e:	00ca      	lsls	r2, r1, #3
 8007830:	4610      	mov	r0, r2
 8007832:	4619      	mov	r1, r3
 8007834:	4603      	mov	r3, r0
 8007836:	4642      	mov	r2, r8
 8007838:	189b      	adds	r3, r3, r2
 800783a:	66bb      	str	r3, [r7, #104]	; 0x68
 800783c:	464b      	mov	r3, r9
 800783e:	460a      	mov	r2, r1
 8007840:	eb42 0303 	adc.w	r3, r2, r3
 8007844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	663b      	str	r3, [r7, #96]	; 0x60
 8007850:	667a      	str	r2, [r7, #100]	; 0x64
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800785e:	4649      	mov	r1, r9
 8007860:	008b      	lsls	r3, r1, #2
 8007862:	4641      	mov	r1, r8
 8007864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007868:	4641      	mov	r1, r8
 800786a:	008a      	lsls	r2, r1, #2
 800786c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007870:	f7f8 fd0e 	bl	8000290 <__aeabi_uldivmod>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <UART_SetConfig+0x4e4>)
 800787a:	fba3 1302 	umull	r1, r3, r3, r2
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	2164      	movs	r1, #100	; 0x64
 8007882:	fb01 f303 	mul.w	r3, r1, r3
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	3332      	adds	r3, #50	; 0x32
 800788c:	4a08      	ldr	r2, [pc, #32]	; (80078b0 <UART_SetConfig+0x4e4>)
 800788e:	fba2 2303 	umull	r2, r3, r2, r3
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4422      	add	r2, r4
 80078a0:	609a      	str	r2, [r3, #8]
}
 80078a2:	bf00      	nop
 80078a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078a8:	46bd      	mov	sp, r7
 80078aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ae:	bf00      	nop
 80078b0:	51eb851f 	.word	0x51eb851f

080078b4 <__errno>:
 80078b4:	4b01      	ldr	r3, [pc, #4]	; (80078bc <__errno+0x8>)
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	2000001c 	.word	0x2000001c

080078c0 <__libc_init_array>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	4d0d      	ldr	r5, [pc, #52]	; (80078f8 <__libc_init_array+0x38>)
 80078c4:	4c0d      	ldr	r4, [pc, #52]	; (80078fc <__libc_init_array+0x3c>)
 80078c6:	1b64      	subs	r4, r4, r5
 80078c8:	10a4      	asrs	r4, r4, #2
 80078ca:	2600      	movs	r6, #0
 80078cc:	42a6      	cmp	r6, r4
 80078ce:	d109      	bne.n	80078e4 <__libc_init_array+0x24>
 80078d0:	4d0b      	ldr	r5, [pc, #44]	; (8007900 <__libc_init_array+0x40>)
 80078d2:	4c0c      	ldr	r4, [pc, #48]	; (8007904 <__libc_init_array+0x44>)
 80078d4:	f000 fc8e 	bl	80081f4 <_init>
 80078d8:	1b64      	subs	r4, r4, r5
 80078da:	10a4      	asrs	r4, r4, #2
 80078dc:	2600      	movs	r6, #0
 80078de:	42a6      	cmp	r6, r4
 80078e0:	d105      	bne.n	80078ee <__libc_init_array+0x2e>
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e8:	4798      	blx	r3
 80078ea:	3601      	adds	r6, #1
 80078ec:	e7ee      	b.n	80078cc <__libc_init_array+0xc>
 80078ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f2:	4798      	blx	r3
 80078f4:	3601      	adds	r6, #1
 80078f6:	e7f2      	b.n	80078de <__libc_init_array+0x1e>
 80078f8:	080082c8 	.word	0x080082c8
 80078fc:	080082c8 	.word	0x080082c8
 8007900:	080082c8 	.word	0x080082c8
 8007904:	080082cc 	.word	0x080082cc

08007908 <memset>:
 8007908:	4402      	add	r2, r0
 800790a:	4603      	mov	r3, r0
 800790c:	4293      	cmp	r3, r2
 800790e:	d100      	bne.n	8007912 <memset+0xa>
 8007910:	4770      	bx	lr
 8007912:	f803 1b01 	strb.w	r1, [r3], #1
 8007916:	e7f9      	b.n	800790c <memset+0x4>

08007918 <siprintf>:
 8007918:	b40e      	push	{r1, r2, r3}
 800791a:	b500      	push	{lr}
 800791c:	b09c      	sub	sp, #112	; 0x70
 800791e:	ab1d      	add	r3, sp, #116	; 0x74
 8007920:	9002      	str	r0, [sp, #8]
 8007922:	9006      	str	r0, [sp, #24]
 8007924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007928:	4809      	ldr	r0, [pc, #36]	; (8007950 <siprintf+0x38>)
 800792a:	9107      	str	r1, [sp, #28]
 800792c:	9104      	str	r1, [sp, #16]
 800792e:	4909      	ldr	r1, [pc, #36]	; (8007954 <siprintf+0x3c>)
 8007930:	f853 2b04 	ldr.w	r2, [r3], #4
 8007934:	9105      	str	r1, [sp, #20]
 8007936:	6800      	ldr	r0, [r0, #0]
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	a902      	add	r1, sp, #8
 800793c:	f000 f868 	bl	8007a10 <_svfiprintf_r>
 8007940:	9b02      	ldr	r3, [sp, #8]
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	b01c      	add	sp, #112	; 0x70
 8007948:	f85d eb04 	ldr.w	lr, [sp], #4
 800794c:	b003      	add	sp, #12
 800794e:	4770      	bx	lr
 8007950:	2000001c 	.word	0x2000001c
 8007954:	ffff0208 	.word	0xffff0208

08007958 <__ssputs_r>:
 8007958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	688e      	ldr	r6, [r1, #8]
 800795e:	429e      	cmp	r6, r3
 8007960:	4682      	mov	sl, r0
 8007962:	460c      	mov	r4, r1
 8007964:	4690      	mov	r8, r2
 8007966:	461f      	mov	r7, r3
 8007968:	d838      	bhi.n	80079dc <__ssputs_r+0x84>
 800796a:	898a      	ldrh	r2, [r1, #12]
 800796c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007970:	d032      	beq.n	80079d8 <__ssputs_r+0x80>
 8007972:	6825      	ldr	r5, [r4, #0]
 8007974:	6909      	ldr	r1, [r1, #16]
 8007976:	eba5 0901 	sub.w	r9, r5, r1
 800797a:	6965      	ldr	r5, [r4, #20]
 800797c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007984:	3301      	adds	r3, #1
 8007986:	444b      	add	r3, r9
 8007988:	106d      	asrs	r5, r5, #1
 800798a:	429d      	cmp	r5, r3
 800798c:	bf38      	it	cc
 800798e:	461d      	movcc	r5, r3
 8007990:	0553      	lsls	r3, r2, #21
 8007992:	d531      	bpl.n	80079f8 <__ssputs_r+0xa0>
 8007994:	4629      	mov	r1, r5
 8007996:	f000 fb63 	bl	8008060 <_malloc_r>
 800799a:	4606      	mov	r6, r0
 800799c:	b950      	cbnz	r0, 80079b4 <__ssputs_r+0x5c>
 800799e:	230c      	movs	r3, #12
 80079a0:	f8ca 3000 	str.w	r3, [sl]
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	6921      	ldr	r1, [r4, #16]
 80079b6:	464a      	mov	r2, r9
 80079b8:	f000 fabe 	bl	8007f38 <memcpy>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	6126      	str	r6, [r4, #16]
 80079ca:	6165      	str	r5, [r4, #20]
 80079cc:	444e      	add	r6, r9
 80079ce:	eba5 0509 	sub.w	r5, r5, r9
 80079d2:	6026      	str	r6, [r4, #0]
 80079d4:	60a5      	str	r5, [r4, #8]
 80079d6:	463e      	mov	r6, r7
 80079d8:	42be      	cmp	r6, r7
 80079da:	d900      	bls.n	80079de <__ssputs_r+0x86>
 80079dc:	463e      	mov	r6, r7
 80079de:	6820      	ldr	r0, [r4, #0]
 80079e0:	4632      	mov	r2, r6
 80079e2:	4641      	mov	r1, r8
 80079e4:	f000 fab6 	bl	8007f54 <memmove>
 80079e8:	68a3      	ldr	r3, [r4, #8]
 80079ea:	1b9b      	subs	r3, r3, r6
 80079ec:	60a3      	str	r3, [r4, #8]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	4433      	add	r3, r6
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	2000      	movs	r0, #0
 80079f6:	e7db      	b.n	80079b0 <__ssputs_r+0x58>
 80079f8:	462a      	mov	r2, r5
 80079fa:	f000 fba5 	bl	8008148 <_realloc_r>
 80079fe:	4606      	mov	r6, r0
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d1e1      	bne.n	80079c8 <__ssputs_r+0x70>
 8007a04:	6921      	ldr	r1, [r4, #16]
 8007a06:	4650      	mov	r0, sl
 8007a08:	f000 fabe 	bl	8007f88 <_free_r>
 8007a0c:	e7c7      	b.n	800799e <__ssputs_r+0x46>
	...

08007a10 <_svfiprintf_r>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	4698      	mov	r8, r3
 8007a16:	898b      	ldrh	r3, [r1, #12]
 8007a18:	061b      	lsls	r3, r3, #24
 8007a1a:	b09d      	sub	sp, #116	; 0x74
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	4614      	mov	r4, r2
 8007a22:	d50e      	bpl.n	8007a42 <_svfiprintf_r+0x32>
 8007a24:	690b      	ldr	r3, [r1, #16]
 8007a26:	b963      	cbnz	r3, 8007a42 <_svfiprintf_r+0x32>
 8007a28:	2140      	movs	r1, #64	; 0x40
 8007a2a:	f000 fb19 	bl	8008060 <_malloc_r>
 8007a2e:	6028      	str	r0, [r5, #0]
 8007a30:	6128      	str	r0, [r5, #16]
 8007a32:	b920      	cbnz	r0, 8007a3e <_svfiprintf_r+0x2e>
 8007a34:	230c      	movs	r3, #12
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e0d1      	b.n	8007be2 <_svfiprintf_r+0x1d2>
 8007a3e:	2340      	movs	r3, #64	; 0x40
 8007a40:	616b      	str	r3, [r5, #20]
 8007a42:	2300      	movs	r3, #0
 8007a44:	9309      	str	r3, [sp, #36]	; 0x24
 8007a46:	2320      	movs	r3, #32
 8007a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a50:	2330      	movs	r3, #48	; 0x30
 8007a52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bfc <_svfiprintf_r+0x1ec>
 8007a56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a5a:	f04f 0901 	mov.w	r9, #1
 8007a5e:	4623      	mov	r3, r4
 8007a60:	469a      	mov	sl, r3
 8007a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a66:	b10a      	cbz	r2, 8007a6c <_svfiprintf_r+0x5c>
 8007a68:	2a25      	cmp	r2, #37	; 0x25
 8007a6a:	d1f9      	bne.n	8007a60 <_svfiprintf_r+0x50>
 8007a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a70:	d00b      	beq.n	8007a8a <_svfiprintf_r+0x7a>
 8007a72:	465b      	mov	r3, fp
 8007a74:	4622      	mov	r2, r4
 8007a76:	4629      	mov	r1, r5
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f7ff ff6d 	bl	8007958 <__ssputs_r>
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f000 80aa 	beq.w	8007bd8 <_svfiprintf_r+0x1c8>
 8007a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a86:	445a      	add	r2, fp
 8007a88:	9209      	str	r2, [sp, #36]	; 0x24
 8007a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80a2 	beq.w	8007bd8 <_svfiprintf_r+0x1c8>
 8007a94:	2300      	movs	r3, #0
 8007a96:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a9e:	f10a 0a01 	add.w	sl, sl, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	9307      	str	r3, [sp, #28]
 8007aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8007aac:	4654      	mov	r4, sl
 8007aae:	2205      	movs	r2, #5
 8007ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab4:	4851      	ldr	r0, [pc, #324]	; (8007bfc <_svfiprintf_r+0x1ec>)
 8007ab6:	f7f8 fb9b 	bl	80001f0 <memchr>
 8007aba:	9a04      	ldr	r2, [sp, #16]
 8007abc:	b9d8      	cbnz	r0, 8007af6 <_svfiprintf_r+0xe6>
 8007abe:	06d0      	lsls	r0, r2, #27
 8007ac0:	bf44      	itt	mi
 8007ac2:	2320      	movmi	r3, #32
 8007ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac8:	0711      	lsls	r1, r2, #28
 8007aca:	bf44      	itt	mi
 8007acc:	232b      	movmi	r3, #43	; 0x2b
 8007ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad8:	d015      	beq.n	8007b06 <_svfiprintf_r+0xf6>
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	4654      	mov	r4, sl
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f04f 0c0a 	mov.w	ip, #10
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aea:	3b30      	subs	r3, #48	; 0x30
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	d94e      	bls.n	8007b8e <_svfiprintf_r+0x17e>
 8007af0:	b1b0      	cbz	r0, 8007b20 <_svfiprintf_r+0x110>
 8007af2:	9207      	str	r2, [sp, #28]
 8007af4:	e014      	b.n	8007b20 <_svfiprintf_r+0x110>
 8007af6:	eba0 0308 	sub.w	r3, r0, r8
 8007afa:	fa09 f303 	lsl.w	r3, r9, r3
 8007afe:	4313      	orrs	r3, r2
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	46a2      	mov	sl, r4
 8007b04:	e7d2      	b.n	8007aac <_svfiprintf_r+0x9c>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	1d19      	adds	r1, r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	9103      	str	r1, [sp, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfbb      	ittet	lt
 8007b12:	425b      	neglt	r3, r3
 8007b14:	f042 0202 	orrlt.w	r2, r2, #2
 8007b18:	9307      	strge	r3, [sp, #28]
 8007b1a:	9307      	strlt	r3, [sp, #28]
 8007b1c:	bfb8      	it	lt
 8007b1e:	9204      	strlt	r2, [sp, #16]
 8007b20:	7823      	ldrb	r3, [r4, #0]
 8007b22:	2b2e      	cmp	r3, #46	; 0x2e
 8007b24:	d10c      	bne.n	8007b40 <_svfiprintf_r+0x130>
 8007b26:	7863      	ldrb	r3, [r4, #1]
 8007b28:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2a:	d135      	bne.n	8007b98 <_svfiprintf_r+0x188>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	1d1a      	adds	r2, r3, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	9203      	str	r2, [sp, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfb8      	it	lt
 8007b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b3c:	3402      	adds	r4, #2
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c0c <_svfiprintf_r+0x1fc>
 8007b44:	7821      	ldrb	r1, [r4, #0]
 8007b46:	2203      	movs	r2, #3
 8007b48:	4650      	mov	r0, sl
 8007b4a:	f7f8 fb51 	bl	80001f0 <memchr>
 8007b4e:	b140      	cbz	r0, 8007b62 <_svfiprintf_r+0x152>
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	eba0 000a 	sub.w	r0, r0, sl
 8007b56:	fa03 f000 	lsl.w	r0, r3, r0
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	4303      	orrs	r3, r0
 8007b5e:	3401      	adds	r4, #1
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b66:	4826      	ldr	r0, [pc, #152]	; (8007c00 <_svfiprintf_r+0x1f0>)
 8007b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b6c:	2206      	movs	r2, #6
 8007b6e:	f7f8 fb3f 	bl	80001f0 <memchr>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d038      	beq.n	8007be8 <_svfiprintf_r+0x1d8>
 8007b76:	4b23      	ldr	r3, [pc, #140]	; (8007c04 <_svfiprintf_r+0x1f4>)
 8007b78:	bb1b      	cbnz	r3, 8007bc2 <_svfiprintf_r+0x1b2>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	f023 0307 	bic.w	r3, r3, #7
 8007b82:	3308      	adds	r3, #8
 8007b84:	9303      	str	r3, [sp, #12]
 8007b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b88:	4433      	add	r3, r6
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8c:	e767      	b.n	8007a5e <_svfiprintf_r+0x4e>
 8007b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b92:	460c      	mov	r4, r1
 8007b94:	2001      	movs	r0, #1
 8007b96:	e7a5      	b.n	8007ae4 <_svfiprintf_r+0xd4>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	3401      	adds	r4, #1
 8007b9c:	9305      	str	r3, [sp, #20]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	f04f 0c0a 	mov.w	ip, #10
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007baa:	3a30      	subs	r2, #48	; 0x30
 8007bac:	2a09      	cmp	r2, #9
 8007bae:	d903      	bls.n	8007bb8 <_svfiprintf_r+0x1a8>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0c5      	beq.n	8007b40 <_svfiprintf_r+0x130>
 8007bb4:	9105      	str	r1, [sp, #20]
 8007bb6:	e7c3      	b.n	8007b40 <_svfiprintf_r+0x130>
 8007bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7f0      	b.n	8007ba4 <_svfiprintf_r+0x194>
 8007bc2:	ab03      	add	r3, sp, #12
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	462a      	mov	r2, r5
 8007bc8:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <_svfiprintf_r+0x1f8>)
 8007bca:	a904      	add	r1, sp, #16
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f3af 8000 	nop.w
 8007bd2:	1c42      	adds	r2, r0, #1
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	d1d6      	bne.n	8007b86 <_svfiprintf_r+0x176>
 8007bd8:	89ab      	ldrh	r3, [r5, #12]
 8007bda:	065b      	lsls	r3, r3, #25
 8007bdc:	f53f af2c 	bmi.w	8007a38 <_svfiprintf_r+0x28>
 8007be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be2:	b01d      	add	sp, #116	; 0x74
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	ab03      	add	r3, sp, #12
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	462a      	mov	r2, r5
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <_svfiprintf_r+0x1f8>)
 8007bf0:	a904      	add	r1, sp, #16
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f000 f87a 	bl	8007cec <_printf_i>
 8007bf8:	e7eb      	b.n	8007bd2 <_svfiprintf_r+0x1c2>
 8007bfa:	bf00      	nop
 8007bfc:	0800828c 	.word	0x0800828c
 8007c00:	08008296 	.word	0x08008296
 8007c04:	00000000 	.word	0x00000000
 8007c08:	08007959 	.word	0x08007959
 8007c0c:	08008292 	.word	0x08008292

08007c10 <_printf_common>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	4616      	mov	r6, r2
 8007c16:	4699      	mov	r9, r3
 8007c18:	688a      	ldr	r2, [r1, #8]
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	bfb8      	it	lt
 8007c24:	4613      	movlt	r3, r2
 8007c26:	6033      	str	r3, [r6, #0]
 8007c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	b10a      	cbz	r2, 8007c36 <_printf_common+0x26>
 8007c32:	3301      	adds	r3, #1
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	0699      	lsls	r1, r3, #26
 8007c3a:	bf42      	ittt	mi
 8007c3c:	6833      	ldrmi	r3, [r6, #0]
 8007c3e:	3302      	addmi	r3, #2
 8007c40:	6033      	strmi	r3, [r6, #0]
 8007c42:	6825      	ldr	r5, [r4, #0]
 8007c44:	f015 0506 	ands.w	r5, r5, #6
 8007c48:	d106      	bne.n	8007c58 <_printf_common+0x48>
 8007c4a:	f104 0a19 	add.w	sl, r4, #25
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	6832      	ldr	r2, [r6, #0]
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	dc26      	bgt.n	8007ca6 <_printf_common+0x96>
 8007c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c5c:	1e13      	subs	r3, r2, #0
 8007c5e:	6822      	ldr	r2, [r4, #0]
 8007c60:	bf18      	it	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	0692      	lsls	r2, r2, #26
 8007c66:	d42b      	bmi.n	8007cc0 <_printf_common+0xb0>
 8007c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	4638      	mov	r0, r7
 8007c70:	47c0      	blx	r8
 8007c72:	3001      	adds	r0, #1
 8007c74:	d01e      	beq.n	8007cb4 <_printf_common+0xa4>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	68e5      	ldr	r5, [r4, #12]
 8007c7a:	6832      	ldr	r2, [r6, #0]
 8007c7c:	f003 0306 	and.w	r3, r3, #6
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	bf08      	it	eq
 8007c84:	1aad      	subeq	r5, r5, r2
 8007c86:	68a3      	ldr	r3, [r4, #8]
 8007c88:	6922      	ldr	r2, [r4, #16]
 8007c8a:	bf0c      	ite	eq
 8007c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c90:	2500      	movne	r5, #0
 8007c92:	4293      	cmp	r3, r2
 8007c94:	bfc4      	itt	gt
 8007c96:	1a9b      	subgt	r3, r3, r2
 8007c98:	18ed      	addgt	r5, r5, r3
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	341a      	adds	r4, #26
 8007c9e:	42b5      	cmp	r5, r6
 8007ca0:	d11a      	bne.n	8007cd8 <_printf_common+0xc8>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e008      	b.n	8007cb8 <_printf_common+0xa8>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4652      	mov	r2, sl
 8007caa:	4649      	mov	r1, r9
 8007cac:	4638      	mov	r0, r7
 8007cae:	47c0      	blx	r8
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d103      	bne.n	8007cbc <_printf_common+0xac>
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	e7c6      	b.n	8007c4e <_printf_common+0x3e>
 8007cc0:	18e1      	adds	r1, r4, r3
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	2030      	movs	r0, #48	; 0x30
 8007cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cca:	4422      	add	r2, r4
 8007ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cd4:	3302      	adds	r3, #2
 8007cd6:	e7c7      	b.n	8007c68 <_printf_common+0x58>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4622      	mov	r2, r4
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4638      	mov	r0, r7
 8007ce0:	47c0      	blx	r8
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d0e6      	beq.n	8007cb4 <_printf_common+0xa4>
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	e7d9      	b.n	8007c9e <_printf_common+0x8e>
	...

08007cec <_printf_i>:
 8007cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	7e0f      	ldrb	r7, [r1, #24]
 8007cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cf4:	2f78      	cmp	r7, #120	; 0x78
 8007cf6:	4691      	mov	r9, r2
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	469a      	mov	sl, r3
 8007cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d02:	d807      	bhi.n	8007d14 <_printf_i+0x28>
 8007d04:	2f62      	cmp	r7, #98	; 0x62
 8007d06:	d80a      	bhi.n	8007d1e <_printf_i+0x32>
 8007d08:	2f00      	cmp	r7, #0
 8007d0a:	f000 80d8 	beq.w	8007ebe <_printf_i+0x1d2>
 8007d0e:	2f58      	cmp	r7, #88	; 0x58
 8007d10:	f000 80a3 	beq.w	8007e5a <_printf_i+0x16e>
 8007d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d1c:	e03a      	b.n	8007d94 <_printf_i+0xa8>
 8007d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d22:	2b15      	cmp	r3, #21
 8007d24:	d8f6      	bhi.n	8007d14 <_printf_i+0x28>
 8007d26:	a101      	add	r1, pc, #4	; (adr r1, 8007d2c <_printf_i+0x40>)
 8007d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d2c:	08007d85 	.word	0x08007d85
 8007d30:	08007d99 	.word	0x08007d99
 8007d34:	08007d15 	.word	0x08007d15
 8007d38:	08007d15 	.word	0x08007d15
 8007d3c:	08007d15 	.word	0x08007d15
 8007d40:	08007d15 	.word	0x08007d15
 8007d44:	08007d99 	.word	0x08007d99
 8007d48:	08007d15 	.word	0x08007d15
 8007d4c:	08007d15 	.word	0x08007d15
 8007d50:	08007d15 	.word	0x08007d15
 8007d54:	08007d15 	.word	0x08007d15
 8007d58:	08007ea5 	.word	0x08007ea5
 8007d5c:	08007dc9 	.word	0x08007dc9
 8007d60:	08007e87 	.word	0x08007e87
 8007d64:	08007d15 	.word	0x08007d15
 8007d68:	08007d15 	.word	0x08007d15
 8007d6c:	08007ec7 	.word	0x08007ec7
 8007d70:	08007d15 	.word	0x08007d15
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007d15 	.word	0x08007d15
 8007d7c:	08007d15 	.word	0x08007d15
 8007d80:	08007e8f 	.word	0x08007e8f
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	1d1a      	adds	r2, r3, #4
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	602a      	str	r2, [r5, #0]
 8007d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0a3      	b.n	8007ee0 <_printf_i+0x1f4>
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	6829      	ldr	r1, [r5, #0]
 8007d9c:	0606      	lsls	r6, r0, #24
 8007d9e:	f101 0304 	add.w	r3, r1, #4
 8007da2:	d50a      	bpl.n	8007dba <_printf_i+0xce>
 8007da4:	680e      	ldr	r6, [r1, #0]
 8007da6:	602b      	str	r3, [r5, #0]
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	da03      	bge.n	8007db4 <_printf_i+0xc8>
 8007dac:	232d      	movs	r3, #45	; 0x2d
 8007dae:	4276      	negs	r6, r6
 8007db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db4:	485e      	ldr	r0, [pc, #376]	; (8007f30 <_printf_i+0x244>)
 8007db6:	230a      	movs	r3, #10
 8007db8:	e019      	b.n	8007dee <_printf_i+0x102>
 8007dba:	680e      	ldr	r6, [r1, #0]
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dc2:	bf18      	it	ne
 8007dc4:	b236      	sxthne	r6, r6
 8007dc6:	e7ef      	b.n	8007da8 <_printf_i+0xbc>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	6820      	ldr	r0, [r4, #0]
 8007dcc:	1d19      	adds	r1, r3, #4
 8007dce:	6029      	str	r1, [r5, #0]
 8007dd0:	0601      	lsls	r1, r0, #24
 8007dd2:	d501      	bpl.n	8007dd8 <_printf_i+0xec>
 8007dd4:	681e      	ldr	r6, [r3, #0]
 8007dd6:	e002      	b.n	8007dde <_printf_i+0xf2>
 8007dd8:	0646      	lsls	r6, r0, #25
 8007dda:	d5fb      	bpl.n	8007dd4 <_printf_i+0xe8>
 8007ddc:	881e      	ldrh	r6, [r3, #0]
 8007dde:	4854      	ldr	r0, [pc, #336]	; (8007f30 <_printf_i+0x244>)
 8007de0:	2f6f      	cmp	r7, #111	; 0x6f
 8007de2:	bf0c      	ite	eq
 8007de4:	2308      	moveq	r3, #8
 8007de6:	230a      	movne	r3, #10
 8007de8:	2100      	movs	r1, #0
 8007dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dee:	6865      	ldr	r5, [r4, #4]
 8007df0:	60a5      	str	r5, [r4, #8]
 8007df2:	2d00      	cmp	r5, #0
 8007df4:	bfa2      	ittt	ge
 8007df6:	6821      	ldrge	r1, [r4, #0]
 8007df8:	f021 0104 	bicge.w	r1, r1, #4
 8007dfc:	6021      	strge	r1, [r4, #0]
 8007dfe:	b90e      	cbnz	r6, 8007e04 <_printf_i+0x118>
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	d04d      	beq.n	8007ea0 <_printf_i+0x1b4>
 8007e04:	4615      	mov	r5, r2
 8007e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e0e:	5dc7      	ldrb	r7, [r0, r7]
 8007e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e14:	4637      	mov	r7, r6
 8007e16:	42bb      	cmp	r3, r7
 8007e18:	460e      	mov	r6, r1
 8007e1a:	d9f4      	bls.n	8007e06 <_printf_i+0x11a>
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d10b      	bne.n	8007e38 <_printf_i+0x14c>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	07de      	lsls	r6, r3, #31
 8007e24:	d508      	bpl.n	8007e38 <_printf_i+0x14c>
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	6861      	ldr	r1, [r4, #4]
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	bfde      	ittt	le
 8007e2e:	2330      	movle	r3, #48	; 0x30
 8007e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e38:	1b52      	subs	r2, r2, r5
 8007e3a:	6122      	str	r2, [r4, #16]
 8007e3c:	f8cd a000 	str.w	sl, [sp]
 8007e40:	464b      	mov	r3, r9
 8007e42:	aa03      	add	r2, sp, #12
 8007e44:	4621      	mov	r1, r4
 8007e46:	4640      	mov	r0, r8
 8007e48:	f7ff fee2 	bl	8007c10 <_printf_common>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d14c      	bne.n	8007eea <_printf_i+0x1fe>
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	b004      	add	sp, #16
 8007e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5a:	4835      	ldr	r0, [pc, #212]	; (8007f30 <_printf_i+0x244>)
 8007e5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e60:	6829      	ldr	r1, [r5, #0]
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e68:	6029      	str	r1, [r5, #0]
 8007e6a:	061d      	lsls	r5, r3, #24
 8007e6c:	d514      	bpl.n	8007e98 <_printf_i+0x1ac>
 8007e6e:	07df      	lsls	r7, r3, #31
 8007e70:	bf44      	itt	mi
 8007e72:	f043 0320 	orrmi.w	r3, r3, #32
 8007e76:	6023      	strmi	r3, [r4, #0]
 8007e78:	b91e      	cbnz	r6, 8007e82 <_printf_i+0x196>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	f023 0320 	bic.w	r3, r3, #32
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	2310      	movs	r3, #16
 8007e84:	e7b0      	b.n	8007de8 <_printf_i+0xfc>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	f043 0320 	orr.w	r3, r3, #32
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	2378      	movs	r3, #120	; 0x78
 8007e90:	4828      	ldr	r0, [pc, #160]	; (8007f34 <_printf_i+0x248>)
 8007e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e96:	e7e3      	b.n	8007e60 <_printf_i+0x174>
 8007e98:	0659      	lsls	r1, r3, #25
 8007e9a:	bf48      	it	mi
 8007e9c:	b2b6      	uxthmi	r6, r6
 8007e9e:	e7e6      	b.n	8007e6e <_printf_i+0x182>
 8007ea0:	4615      	mov	r5, r2
 8007ea2:	e7bb      	b.n	8007e1c <_printf_i+0x130>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	6826      	ldr	r6, [r4, #0]
 8007ea8:	6961      	ldr	r1, [r4, #20]
 8007eaa:	1d18      	adds	r0, r3, #4
 8007eac:	6028      	str	r0, [r5, #0]
 8007eae:	0635      	lsls	r5, r6, #24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_i+0x1cc>
 8007eb4:	6019      	str	r1, [r3, #0]
 8007eb6:	e002      	b.n	8007ebe <_printf_i+0x1d2>
 8007eb8:	0670      	lsls	r0, r6, #25
 8007eba:	d5fb      	bpl.n	8007eb4 <_printf_i+0x1c8>
 8007ebc:	8019      	strh	r1, [r3, #0]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	4615      	mov	r5, r2
 8007ec4:	e7ba      	b.n	8007e3c <_printf_i+0x150>
 8007ec6:	682b      	ldr	r3, [r5, #0]
 8007ec8:	1d1a      	adds	r2, r3, #4
 8007eca:	602a      	str	r2, [r5, #0]
 8007ecc:	681d      	ldr	r5, [r3, #0]
 8007ece:	6862      	ldr	r2, [r4, #4]
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7f8 f98c 	bl	80001f0 <memchr>
 8007ed8:	b108      	cbz	r0, 8007ede <_printf_i+0x1f2>
 8007eda:	1b40      	subs	r0, r0, r5
 8007edc:	6060      	str	r0, [r4, #4]
 8007ede:	6863      	ldr	r3, [r4, #4]
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee8:	e7a8      	b.n	8007e3c <_printf_i+0x150>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	462a      	mov	r2, r5
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	47d0      	blx	sl
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d0ab      	beq.n	8007e50 <_printf_i+0x164>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	079b      	lsls	r3, r3, #30
 8007efc:	d413      	bmi.n	8007f26 <_printf_i+0x23a>
 8007efe:	68e0      	ldr	r0, [r4, #12]
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	4298      	cmp	r0, r3
 8007f04:	bfb8      	it	lt
 8007f06:	4618      	movlt	r0, r3
 8007f08:	e7a4      	b.n	8007e54 <_printf_i+0x168>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	4649      	mov	r1, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	47d0      	blx	sl
 8007f14:	3001      	adds	r0, #1
 8007f16:	d09b      	beq.n	8007e50 <_printf_i+0x164>
 8007f18:	3501      	adds	r5, #1
 8007f1a:	68e3      	ldr	r3, [r4, #12]
 8007f1c:	9903      	ldr	r1, [sp, #12]
 8007f1e:	1a5b      	subs	r3, r3, r1
 8007f20:	42ab      	cmp	r3, r5
 8007f22:	dcf2      	bgt.n	8007f0a <_printf_i+0x21e>
 8007f24:	e7eb      	b.n	8007efe <_printf_i+0x212>
 8007f26:	2500      	movs	r5, #0
 8007f28:	f104 0619 	add.w	r6, r4, #25
 8007f2c:	e7f5      	b.n	8007f1a <_printf_i+0x22e>
 8007f2e:	bf00      	nop
 8007f30:	0800829d 	.word	0x0800829d
 8007f34:	080082ae 	.word	0x080082ae

08007f38 <memcpy>:
 8007f38:	440a      	add	r2, r1
 8007f3a:	4291      	cmp	r1, r2
 8007f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f40:	d100      	bne.n	8007f44 <memcpy+0xc>
 8007f42:	4770      	bx	lr
 8007f44:	b510      	push	{r4, lr}
 8007f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4e:	4291      	cmp	r1, r2
 8007f50:	d1f9      	bne.n	8007f46 <memcpy+0xe>
 8007f52:	bd10      	pop	{r4, pc}

08007f54 <memmove>:
 8007f54:	4288      	cmp	r0, r1
 8007f56:	b510      	push	{r4, lr}
 8007f58:	eb01 0402 	add.w	r4, r1, r2
 8007f5c:	d902      	bls.n	8007f64 <memmove+0x10>
 8007f5e:	4284      	cmp	r4, r0
 8007f60:	4623      	mov	r3, r4
 8007f62:	d807      	bhi.n	8007f74 <memmove+0x20>
 8007f64:	1e43      	subs	r3, r0, #1
 8007f66:	42a1      	cmp	r1, r4
 8007f68:	d008      	beq.n	8007f7c <memmove+0x28>
 8007f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f72:	e7f8      	b.n	8007f66 <memmove+0x12>
 8007f74:	4402      	add	r2, r0
 8007f76:	4601      	mov	r1, r0
 8007f78:	428a      	cmp	r2, r1
 8007f7a:	d100      	bne.n	8007f7e <memmove+0x2a>
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f86:	e7f7      	b.n	8007f78 <memmove+0x24>

08007f88 <_free_r>:
 8007f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	d044      	beq.n	8008018 <_free_r+0x90>
 8007f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f92:	9001      	str	r0, [sp, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f1a1 0404 	sub.w	r4, r1, #4
 8007f9a:	bfb8      	it	lt
 8007f9c:	18e4      	addlt	r4, r4, r3
 8007f9e:	f000 f913 	bl	80081c8 <__malloc_lock>
 8007fa2:	4a1e      	ldr	r2, [pc, #120]	; (800801c <_free_r+0x94>)
 8007fa4:	9801      	ldr	r0, [sp, #4]
 8007fa6:	6813      	ldr	r3, [r2, #0]
 8007fa8:	b933      	cbnz	r3, 8007fb8 <_free_r+0x30>
 8007faa:	6063      	str	r3, [r4, #4]
 8007fac:	6014      	str	r4, [r2, #0]
 8007fae:	b003      	add	sp, #12
 8007fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fb4:	f000 b90e 	b.w	80081d4 <__malloc_unlock>
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d908      	bls.n	8007fce <_free_r+0x46>
 8007fbc:	6825      	ldr	r5, [r4, #0]
 8007fbe:	1961      	adds	r1, r4, r5
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	bf01      	itttt	eq
 8007fc4:	6819      	ldreq	r1, [r3, #0]
 8007fc6:	685b      	ldreq	r3, [r3, #4]
 8007fc8:	1949      	addeq	r1, r1, r5
 8007fca:	6021      	streq	r1, [r4, #0]
 8007fcc:	e7ed      	b.n	8007faa <_free_r+0x22>
 8007fce:	461a      	mov	r2, r3
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	b10b      	cbz	r3, 8007fd8 <_free_r+0x50>
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	d9fa      	bls.n	8007fce <_free_r+0x46>
 8007fd8:	6811      	ldr	r1, [r2, #0]
 8007fda:	1855      	adds	r5, r2, r1
 8007fdc:	42a5      	cmp	r5, r4
 8007fde:	d10b      	bne.n	8007ff8 <_free_r+0x70>
 8007fe0:	6824      	ldr	r4, [r4, #0]
 8007fe2:	4421      	add	r1, r4
 8007fe4:	1854      	adds	r4, r2, r1
 8007fe6:	42a3      	cmp	r3, r4
 8007fe8:	6011      	str	r1, [r2, #0]
 8007fea:	d1e0      	bne.n	8007fae <_free_r+0x26>
 8007fec:	681c      	ldr	r4, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	6053      	str	r3, [r2, #4]
 8007ff2:	4421      	add	r1, r4
 8007ff4:	6011      	str	r1, [r2, #0]
 8007ff6:	e7da      	b.n	8007fae <_free_r+0x26>
 8007ff8:	d902      	bls.n	8008000 <_free_r+0x78>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	6003      	str	r3, [r0, #0]
 8007ffe:	e7d6      	b.n	8007fae <_free_r+0x26>
 8008000:	6825      	ldr	r5, [r4, #0]
 8008002:	1961      	adds	r1, r4, r5
 8008004:	428b      	cmp	r3, r1
 8008006:	bf04      	itt	eq
 8008008:	6819      	ldreq	r1, [r3, #0]
 800800a:	685b      	ldreq	r3, [r3, #4]
 800800c:	6063      	str	r3, [r4, #4]
 800800e:	bf04      	itt	eq
 8008010:	1949      	addeq	r1, r1, r5
 8008012:	6021      	streq	r1, [r4, #0]
 8008014:	6054      	str	r4, [r2, #4]
 8008016:	e7ca      	b.n	8007fae <_free_r+0x26>
 8008018:	b003      	add	sp, #12
 800801a:	bd30      	pop	{r4, r5, pc}
 800801c:	200005f0 	.word	0x200005f0

08008020 <sbrk_aligned>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	4e0e      	ldr	r6, [pc, #56]	; (800805c <sbrk_aligned+0x3c>)
 8008024:	460c      	mov	r4, r1
 8008026:	6831      	ldr	r1, [r6, #0]
 8008028:	4605      	mov	r5, r0
 800802a:	b911      	cbnz	r1, 8008032 <sbrk_aligned+0x12>
 800802c:	f000 f8bc 	bl	80081a8 <_sbrk_r>
 8008030:	6030      	str	r0, [r6, #0]
 8008032:	4621      	mov	r1, r4
 8008034:	4628      	mov	r0, r5
 8008036:	f000 f8b7 	bl	80081a8 <_sbrk_r>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	d00a      	beq.n	8008054 <sbrk_aligned+0x34>
 800803e:	1cc4      	adds	r4, r0, #3
 8008040:	f024 0403 	bic.w	r4, r4, #3
 8008044:	42a0      	cmp	r0, r4
 8008046:	d007      	beq.n	8008058 <sbrk_aligned+0x38>
 8008048:	1a21      	subs	r1, r4, r0
 800804a:	4628      	mov	r0, r5
 800804c:	f000 f8ac 	bl	80081a8 <_sbrk_r>
 8008050:	3001      	adds	r0, #1
 8008052:	d101      	bne.n	8008058 <sbrk_aligned+0x38>
 8008054:	f04f 34ff 	mov.w	r4, #4294967295
 8008058:	4620      	mov	r0, r4
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	200005f4 	.word	0x200005f4

08008060 <_malloc_r>:
 8008060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008064:	1ccd      	adds	r5, r1, #3
 8008066:	f025 0503 	bic.w	r5, r5, #3
 800806a:	3508      	adds	r5, #8
 800806c:	2d0c      	cmp	r5, #12
 800806e:	bf38      	it	cc
 8008070:	250c      	movcc	r5, #12
 8008072:	2d00      	cmp	r5, #0
 8008074:	4607      	mov	r7, r0
 8008076:	db01      	blt.n	800807c <_malloc_r+0x1c>
 8008078:	42a9      	cmp	r1, r5
 800807a:	d905      	bls.n	8008088 <_malloc_r+0x28>
 800807c:	230c      	movs	r3, #12
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	2600      	movs	r6, #0
 8008082:	4630      	mov	r0, r6
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	4e2e      	ldr	r6, [pc, #184]	; (8008144 <_malloc_r+0xe4>)
 800808a:	f000 f89d 	bl	80081c8 <__malloc_lock>
 800808e:	6833      	ldr	r3, [r6, #0]
 8008090:	461c      	mov	r4, r3
 8008092:	bb34      	cbnz	r4, 80080e2 <_malloc_r+0x82>
 8008094:	4629      	mov	r1, r5
 8008096:	4638      	mov	r0, r7
 8008098:	f7ff ffc2 	bl	8008020 <sbrk_aligned>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	4604      	mov	r4, r0
 80080a0:	d14d      	bne.n	800813e <_malloc_r+0xde>
 80080a2:	6834      	ldr	r4, [r6, #0]
 80080a4:	4626      	mov	r6, r4
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	d140      	bne.n	800812c <_malloc_r+0xcc>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	4631      	mov	r1, r6
 80080ae:	4638      	mov	r0, r7
 80080b0:	eb04 0803 	add.w	r8, r4, r3
 80080b4:	f000 f878 	bl	80081a8 <_sbrk_r>
 80080b8:	4580      	cmp	r8, r0
 80080ba:	d13a      	bne.n	8008132 <_malloc_r+0xd2>
 80080bc:	6821      	ldr	r1, [r4, #0]
 80080be:	3503      	adds	r5, #3
 80080c0:	1a6d      	subs	r5, r5, r1
 80080c2:	f025 0503 	bic.w	r5, r5, #3
 80080c6:	3508      	adds	r5, #8
 80080c8:	2d0c      	cmp	r5, #12
 80080ca:	bf38      	it	cc
 80080cc:	250c      	movcc	r5, #12
 80080ce:	4629      	mov	r1, r5
 80080d0:	4638      	mov	r0, r7
 80080d2:	f7ff ffa5 	bl	8008020 <sbrk_aligned>
 80080d6:	3001      	adds	r0, #1
 80080d8:	d02b      	beq.n	8008132 <_malloc_r+0xd2>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	442b      	add	r3, r5
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	e00e      	b.n	8008100 <_malloc_r+0xa0>
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	1b52      	subs	r2, r2, r5
 80080e6:	d41e      	bmi.n	8008126 <_malloc_r+0xc6>
 80080e8:	2a0b      	cmp	r2, #11
 80080ea:	d916      	bls.n	800811a <_malloc_r+0xba>
 80080ec:	1961      	adds	r1, r4, r5
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	6025      	str	r5, [r4, #0]
 80080f2:	bf18      	it	ne
 80080f4:	6059      	strne	r1, [r3, #4]
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	bf08      	it	eq
 80080fa:	6031      	streq	r1, [r6, #0]
 80080fc:	5162      	str	r2, [r4, r5]
 80080fe:	604b      	str	r3, [r1, #4]
 8008100:	4638      	mov	r0, r7
 8008102:	f104 060b 	add.w	r6, r4, #11
 8008106:	f000 f865 	bl	80081d4 <__malloc_unlock>
 800810a:	f026 0607 	bic.w	r6, r6, #7
 800810e:	1d23      	adds	r3, r4, #4
 8008110:	1af2      	subs	r2, r6, r3
 8008112:	d0b6      	beq.n	8008082 <_malloc_r+0x22>
 8008114:	1b9b      	subs	r3, r3, r6
 8008116:	50a3      	str	r3, [r4, r2]
 8008118:	e7b3      	b.n	8008082 <_malloc_r+0x22>
 800811a:	6862      	ldr	r2, [r4, #4]
 800811c:	42a3      	cmp	r3, r4
 800811e:	bf0c      	ite	eq
 8008120:	6032      	streq	r2, [r6, #0]
 8008122:	605a      	strne	r2, [r3, #4]
 8008124:	e7ec      	b.n	8008100 <_malloc_r+0xa0>
 8008126:	4623      	mov	r3, r4
 8008128:	6864      	ldr	r4, [r4, #4]
 800812a:	e7b2      	b.n	8008092 <_malloc_r+0x32>
 800812c:	4634      	mov	r4, r6
 800812e:	6876      	ldr	r6, [r6, #4]
 8008130:	e7b9      	b.n	80080a6 <_malloc_r+0x46>
 8008132:	230c      	movs	r3, #12
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4638      	mov	r0, r7
 8008138:	f000 f84c 	bl	80081d4 <__malloc_unlock>
 800813c:	e7a1      	b.n	8008082 <_malloc_r+0x22>
 800813e:	6025      	str	r5, [r4, #0]
 8008140:	e7de      	b.n	8008100 <_malloc_r+0xa0>
 8008142:	bf00      	nop
 8008144:	200005f0 	.word	0x200005f0

08008148 <_realloc_r>:
 8008148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814c:	4680      	mov	r8, r0
 800814e:	4614      	mov	r4, r2
 8008150:	460e      	mov	r6, r1
 8008152:	b921      	cbnz	r1, 800815e <_realloc_r+0x16>
 8008154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008158:	4611      	mov	r1, r2
 800815a:	f7ff bf81 	b.w	8008060 <_malloc_r>
 800815e:	b92a      	cbnz	r2, 800816c <_realloc_r+0x24>
 8008160:	f7ff ff12 	bl	8007f88 <_free_r>
 8008164:	4625      	mov	r5, r4
 8008166:	4628      	mov	r0, r5
 8008168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800816c:	f000 f838 	bl	80081e0 <_malloc_usable_size_r>
 8008170:	4284      	cmp	r4, r0
 8008172:	4607      	mov	r7, r0
 8008174:	d802      	bhi.n	800817c <_realloc_r+0x34>
 8008176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800817a:	d812      	bhi.n	80081a2 <_realloc_r+0x5a>
 800817c:	4621      	mov	r1, r4
 800817e:	4640      	mov	r0, r8
 8008180:	f7ff ff6e 	bl	8008060 <_malloc_r>
 8008184:	4605      	mov	r5, r0
 8008186:	2800      	cmp	r0, #0
 8008188:	d0ed      	beq.n	8008166 <_realloc_r+0x1e>
 800818a:	42bc      	cmp	r4, r7
 800818c:	4622      	mov	r2, r4
 800818e:	4631      	mov	r1, r6
 8008190:	bf28      	it	cs
 8008192:	463a      	movcs	r2, r7
 8008194:	f7ff fed0 	bl	8007f38 <memcpy>
 8008198:	4631      	mov	r1, r6
 800819a:	4640      	mov	r0, r8
 800819c:	f7ff fef4 	bl	8007f88 <_free_r>
 80081a0:	e7e1      	b.n	8008166 <_realloc_r+0x1e>
 80081a2:	4635      	mov	r5, r6
 80081a4:	e7df      	b.n	8008166 <_realloc_r+0x1e>
	...

080081a8 <_sbrk_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d06      	ldr	r5, [pc, #24]	; (80081c4 <_sbrk_r+0x1c>)
 80081ac:	2300      	movs	r3, #0
 80081ae:	4604      	mov	r4, r0
 80081b0:	4608      	mov	r0, r1
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	f7f9 fdd8 	bl	8001d68 <_sbrk>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <_sbrk_r+0x1a>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	b103      	cbz	r3, 80081c2 <_sbrk_r+0x1a>
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	200005f8 	.word	0x200005f8

080081c8 <__malloc_lock>:
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <__malloc_lock+0x8>)
 80081ca:	f000 b811 	b.w	80081f0 <__retarget_lock_acquire_recursive>
 80081ce:	bf00      	nop
 80081d0:	200005fc 	.word	0x200005fc

080081d4 <__malloc_unlock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__malloc_unlock+0x8>)
 80081d6:	f000 b80c 	b.w	80081f2 <__retarget_lock_release_recursive>
 80081da:	bf00      	nop
 80081dc:	200005fc 	.word	0x200005fc

080081e0 <_malloc_usable_size_r>:
 80081e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e4:	1f18      	subs	r0, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bfbc      	itt	lt
 80081ea:	580b      	ldrlt	r3, [r1, r0]
 80081ec:	18c0      	addlt	r0, r0, r3
 80081ee:	4770      	bx	lr

080081f0 <__retarget_lock_acquire_recursive>:
 80081f0:	4770      	bx	lr

080081f2 <__retarget_lock_release_recursive>:
 80081f2:	4770      	bx	lr

080081f4 <_init>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	bf00      	nop
 80081f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fa:	bc08      	pop	{r3}
 80081fc:	469e      	mov	lr, r3
 80081fe:	4770      	bx	lr

08008200 <_fini>:
 8008200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008202:	bf00      	nop
 8008204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008206:	bc08      	pop	{r3}
 8008208:	469e      	mov	lr, r3
 800820a:	4770      	bx	lr
