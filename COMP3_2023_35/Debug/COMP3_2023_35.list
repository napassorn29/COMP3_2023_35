
COMP3_2023_35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c4c  08005c4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c54  08005c54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000000c  08005c68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005c68  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcf6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1f  00000000  00000000  0002dd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00030510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001608b  00000000  00000000  00031048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2be  00000000  00000000  000470d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089da1  00000000  00000000  00055391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df132  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000310c  00000000  00000000  000df184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005c14 	.word	0x08005c14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005c14 	.word	0x08005c14

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fe72 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f814 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f970 	bl	80007cc <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f936 	bl	800075c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f90a 	bl	8000708 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f4:	f000 f876 	bl	80005e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80004f8:	f000 f8a2 	bl	8000640 <MX_I2C3_Init>
  MX_SPI3_Init();
 80004fc:	f000 f8ce 	bl	800069c <MX_SPI3_Init>
//	uint8_t text[] = "\r\n-------Calculator : press number please------\r\n";
//	HAL_UART_Transmit(&huart2, text, 50, 10);


  // SPI_LED_5
 	SPITxRx_Setup();
 8000500:	f000 f9f6 	bl	80008f0 <SPITxRx_Setup>
 	setOutputGPIOB();
 8000504:	f000 fa34 	bl	8000970 <setOutputGPIOB>

    /* USER CODE BEGIN 3 */
//	  EEPROMWrite();
//	  EEPROMRead(eepromReadBack,4);

	  Set_SPI_LED();
 8000508:	f000 fb2c 	bl	8000b64 <Set_SPI_LED>
  {
 800050c:	e7fc      	b.n	8000508 <main+0x2c>
	...

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f005 fb70 	bl	8005c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000580:	2310      	movs	r3, #16
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058a:	2304      	movs	r3, #4
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800058e:	2304      	movs	r3, #4
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fb1e 	bl	8003bd8 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a2:	f000 fb0f 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fd80 	bl	80040c8 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ce:	f000 faf9 	bl	8000bc4 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x50>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_I2C1_Init+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_I2C1_Init+0x58>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_I2C1_Init+0x50>)
 8000602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_I2C1_Init+0x50>)
 8000622:	f001 fcb9 	bl	8001f98 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 faca 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028
 8000638:	40005400 	.word	0x40005400
 800063c:	00061a80 	.word	0x00061a80

08000640 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C3_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C3_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C3_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C3_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C3_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C3_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C3_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C3_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C3_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C3_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C3_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C3_Init+0x50>)
 800067e:	f001 fc8b 	bl	8001f98 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 fa9c 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000007c 	.word	0x2000007c
 8000694:	40005c00 	.word	0x40005c00
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_SPI3_Init+0x64>)
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <MX_SPI3_Init+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_SPI3_Init+0x64>)
 80006a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_SPI3_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_SPI3_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_SPI3_Init+0x64>)
 80006bc:	2202      	movs	r2, #2
 80006be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_SPI3_Init+0x64>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_SPI3_Init+0x64>)
 80006c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006cc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_SPI3_Init+0x64>)
 80006d0:	2228      	movs	r2, #40	; 0x28
 80006d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_SPI3_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SPI3_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_SPI3_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SPI3_Init+0x64>)
 80006e8:	220a      	movs	r2, #10
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_SPI3_Init+0x64>)
 80006ee:	f003 ff0b 	bl	8004508 <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80006f8:	f000 fa64 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000190 	.word	0x20000190
 8000704:	40003c00 	.word	0x40003c00

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000740:	f004 fb28 	bl	8004d94 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 fa3b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200001e8 	.word	0x200001e8
 8000758:	40004400 	.word	0x40004400

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_DMA_Init+0x6c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <MX_DMA_Init+0x6c>)
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_DMA_Init+0x6c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	200b      	movs	r0, #11
 8000784:	f000 fe91 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000788:	200b      	movs	r0, #11
 800078a:	f000 feaa 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	200c      	movs	r0, #12
 8000794:	f000 fe89 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000798:	200c      	movs	r0, #12
 800079a:	f000 fea2 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2010      	movs	r0, #16
 80007a4:	f000 fe81 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007a8:	2010      	movs	r0, #16
 80007aa:	f000 fe9a 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2011      	movs	r0, #17
 80007b4:	f000 fe79 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007b8:	2011      	movs	r0, #17
 80007ba:	f000 fe92 	bl	80014e2 <HAL_NVIC_EnableIRQ>

}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <MX_GPIO_Init+0x114>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a3d      	ldr	r2, [pc, #244]	; (80008e0 <MX_GPIO_Init+0x114>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <MX_GPIO_Init+0x114>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a36      	ldr	r2, [pc, #216]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_GPIO_Init+0x114>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_GPIO_Init+0x114>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <MX_GPIO_Init+0x114>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_GPIO_Init+0x114>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	481c      	ldr	r0, [pc, #112]	; (80008e4 <MX_GPIO_Init+0x118>)
 8000874:	f001 fb76 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2104      	movs	r1, #4
 800087c:	481a      	ldr	r0, [pc, #104]	; (80008e8 <MX_GPIO_Init+0x11c>)
 800087e:	f001 fb71 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4814      	ldr	r0, [pc, #80]	; (80008ec <MX_GPIO_Init+0x120>)
 800089a:	f001 f9c7 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089e:	2320      	movs	r3, #32
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <MX_GPIO_Init+0x118>)
 80008b6:	f001 f9b9 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_GPIO_Init+0x11c>)
 80008d2:	f001 f9ab 	bl	8001c2c <HAL_GPIO_Init>

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40020800 	.word	0x40020800

080008f0 <SPITxRx_Setup>:



// SPI_LED_5
void SPITxRx_Setup()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80008f4:	2200      	movs	r2, #0
 80008f6:	2104      	movs	r1, #4
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <SPITxRx_Setup+0x28>)
 80008fa:	f001 fb33 	bl	8001f64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fcd4 	bl	80012ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000904:	2201      	movs	r2, #1
 8000906:	2104      	movs	r1, #4
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <SPITxRx_Setup+0x28>)
 800090a:	f001 fb2b 	bl	8001f64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800090e:	2001      	movs	r0, #1
 8000910:	f000 fccc 	bl	80012ac <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40020c00 	.word	0x40020c00

0800091c <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 8000920:	2104      	movs	r1, #4
 8000922:	480f      	ldr	r0, [pc, #60]	; (8000960 <SPITxRx_readIO+0x44>)
 8000924:	f001 fb06 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d016      	beq.n	800095c <SPITxRx_readIO+0x40>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2104      	movs	r1, #4
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <SPITxRx_readIO+0x44>)
 8000934:	f001 fb16 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <SPITxRx_readIO+0x48>)
 800093a:	2241      	movs	r2, #65	; 0x41
 800093c:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <SPITxRx_readIO+0x48>)
 8000940:	2212      	movs	r2, #18
 8000942:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <SPITxRx_readIO+0x48>)
 8000946:	2200      	movs	r2, #0
 8000948:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SPITxRx_readIO+0x48>)
 800094c:	2200      	movs	r2, #0
 800094e:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000950:	2304      	movs	r3, #4
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SPITxRx_readIO+0x4c>)
 8000954:	4903      	ldr	r1, [pc, #12]	; (8000964 <SPITxRx_readIO+0x48>)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <SPITxRx_readIO+0x50>)
 8000958:	f003 fe60 	bl	800461c <HAL_SPI_TransmitReceive_IT>
	}
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020c00 	.word	0x40020c00
 8000964:	200002f8 	.word	0x200002f8
 8000968:	200002ec 	.word	0x200002ec
 800096c:	20000190 	.word	0x20000190

08000970 <setOutputGPIOB>:


void setOutputGPIOB()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 8000974:	2104      	movs	r1, #4
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <setOutputGPIOB+0x40>)
 8000978:	f001 fadc 	bl	8001f34 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d013      	beq.n	80009aa <setOutputGPIOB+0x3a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <setOutputGPIOB+0x40>)
 8000988:	f001 faec 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <setOutputGPIOB+0x44>)
 800098e:	2240      	movs	r2, #64	; 0x40
 8000990:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x01;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <setOutputGPIOB+0x44>)
 8000994:	2201      	movs	r2, #1
 8000996:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00000000;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <setOutputGPIOB+0x44>)
 800099a:	2200      	movs	r2, #0
 800099c:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 800099e:	2303      	movs	r3, #3
 80009a0:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <setOutputGPIOB+0x48>)
 80009a2:	4904      	ldr	r1, [pc, #16]	; (80009b4 <setOutputGPIOB+0x44>)
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <setOutputGPIOB+0x4c>)
 80009a6:	f003 fe39 	bl	800461c <HAL_SPI_TransmitReceive_IT>
	}
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	200002f8 	.word	0x200002f8
 80009b8:	200002ec 	.word	0x200002ec
 80009bc:	20000190 	.word	0x20000190

080009c0 <SPITxRx_writeIO>:

void SPITxRx_writeIO()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 80009c4:	2104      	movs	r1, #4
 80009c6:	485b      	ldr	r0, [pc, #364]	; (8000b34 <SPITxRx_writeIO+0x174>)
 80009c8:	f001 fab4 	bl	8001f34 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 80ae 	beq.w	8000b30 <SPITxRx_writeIO+0x170>
	{
		if(SPIRx[2] == 0b00000010)
 80009d4:	4b58      	ldr	r3, [pc, #352]	; (8000b38 <SPITxRx_writeIO+0x178>)
 80009d6:	789b      	ldrb	r3, [r3, #2]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d130      	bne.n	8000a3e <SPITxRx_writeIO+0x7e>
		{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2104      	movs	r1, #4
 80009e0:	4854      	ldr	r0, [pc, #336]	; (8000b34 <SPITxRx_writeIO+0x174>)
 80009e2:	f001 fabf 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 80009e6:	4b55      	ldr	r3, [pc, #340]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 80009e8:	2240      	movs	r2, #64	; 0x40
 80009ea:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 80009ec:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 80009ee:	2213      	movs	r2, #19
 80009f0:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b10101010;
 80009f2:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 80009f4:	22aa      	movs	r2, #170	; 0xaa
 80009f6:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80009f8:	2303      	movs	r3, #3
 80009fa:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <SPITxRx_writeIO+0x178>)
 80009fc:	494f      	ldr	r1, [pc, #316]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 80009fe:	4850      	ldr	r0, [pc, #320]	; (8000b40 <SPITxRx_writeIO+0x180>)
 8000a00:	f003 fe0c 	bl	800461c <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(500);
 8000a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a08:	f000 fc50 	bl	80012ac <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4848      	ldr	r0, [pc, #288]	; (8000b34 <SPITxRx_writeIO+0x174>)
 8000a12:	f001 faa7 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a18:	2240      	movs	r2, #64	; 0x40
 8000a1a:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a1e:	2213      	movs	r2, #19
 8000a20:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b01010101;
 8000a22:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a24:	2255      	movs	r2, #85	; 0x55
 8000a26:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a28:	2303      	movs	r3, #3
 8000a2a:	4a43      	ldr	r2, [pc, #268]	; (8000b38 <SPITxRx_writeIO+0x178>)
 8000a2c:	4943      	ldr	r1, [pc, #268]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a2e:	4844      	ldr	r0, [pc, #272]	; (8000b40 <SPITxRx_writeIO+0x180>)
 8000a30:	f003 fdf4 	bl	800461c <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(500);
 8000a34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a38:	f000 fc38 	bl	80012ac <HAL_Delay>
		SPITx[2] = 0b11111100;
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
		HAL_Delay(100);
		}
	}
}
 8000a3c:	e078      	b.n	8000b30 <SPITxRx_writeIO+0x170>
		else if(SPIRx[2] == 0b00000011)
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	; (8000b38 <SPITxRx_writeIO+0x178>)
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d114      	bne.n	8000a70 <SPITxRx_writeIO+0xb0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2104      	movs	r1, #4
 8000a4a:	483a      	ldr	r0, [pc, #232]	; (8000b34 <SPITxRx_writeIO+0x174>)
 8000a4c:	f001 fa8a 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000a50:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a52:	2240      	movs	r2, #64	; 0x40
 8000a54:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a58:	2213      	movs	r2, #19
 8000a5a:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111111;
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a62:	2303      	movs	r3, #3
 8000a64:	4a34      	ldr	r2, [pc, #208]	; (8000b38 <SPITxRx_writeIO+0x178>)
 8000a66:	4935      	ldr	r1, [pc, #212]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a68:	4835      	ldr	r0, [pc, #212]	; (8000b40 <SPITxRx_writeIO+0x180>)
 8000a6a:	f003 fdd7 	bl	800461c <HAL_SPI_TransmitReceive_IT>
}
 8000a6e:	e05f      	b.n	8000b30 <SPITxRx_writeIO+0x170>
		else if(SPIRx[2] == 0b00000001)
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <SPITxRx_writeIO+0x178>)
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d15b      	bne.n	8000b30 <SPITxRx_writeIO+0x170>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	482d      	ldr	r0, [pc, #180]	; (8000b34 <SPITxRx_writeIO+0x174>)
 8000a7e:	f001 fa71 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a84:	2240      	movs	r2, #64	; 0x40
 8000a86:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a8a:	2213      	movs	r2, #19
 8000a8c:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00111111;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a90:	223f      	movs	r2, #63	; 0x3f
 8000a92:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a94:	2303      	movs	r3, #3
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <SPITxRx_writeIO+0x178>)
 8000a98:	4928      	ldr	r1, [pc, #160]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000a9a:	4829      	ldr	r0, [pc, #164]	; (8000b40 <SPITxRx_writeIO+0x180>)
 8000a9c:	f003 fdbe 	bl	800461c <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000aa0:	2064      	movs	r0, #100	; 0x64
 8000aa2:	f000 fc03 	bl	80012ac <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4822      	ldr	r0, [pc, #136]	; (8000b34 <SPITxRx_writeIO+0x174>)
 8000aac:	f001 fa5a 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000ab8:	2213      	movs	r2, #19
 8000aba:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11001111;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000abe:	22cf      	movs	r2, #207	; 0xcf
 8000ac0:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <SPITxRx_writeIO+0x178>)
 8000ac6:	491d      	ldr	r1, [pc, #116]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000ac8:	481d      	ldr	r0, [pc, #116]	; (8000b40 <SPITxRx_writeIO+0x180>)
 8000aca:	f003 fda7 	bl	800461c <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	f000 fbec 	bl	80012ac <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	4816      	ldr	r0, [pc, #88]	; (8000b34 <SPITxRx_writeIO+0x174>)
 8000ada:	f001 fa43 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000ae0:	2240      	movs	r2, #64	; 0x40
 8000ae2:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000ae6:	2213      	movs	r2, #19
 8000ae8:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11110011;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000aec:	22f3      	movs	r2, #243	; 0xf3
 8000aee:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000af0:	2303      	movs	r3, #3
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <SPITxRx_writeIO+0x178>)
 8000af4:	4911      	ldr	r1, [pc, #68]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <SPITxRx_writeIO+0x180>)
 8000af8:	f003 fd90 	bl	800461c <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000afc:	2064      	movs	r0, #100	; 0x64
 8000afe:	f000 fbd5 	bl	80012ac <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2104      	movs	r1, #4
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <SPITxRx_writeIO+0x174>)
 8000b08:	f001 fa2c 	bl	8001f64 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000b0e:	2240      	movs	r2, #64	; 0x40
 8000b10:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000b14:	2213      	movs	r2, #19
 8000b16:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111100;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000b1a:	22fc      	movs	r2, #252	; 0xfc
 8000b1c:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b1e:	2303      	movs	r3, #3
 8000b20:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SPITxRx_writeIO+0x178>)
 8000b22:	4906      	ldr	r1, [pc, #24]	; (8000b3c <SPITxRx_writeIO+0x17c>)
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <SPITxRx_writeIO+0x180>)
 8000b26:	f003 fd79 	bl	800461c <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000b2a:	2064      	movs	r0, #100	; 0x64
 8000b2c:	f000 fbbe 	bl	80012ac <HAL_Delay>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	200002ec 	.word	0x200002ec
 8000b3c:	200002f8 	.word	0x200002f8
 8000b40:	20000190 	.word	0x20000190

08000b44 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000b52:	f001 fa07 	bl	8001f64 <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <Set_SPI_LED>:


void Set_SPI_LED()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick() > timestamp)
 8000b68:	f000 fb94 	bl	8001294 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <Set_SPI_LED+0x58>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d91f      	bls.n	8000bb6 <Set_SPI_LED+0x52>
	{
		timestamp = HAL_GetTick() + 10;
 8000b76:	f000 fb8d 	bl	8001294 <HAL_GetTick>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	330a      	adds	r3, #10
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <Set_SPI_LED+0x58>)
 8000b80:	6013      	str	r3, [r2, #0]
		LEDstate++;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <Set_SPI_LED+0x5c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <Set_SPI_LED+0x5c>)
 8000b8c:	701a      	strb	r2, [r3, #0]
		LEDstate = LEDstate % 2;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <Set_SPI_LED+0x5c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <Set_SPI_LED+0x5c>)
 8000b9a:	701a      	strb	r2, [r3, #0]
		switch (LEDstate)
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <Set_SPI_LED+0x5c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <Set_SPI_LED+0x46>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d003      	beq.n	8000bb0 <Set_SPI_LED+0x4c>
		case 1:
		  SPITxRx_writeIO();
		  break;
		}
	}
}
 8000ba8:	e006      	b.n	8000bb8 <Set_SPI_LED+0x54>
		  SPITxRx_readIO();
 8000baa:	f7ff feb7 	bl	800091c <SPITxRx_readIO>
		  break;
 8000bae:	e003      	b.n	8000bb8 <Set_SPI_LED+0x54>
		  SPITxRx_writeIO();
 8000bb0:	f7ff ff06 	bl	80009c0 <SPITxRx_writeIO>
		  break;
 8000bb4:	e000      	b.n	8000bb8 <Set_SPI_LED+0x54>
	}
 8000bb6:	bf00      	nop
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000304 	.word	0x20000304
 8000bc0:	20000302 	.word	0x20000302

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fc40 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a7a      	ldr	r2, [pc, #488]	; (8000e28 <HAL_I2C_MspInit+0x208>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	f040 809d 	bne.w	8000d7e <HAL_I2C_MspInit+0x15e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	4b78      	ldr	r3, [pc, #480]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a77      	ldr	r2, [pc, #476]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b75      	ldr	r3, [pc, #468]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c66:	2312      	movs	r3, #18
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c72:	2304      	movs	r3, #4
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	486c      	ldr	r0, [pc, #432]	; (8000e30 <HAL_I2C_MspInit+0x210>)
 8000c7e:	f000 ffd5 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	4b69      	ldr	r3, [pc, #420]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a68      	ldr	r2, [pc, #416]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b66      	ldr	r3, [pc, #408]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000c9e:	4b65      	ldr	r3, [pc, #404]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000ca0:	4a65      	ldr	r2, [pc, #404]	; (8000e38 <HAL_I2C_MspInit+0x218>)
 8000ca2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ca4:	4b63      	ldr	r3, [pc, #396]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cac:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb2:	4b60      	ldr	r3, [pc, #384]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb8:	4b5e      	ldr	r3, [pc, #376]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cbe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cc0:	4b5c      	ldr	r3, [pc, #368]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cc8:	4b5a      	ldr	r3, [pc, #360]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000cd0:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd6:	4b57      	ldr	r3, [pc, #348]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cdc:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ce2:	4854      	ldr	r0, [pc, #336]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000ce4:	f000 fc18 	bl	8001518 <HAL_DMA_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_I2C_MspInit+0xd2>
    {
      Error_Handler();
 8000cee:	f7ff ff69 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8000cf8:	4a4e      	ldr	r2, [pc, #312]	; (8000e34 <HAL_I2C_MspInit+0x214>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000cfe:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d00:	4a4f      	ldr	r2, [pc, #316]	; (8000e40 <HAL_I2C_MspInit+0x220>)
 8000d02:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8000d04:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d0c:	2240      	movs	r2, #64	; 0x40
 8000d0e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d16:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d1e:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d2c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d2e:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d34:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d40:	483e      	ldr	r0, [pc, #248]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d42:	f000 fbe9 	bl	8001518 <HAL_DMA_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 8000d4c:	f7ff ff3a 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a3a      	ldr	r2, [pc, #232]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
 8000d56:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <HAL_I2C_MspInit+0x21c>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	201f      	movs	r0, #31
 8000d62:	f000 fba2 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d66:	201f      	movs	r0, #31
 8000d68:	f000 fbbb 	bl	80014e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2020      	movs	r0, #32
 8000d72:	f000 fb9a 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d76:	2020      	movs	r0, #32
 8000d78:	f000 fbb3 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d7c:	e050      	b.n	8000e20 <HAL_I2C_MspInit+0x200>
  else if(hi2c->Instance==I2C3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <HAL_I2C_MspInit+0x224>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d14b      	bne.n	8000e20 <HAL_I2C_MspInit+0x200>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc6:	2312      	movs	r3, #18
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481a      	ldr	r0, [pc, #104]	; (8000e48 <HAL_I2C_MspInit+0x228>)
 8000dde:	f000 ff25 	bl	8001c2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de8:	2312      	movs	r3, #18
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000df4:	2304      	movs	r3, #4
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4813      	ldr	r0, [pc, #76]	; (8000e4c <HAL_I2C_MspInit+0x22c>)
 8000e00:	f000 ff14 	bl	8001c2c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000e0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e12:	6413      	str	r3, [r2, #64]	; 0x40
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_I2C_MspInit+0x20c>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	; 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400
 8000e34:	200000d0 	.word	0x200000d0
 8000e38:	40026010 	.word	0x40026010
 8000e3c:	20000130 	.word	0x20000130
 8000e40:	40026028 	.word	0x40026028
 8000e44:	40005c00 	.word	0x40005c00
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_SPI_MspInit+0x94>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d134      	bne.n	8000edc <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_SPI_MspInit+0x98>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_SPI_MspInit+0x98>)
 8000e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_SPI_MspInit+0x98>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_SPI_MspInit+0x98>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_SPI_MspInit+0x98>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_SPI_MspInit+0x98>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000eaa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <HAL_SPI_MspInit+0x9c>)
 8000ec8:	f000 feb0 	bl	8001c2c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2033      	movs	r0, #51	; 0x33
 8000ed2:	f000 faea 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000ed6:	2033      	movs	r0, #51	; 0x33
 8000ed8:	f000 fb03 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40003c00 	.word	0x40003c00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020800 	.word	0x40020800

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a4c      	ldr	r2, [pc, #304]	; (8001040 <HAL_UART_MspInit+0x150>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	f040 8091 	bne.w	8001036 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <HAL_UART_MspInit+0x154>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a49      	ldr	r2, [pc, #292]	; (8001044 <HAL_UART_MspInit+0x154>)
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_UART_MspInit+0x154>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4b43      	ldr	r3, [pc, #268]	; (8001044 <HAL_UART_MspInit+0x154>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a42      	ldr	r2, [pc, #264]	; (8001044 <HAL_UART_MspInit+0x154>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b40      	ldr	r3, [pc, #256]	; (8001044 <HAL_UART_MspInit+0x154>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4838      	ldr	r0, [pc, #224]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000f68:	f000 fe60 	bl	8001c2c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000f6e:	4a38      	ldr	r2, [pc, #224]	; (8001050 <HAL_UART_MspInit+0x160>)
 8000f70:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000f74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fae:	4827      	ldr	r0, [pc, #156]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000fb0:	f000 fab2 	bl	8001518 <HAL_DMA_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000fba:	f7ff fe03 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_UART_MspInit+0x164>)
 8000fcc:	4a22      	ldr	r2, [pc, #136]	; (8001058 <HAL_UART_MspInit+0x168>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <HAL_UART_MspInit+0x164>)
 8000fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_UART_MspInit+0x164>)
 8000fda:	2240      	movs	r2, #64	; 0x40
 8000fdc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_UART_MspInit+0x164>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_UART_MspInit+0x164>)
 8000fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_UART_MspInit+0x164>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_UART_MspInit+0x164>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_UART_MspInit+0x164>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0x164>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_UART_MspInit+0x164>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800100a:	4812      	ldr	r0, [pc, #72]	; (8001054 <HAL_UART_MspInit+0x164>)
 800100c:	f000 fa84 	bl	8001518 <HAL_DMA_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001016:	f7ff fdd5 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <HAL_UART_MspInit+0x164>)
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_UART_MspInit+0x164>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2026      	movs	r0, #38	; 0x26
 800102c:	f000 fa3d 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001030:	2026      	movs	r0, #38	; 0x26
 8001032:	f000 fa56 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004400 	.word	0x40004400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000
 800104c:	2000022c 	.word	0x2000022c
 8001050:	40026088 	.word	0x40026088
 8001054:	2000028c 	.word	0x2000028c
 8001058:	400260a0 	.word	0x400260a0

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f8e0 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <DMA1_Stream0_IRQHandler+0x10>)
 80010b6:	f000 fb6f 	bl	8001798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000d0 	.word	0x200000d0

080010c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DMA1_Stream1_IRQHandler+0x10>)
 80010ca:	f000 fb65 	bl	8001798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000130 	.word	0x20000130

080010d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DMA1_Stream5_IRQHandler+0x10>)
 80010de:	f000 fb5b 	bl	8001798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000022c 	.word	0x2000022c

080010ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <DMA1_Stream6_IRQHandler+0x10>)
 80010f2:	f000 fb51 	bl	8001798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000028c 	.word	0x2000028c

08001100 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <I2C1_EV_IRQHandler+0x10>)
 8001106:	f001 f88b 	bl	8002220 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000028 	.word	0x20000028

08001114 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <I2C1_ER_IRQHandler+0x10>)
 800111a:	f001 f9f2 	bl	8002502 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000028 	.word	0x20000028

08001128 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART2_IRQHandler+0x10>)
 800112e:	f003 fe7f 	bl	8004e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001e8 	.word	0x200001e8

0800113c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <SPI3_IRQHandler+0x10>)
 8001142:	f003 faff 	bl	8004744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000190 	.word	0x20000190

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffd7 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f004 fd0b 	bl	8005bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff f999 	bl	80004dc <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b8:	08005c5c 	.word	0x08005c5c
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c0:	2000030c 	.word	0x2000030c

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_Init+0x40>)
 80011d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_Init+0x40>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x40>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f94f 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff fce8 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f967 	bl	80014fe <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f92f 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	20000008 	.word	0x20000008
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000308 	.word	0x20000308

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000308 	.word	0x20000308

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff ffee 	bl	8001294 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffde 	bl	8001294 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff29 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff3e 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff31 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa2 	bl	8001450 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff feb6 	bl	8001294 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e099      	b.n	8001668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001554:	e00f      	b.n	8001576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001556:	f7ff fe9d 	bl	8001294 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b05      	cmp	r3, #5
 8001562:	d908      	bls.n	8001576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2220      	movs	r2, #32
 8001568:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e078      	b.n	8001668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e8      	bne.n	8001556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_DMA_Init+0x158>)
 8001590:	4013      	ands	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d107      	bne.n	80015e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	4313      	orrs	r3, r2
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f023 0307 	bic.w	r3, r3, #7
 80015f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	4313      	orrs	r3, r2
 8001600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	2b04      	cmp	r3, #4
 8001608:	d117      	bne.n	800163a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00e      	beq.n	800163a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fa89 	bl	8001b34 <DMA_CheckFifoParam>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2240      	movs	r2, #64	; 0x40
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001636:	2301      	movs	r3, #1
 8001638:	e016      	b.n	8001668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fa40 	bl	8001ac8 <DMA_CalcBaseAndBitshift>
 8001648:	4603      	mov	r3, r0
 800164a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	223f      	movs	r2, #63	; 0x3f
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	f010803f 	.word	0xf010803f

08001674 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001682:	f7ff fe07 	bl	8001294 <HAL_GetTick>
 8001686:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d008      	beq.n	80016a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e052      	b.n	800174c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0216 	bic.w	r2, r2, #22
 80016b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <HAL_DMA_Abort+0x62>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0208 	bic.w	r2, r2, #8
 80016e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f6:	e013      	b.n	8001720 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f8:	f7ff fdcc 	bl	8001294 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b05      	cmp	r3, #5
 8001704:	d90c      	bls.n	8001720 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e015      	b.n	800174c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e4      	bne.n	80016f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001732:	223f      	movs	r2, #63	; 0x3f
 8001734:	409a      	lsls	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d004      	beq.n	8001772 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2280      	movs	r2, #128	; 0x80
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00c      	b.n	800178c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2205      	movs	r2, #5
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017a4:	4b8e      	ldr	r3, [pc, #568]	; (80019e0 <HAL_DMA_IRQHandler+0x248>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a8e      	ldr	r2, [pc, #568]	; (80019e4 <HAL_DMA_IRQHandler+0x24c>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0a9b      	lsrs	r3, r3, #10
 80017b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2208      	movs	r2, #8
 80017c4:	409a      	lsls	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01a      	beq.n	8001804 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0204 	bic.w	r2, r2, #4
 80017ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f0:	2208      	movs	r2, #8
 80017f2:	409a      	lsls	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	f043 0201 	orr.w	r2, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001808:	2201      	movs	r2, #1
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d012      	beq.n	800183a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	2201      	movs	r2, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001832:	f043 0202 	orr.w	r2, r3, #2
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183e:	2204      	movs	r2, #4
 8001840:	409a      	lsls	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d012      	beq.n	8001870 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00b      	beq.n	8001870 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	2204      	movs	r2, #4
 800185e:	409a      	lsls	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	f043 0204 	orr.w	r2, r3, #4
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	2210      	movs	r2, #16
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d043      	beq.n	8001908 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d03c      	beq.n	8001908 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	2210      	movs	r2, #16
 8001894:	409a      	lsls	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d018      	beq.n	80018da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d108      	bne.n	80018c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d024      	beq.n	8001908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
 80018c6:	e01f      	b.n	8001908 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d01b      	beq.n	8001908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
 80018d8:	e016      	b.n	8001908 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0208 	bic.w	r2, r2, #8
 80018f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	2220      	movs	r2, #32
 800190e:	409a      	lsls	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 808f 	beq.w	8001a38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8087 	beq.w	8001a38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	2220      	movs	r2, #32
 8001930:	409a      	lsls	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b05      	cmp	r3, #5
 8001940:	d136      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0216 	bic.w	r2, r2, #22
 8001950:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001960:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <HAL_DMA_IRQHandler+0x1da>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0208 	bic.w	r2, r2, #8
 8001980:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	223f      	movs	r2, #63	; 0x3f
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d07e      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	4798      	blx	r3
        }
        return;
 80019ae:	e079      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01d      	beq.n	80019fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10d      	bne.n	80019e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d031      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
 80019dc:	e02c      	b.n	8001a38 <HAL_DMA_IRQHandler+0x2a0>
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000
 80019e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d023      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
 80019f8:	e01e      	b.n	8001a38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10f      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0210 	bic.w	r2, r2, #16
 8001a16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d032      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d022      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2205      	movs	r2, #5
 8001a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d307      	bcc.n	8001a80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f2      	bne.n	8001a64 <HAL_DMA_IRQHandler+0x2cc>
 8001a7e:	e000      	b.n	8001a82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
 8001aa2:	e000      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001aa4:	bf00      	nop
    }
  }
}
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aba:	b2db      	uxtb	r3, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	3b10      	subs	r3, #16
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <DMA_CalcBaseAndBitshift+0x64>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d909      	bls.n	8001b0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001afe:	f023 0303 	bic.w	r3, r3, #3
 8001b02:	1d1a      	adds	r2, r3, #4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58
 8001b08:	e007      	b.n	8001b1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	aaaaaaab 	.word	0xaaaaaaab
 8001b30:	08005c44 	.word	0x08005c44

08001b34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d11f      	bne.n	8001b8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d856      	bhi.n	8001c02 <DMA_CheckFifoParam+0xce>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <DMA_CheckFifoParam+0x28>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001b6d 	.word	0x08001b6d
 8001b60:	08001b7f 	.word	0x08001b7f
 8001b64:	08001b6d 	.word	0x08001b6d
 8001b68:	08001c03 	.word	0x08001c03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d046      	beq.n	8001c06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7c:	e043      	b.n	8001c06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b86:	d140      	bne.n	8001c0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b8c:	e03d      	b.n	8001c0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b96:	d121      	bne.n	8001bdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d837      	bhi.n	8001c0e <DMA_CheckFifoParam+0xda>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <DMA_CheckFifoParam+0x70>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001bbb 	.word	0x08001bbb
 8001bac:	08001bb5 	.word	0x08001bb5
 8001bb0:	08001bcd 	.word	0x08001bcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb8:	e030      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d025      	beq.n	8001c12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bca:	e022      	b.n	8001c12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd4:	d11f      	bne.n	8001c16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bda:	e01c      	b.n	8001c16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d903      	bls.n	8001bea <DMA_CheckFifoParam+0xb6>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d003      	beq.n	8001bf0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001be8:	e018      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
      break;
 8001bee:	e015      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001c00:	e00b      	b.n	8001c1a <DMA_CheckFifoParam+0xe6>
      break;
 8001c02:	bf00      	nop
 8001c04:	e00a      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c06:	bf00      	nop
 8001c08:	e008      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0a:	bf00      	nop
 8001c0c:	e006      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0e:	bf00      	nop
 8001c10:	e004      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c12:	bf00      	nop
 8001c14:	e002      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c16:	bf00      	nop
 8001c18:	e000      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e159      	b.n	8001efc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8148 	bne.w	8001ef6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80a2 	beq.w	8001ef6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a56      	ldr	r2, [pc, #344]	; (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b54      	ldr	r3, [pc, #336]	; (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_GPIO_Init+0x2ec>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <HAL_GPIO_Init+0x2f0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x202>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x2f4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x1fe>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a47      	ldr	r2, [pc, #284]	; (8001f24 <HAL_GPIO_Init+0x2f8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <HAL_GPIO_Init+0x2fc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x1f6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x1f2>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e40:	4935      	ldr	r1, [pc, #212]	; (8001f18 <HAL_GPIO_Init+0x2ec>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e72:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e9c:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	f67f aea2 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e12b      	b.n	8002202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fe2e 	bl	8000c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ffc:	f002 fa5c 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8002000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4a81      	ldr	r2, [pc, #516]	; (800220c <HAL_I2C_Init+0x274>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d807      	bhi.n	800201c <HAL_I2C_Init+0x84>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a80      	ldr	r2, [pc, #512]	; (8002210 <HAL_I2C_Init+0x278>)
 8002010:	4293      	cmp	r3, r2
 8002012:	bf94      	ite	ls
 8002014:	2301      	movls	r3, #1
 8002016:	2300      	movhi	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e006      	b.n	800202a <HAL_I2C_Init+0x92>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4a7d      	ldr	r2, [pc, #500]	; (8002214 <HAL_I2C_Init+0x27c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	bf94      	ite	ls
 8002024:	2301      	movls	r3, #1
 8002026:	2300      	movhi	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0e7      	b.n	8002202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4a78      	ldr	r2, [pc, #480]	; (8002218 <HAL_I2C_Init+0x280>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9b      	lsrs	r3, r3, #18
 800203c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a6a      	ldr	r2, [pc, #424]	; (800220c <HAL_I2C_Init+0x274>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d802      	bhi.n	800206c <HAL_I2C_Init+0xd4>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3301      	adds	r3, #1
 800206a:	e009      	b.n	8002080 <HAL_I2C_Init+0xe8>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	4a69      	ldr	r2, [pc, #420]	; (800221c <HAL_I2C_Init+0x284>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	3301      	adds	r3, #1
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002092:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	495c      	ldr	r1, [pc, #368]	; (800220c <HAL_I2C_Init+0x274>)
 800209c:	428b      	cmp	r3, r1
 800209e:	d819      	bhi.n	80020d4 <HAL_I2C_Init+0x13c>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e59      	subs	r1, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ae:	1c59      	adds	r1, r3, #1
 80020b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020b4:	400b      	ands	r3, r1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_I2C_Init+0x138>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1e59      	subs	r1, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ce:	e051      	b.n	8002174 <HAL_I2C_Init+0x1dc>
 80020d0:	2304      	movs	r3, #4
 80020d2:	e04f      	b.n	8002174 <HAL_I2C_Init+0x1dc>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d111      	bne.n	8002100 <HAL_I2C_Init+0x168>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1e58      	subs	r0, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	440b      	add	r3, r1
 80020ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e012      	b.n	8002126 <HAL_I2C_Init+0x18e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e58      	subs	r0, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	0099      	lsls	r1, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Init+0x196>
 800212a:	2301      	movs	r3, #1
 800212c:	e022      	b.n	8002174 <HAL_I2C_Init+0x1dc>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10e      	bne.n	8002154 <HAL_I2C_Init+0x1bc>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e58      	subs	r0, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	440b      	add	r3, r1
 8002144:	fbb0 f3f3 	udiv	r3, r0, r3
 8002148:	3301      	adds	r3, #1
 800214a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	e00f      	b.n	8002174 <HAL_I2C_Init+0x1dc>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e58      	subs	r0, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	0099      	lsls	r1, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	6809      	ldr	r1, [r1, #0]
 8002178:	4313      	orrs	r3, r2
 800217a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6911      	ldr	r1, [r2, #16]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68d2      	ldr	r2, [r2, #12]
 80021ae:	4311      	orrs	r1, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	000186a0 	.word	0x000186a0
 8002210:	001e847f 	.word	0x001e847f
 8002214:	003d08ff 	.word	0x003d08ff
 8002218:	431bde83 	.word	0x431bde83
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002240:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b10      	cmp	r3, #16
 800224e:	d003      	beq.n	8002258 <HAL_I2C_EV_IRQHandler+0x38>
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	f040 80c1 	bne.w	80023da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_I2C_EV_IRQHandler+0x6e>
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002278:	d003      	beq.n	8002282 <HAL_I2C_EV_IRQHandler+0x62>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002280:	d101      	bne.n	8002286 <HAL_I2C_EV_IRQHandler+0x66>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_I2C_EV_IRQHandler+0x68>
 8002286:	2300      	movs	r3, #0
 8002288:	2b01      	cmp	r3, #1
 800228a:	f000 8132 	beq.w	80024f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00c      	beq.n	80022b2 <HAL_I2C_EV_IRQHandler+0x92>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	0a5b      	lsrs	r3, r3, #9
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f001 fc7b 	bl	8003ba0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fd83 	bl	8002db6 <I2C_Master_SB>
 80022b0:	e092      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	0a5b      	lsrs	r3, r3, #9
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fdf9 	bl	8002ec2 <I2C_Master_ADD10>
 80022d0:	e082      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	0a5b      	lsrs	r3, r3, #9
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fe13 	bl	8002f16 <I2C_Master_ADDR>
 80022f0:	e072      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03b      	beq.n	8002376 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800230c:	f000 80f3 	beq.w	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	09db      	lsrs	r3, r3, #7
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00f      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x11c>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	0a9b      	lsrs	r3, r3, #10
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x11c>
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f9f3 	bl	8002720 <I2C_MasterTransmit_TXE>
 800233a:	e04d      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80d6 	beq.w	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	0a5b      	lsrs	r3, r3, #9
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80cf 	beq.w	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002358:	7bbb      	ldrb	r3, [r7, #14]
 800235a:	2b21      	cmp	r3, #33	; 0x21
 800235c:	d103      	bne.n	8002366 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa7a 	bl	8002858 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002364:	e0c7      	b.n	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	f040 80c4 	bne.w	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fae8 	bl	8002944 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002374:	e0bf      	b.n	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002384:	f000 80b7 	beq.w	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	099b      	lsrs	r3, r3, #6
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00f      	beq.n	80023b4 <HAL_I2C_EV_IRQHandler+0x194>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	0a9b      	lsrs	r3, r3, #10
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <HAL_I2C_EV_IRQHandler+0x194>
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fb5d 	bl	8002a6c <I2C_MasterReceive_RXNE>
 80023b2:	e011      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 809a 	beq.w	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	0a5b      	lsrs	r3, r3, #9
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8093 	beq.w	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fc06 	bl	8002be2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023d6:	e08e      	b.n	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80023d8:	e08d      	b.n	80024f6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e007      	b.n	80023fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d012      	beq.n	800242e <HAL_I2C_EV_IRQHandler+0x20e>
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	0a5b      	lsrs	r3, r3, #9
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00c      	beq.n	800242e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002424:	69b9      	ldr	r1, [r7, #24]
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 ffc4 	bl	80033b4 <I2C_Slave_ADDR>
 800242c:	e066      	b.n	80024fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_I2C_EV_IRQHandler+0x22e>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	0a5b      	lsrs	r3, r3, #9
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fffe 	bl	8003448 <I2C_Slave_STOPF>
 800244c:	e056      	b.n	80024fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800244e:	7bbb      	ldrb	r3, [r7, #14]
 8002450:	2b21      	cmp	r3, #33	; 0x21
 8002452:	d002      	beq.n	800245a <HAL_I2C_EV_IRQHandler+0x23a>
 8002454:	7bbb      	ldrb	r3, [r7, #14]
 8002456:	2b29      	cmp	r3, #41	; 0x29
 8002458:	d125      	bne.n	80024a6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	09db      	lsrs	r3, r3, #7
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00f      	beq.n	8002486 <HAL_I2C_EV_IRQHandler+0x266>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	0a9b      	lsrs	r3, r3, #10
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_I2C_EV_IRQHandler+0x266>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 feda 	bl	8003238 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002484:	e039      	b.n	80024fa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d033      	beq.n	80024fa <HAL_I2C_EV_IRQHandler+0x2da>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	0a5b      	lsrs	r3, r3, #9
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d02d      	beq.n	80024fa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 ff07 	bl	80032b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024a4:	e029      	b.n	80024fa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00f      	beq.n	80024d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	0a9b      	lsrs	r3, r3, #10
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 ff12 	bl	80032f4 <I2C_SlaveReceive_RXNE>
 80024d0:	e014      	b.n	80024fc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00e      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x2dc>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	0a5b      	lsrs	r3, r3, #9
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 ff40 	bl	8003370 <I2C_SlaveReceive_BTF>
 80024f0:	e004      	b.n	80024fc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80024f2:	bf00      	nop
 80024f4:	e002      	b.n	80024fc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b08a      	sub	sp, #40	; 0x28
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002524:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <HAL_I2C_ER_IRQHandler+0x4e>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800254e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	0a5b      	lsrs	r3, r3, #9
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00e      	beq.n	800257a <HAL_I2C_ER_IRQHandler+0x78>
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002578:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	0a9b      	lsrs	r3, r3, #10
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d03f      	beq.n	8002606 <HAL_I2C_ER_IRQHandler+0x104>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d039      	beq.n	8002606 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002592:	7efb      	ldrb	r3, [r7, #27]
 8002594:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80025ac:	7ebb      	ldrb	r3, [r7, #26]
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d112      	bne.n	80025d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10f      	bne.n	80025d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	2b21      	cmp	r3, #33	; 0x21
 80025bc:	d008      	beq.n	80025d0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b29      	cmp	r3, #41	; 0x29
 80025c2:	d005      	beq.n	80025d0 <HAL_I2C_ER_IRQHandler+0xce>
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b28      	cmp	r3, #40	; 0x28
 80025c8:	d106      	bne.n	80025d8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b21      	cmp	r3, #33	; 0x21
 80025ce:	d103      	bne.n	80025d8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f001 f869 	bl	80036a8 <I2C_Slave_AF>
 80025d6:	e016      	b.n	8002606 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025ea:	7efb      	ldrb	r3, [r7, #27]
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d002      	beq.n	80025f6 <HAL_I2C_ER_IRQHandler+0xf4>
 80025f0:	7efb      	ldrb	r3, [r7, #27]
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d107      	bne.n	8002606 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002604:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	0adb      	lsrs	r3, r3, #11
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00e      	beq.n	8002630 <HAL_I2C_ER_IRQHandler+0x12e>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800262e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f001 f8a0 	bl	8003788 <I2C_ITError>
  }
}
 8002648:	bf00      	nop
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
 80026ac:	4613      	mov	r3, r2
 80026ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002736:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d150      	bne.n	80027e8 <I2C_MasterTransmit_TXE+0xc8>
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b21      	cmp	r3, #33	; 0x21
 800274a:	d14d      	bne.n	80027e8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d01d      	beq.n	800278e <I2C_MasterTransmit_TXE+0x6e>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b20      	cmp	r3, #32
 8002756:	d01a      	beq.n	800278e <I2C_MasterTransmit_TXE+0x6e>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800275e:	d016      	beq.n	800278e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800276e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2211      	movs	r2, #17
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ff62 	bl	8002650 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800278c:	e060      	b.n	8002850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800279c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d107      	bne.n	80027d8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff7d 	bl	80026d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027d6:	e03b      	b.n	8002850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff35 	bl	8002650 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027e6:	e033      	b.n	8002850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b21      	cmp	r3, #33	; 0x21
 80027ec:	d005      	beq.n	80027fa <I2C_MasterTransmit_TXE+0xda>
 80027ee:	7bbb      	ldrb	r3, [r7, #14]
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d12d      	bne.n	8002850 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b22      	cmp	r3, #34	; 0x22
 80027f8:	d12a      	bne.n	8002850 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002812:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002814:	e01c      	b.n	8002850 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d103      	bne.n	800282a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f88e 	bl	8002944 <I2C_MemoryTransmit_TXE_BTF>
}
 8002828:	e012      	b.n	8002850 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800284e:	e7ff      	b.n	8002850 <I2C_MasterTransmit_TXE+0x130>
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b21      	cmp	r3, #33	; 0x21
 8002870:	d164      	bne.n	800293c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d012      	beq.n	80028a2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80028a0:	e04c      	b.n	800293c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d01d      	beq.n	80028e4 <I2C_MasterTransmit_BTF+0x8c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d01a      	beq.n	80028e4 <I2C_MasterTransmit_BTF+0x8c>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b4:	d016      	beq.n	80028e4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028c4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2211      	movs	r2, #17
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff feb7 	bl	8002650 <HAL_I2C_MasterTxCpltCallback>
}
 80028e2:	e02b      	b.n	800293c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028f2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d107      	bne.n	800292e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fed2 	bl	80026d0 <HAL_I2C_MemTxCpltCallback>
}
 800292c:	e006      	b.n	800293c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe8a 	bl	8002650 <HAL_I2C_MasterTxCpltCallback>
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11d      	bne.n	8002998 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d10b      	bne.n	800297c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002968:	b2da      	uxtb	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	1c9a      	adds	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800297a:	e073      	b.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002980:	b29b      	uxth	r3, r3
 8002982:	121b      	asrs	r3, r3, #8
 8002984:	b2da      	uxtb	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002996:	e065      	b.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10b      	bne.n	80029b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029b6:	e055      	b.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d151      	bne.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b22      	cmp	r3, #34	; 0x22
 80029c4:	d10d      	bne.n	80029e2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029e0:	e040      	b.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b21      	cmp	r3, #33	; 0x21
 80029f0:	d112      	bne.n	8002a18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	781a      	ldrb	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a16:	e025      	b.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d120      	bne.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b21      	cmp	r3, #33	; 0x21
 8002a26:	d11d      	bne.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a36:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fe36 	bl	80026d0 <HAL_I2C_MemTxCpltCallback>
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b22      	cmp	r3, #34	; 0x22
 8002a7e:	f040 80ac 	bne.w	8002bda <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d921      	bls.n	8002ad4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	f040 808c 	bne.w	8002bda <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002ad2:	e082      	b.n	8002bda <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d075      	beq.n	8002bc8 <I2C_MasterReceive_RXNE+0x15c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d002      	beq.n	8002ae8 <I2C_MasterReceive_RXNE+0x7c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d16f      	bne.n	8002bc8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f001 f827 	bl	8003b3c <I2C_WaitOnSTOPRequestThroughIT>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d142      	bne.n	8002b7a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b02:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b40      	cmp	r3, #64	; 0x40
 8002b4c:	d10a      	bne.n	8002b64 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fdc1 	bl	80026e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b62:	e03a      	b.n	8002bda <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2212      	movs	r2, #18
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fd76 	bl	8002664 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b78:	e02f      	b.n	8002bda <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fd99 	bl	80026f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bc6:	e008      	b.n	8002bda <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd6:	605a      	str	r2, [r3, #4]
}
 8002bd8:	e7ff      	b.n	8002bda <I2C_MasterReceive_RXNE+0x16e>
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d11b      	bne.n	8002c32 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c08:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002c30:	e0bd      	b.n	8002dae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d129      	bne.n	8002c90 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00a      	beq.n	8002c68 <I2C_MasterReceive_BTF+0x86>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d007      	beq.n	8002c68 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c8e:	e08e      	b.n	8002dae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d176      	bne.n	8002d88 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d002      	beq.n	8002ca6 <I2C_MasterReceive_BTF+0xc4>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d108      	bne.n	8002cb8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e019      	b.n	8002cec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d002      	beq.n	8002cc4 <I2C_MasterReceive_BTF+0xe2>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d108      	bne.n	8002cd6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e00a      	b.n	8002cec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d007      	beq.n	8002cec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d10a      	bne.n	8002d72 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fcba 	bl	80026e4 <HAL_I2C_MemRxCpltCallback>
}
 8002d70:	e01d      	b.n	8002dae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2212      	movs	r2, #18
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff fc6f 	bl	8002664 <HAL_I2C_MasterRxCpltCallback>
}
 8002d86:	e012      	b.n	8002dae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d117      	bne.n	8002dfa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002de2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002de4:	e067      	b.n	8002eb6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]
}
 8002df8:	e05d      	b.n	8002eb6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e02:	d133      	bne.n	8002e6c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b21      	cmp	r3, #33	; 0x21
 8002e0e:	d109      	bne.n	8002e24 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e20:	611a      	str	r2, [r3, #16]
 8002e22:	e008      	b.n	8002e36 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <I2C_Master_SB+0x92>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d108      	bne.n	8002e5a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d032      	beq.n	8002eb6 <I2C_Master_SB+0x100>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d02d      	beq.n	8002eb6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e68:	605a      	str	r2, [r3, #4]
}
 8002e6a:	e024      	b.n	8002eb6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10e      	bne.n	8002e92 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	11db      	asrs	r3, r3, #7
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 0306 	and.w	r3, r3, #6
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f063 030f 	orn	r3, r3, #15
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]
}
 8002e90:	e011      	b.n	8002eb6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10d      	bne.n	8002eb6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	11db      	asrs	r3, r3, #7
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 0306 	and.w	r3, r3, #6
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f063 030e 	orn	r3, r3, #14
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	611a      	str	r2, [r3, #16]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <I2C_Master_ADD10+0x26>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d108      	bne.n	8002efa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00c      	beq.n	8002f0a <I2C_Master_ADD10+0x48>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f08:	605a      	str	r2, [r3, #4]
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b091      	sub	sp, #68	; 0x44
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b22      	cmp	r3, #34	; 0x22
 8002f3e:	f040 8169 	bne.w	8003214 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <I2C_Master_ADDR+0x54>
 8002f4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d10b      	bne.n	8002f6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	e160      	b.n	800322c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d11d      	bne.n	8002fae <I2C_Master_ADDR+0x98>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f7a:	d118      	bne.n	8002fae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	651a      	str	r2, [r3, #80]	; 0x50
 8002fac:	e13e      	b.n	800322c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d113      	bne.n	8002fe0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e115      	b.n	800320c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	f040 808a 	bne.w	8003100 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ff2:	d137      	bne.n	8003064 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003012:	d113      	bne.n	800303c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003022:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	e0e7      	b.n	800320c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303c:	2300      	movs	r3, #0
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e0d3      	b.n	800320c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	2b08      	cmp	r3, #8
 8003068:	d02e      	beq.n	80030c8 <I2C_Master_ADDR+0x1b2>
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	2b20      	cmp	r3, #32
 800306e:	d02b      	beq.n	80030c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	2b12      	cmp	r3, #18
 8003074:	d102      	bne.n	800307c <I2C_Master_ADDR+0x166>
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	2b01      	cmp	r3, #1
 800307a:	d125      	bne.n	80030c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	2b04      	cmp	r3, #4
 8003080:	d00e      	beq.n	80030a0 <I2C_Master_ADDR+0x18a>
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2b02      	cmp	r3, #2
 8003086:	d00b      	beq.n	80030a0 <I2C_Master_ADDR+0x18a>
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	2b10      	cmp	r3, #16
 800308c:	d008      	beq.n	80030a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e007      	b.n	80030b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	e0a1      	b.n	800320c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e085      	b.n	800320c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d14d      	bne.n	80031a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	2b04      	cmp	r3, #4
 800310e:	d016      	beq.n	800313e <I2C_Master_ADDR+0x228>
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	2b02      	cmp	r3, #2
 8003114:	d013      	beq.n	800313e <I2C_Master_ADDR+0x228>
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2b10      	cmp	r3, #16
 800311a:	d010      	beq.n	800313e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e007      	b.n	800314e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315c:	d117      	bne.n	800318e <I2C_Master_ADDR+0x278>
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003164:	d00b      	beq.n	800317e <I2C_Master_ADDR+0x268>
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	2b01      	cmp	r3, #1
 800316a:	d008      	beq.n	800317e <I2C_Master_ADDR+0x268>
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	2b08      	cmp	r3, #8
 8003170:	d005      	beq.n	800317e <I2C_Master_ADDR+0x268>
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	2b10      	cmp	r3, #16
 8003176:	d002      	beq.n	800317e <I2C_Master_ADDR+0x268>
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	2b20      	cmp	r3, #32
 800317c:	d107      	bne.n	800318e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800318c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	e032      	b.n	800320c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c4:	d117      	bne.n	80031f6 <I2C_Master_ADDR+0x2e0>
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031cc:	d00b      	beq.n	80031e6 <I2C_Master_ADDR+0x2d0>
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d008      	beq.n	80031e6 <I2C_Master_ADDR+0x2d0>
 80031d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d005      	beq.n	80031e6 <I2C_Master_ADDR+0x2d0>
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d002      	beq.n	80031e6 <I2C_Master_ADDR+0x2d0>
 80031e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d107      	bne.n	80031f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003212:	e00b      	b.n	800322c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
}
 800322a:	e7ff      	b.n	800322c <I2C_Master_ADDR+0x316>
 800322c:	bf00      	nop
 800322e:	3744      	adds	r7, #68	; 0x44
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d02b      	beq.n	80032aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d114      	bne.n	80032aa <I2C_SlaveTransmit_TXE+0x72>
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b29      	cmp	r3, #41	; 0x29
 8003284:	d111      	bne.n	80032aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003294:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2221      	movs	r2, #33	; 0x21
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2228      	movs	r2, #40	; 0x28
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff f9e7 	bl	8002678 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d011      	beq.n	80032e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02c      	beq.n	8003368 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d114      	bne.n	8003368 <I2C_SlaveReceive_RXNE+0x74>
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b2a      	cmp	r3, #42	; 0x2a
 8003342:	d111      	bne.n	8003368 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2222      	movs	r2, #34	; 0x22
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2228      	movs	r2, #40	; 0x28
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff f992 	bl	800268c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d012      	beq.n	80033a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033ce:	2b28      	cmp	r3, #40	; 0x28
 80033d0:	d127      	bne.n	8003422 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	09db      	lsrs	r3, r3, #7
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	81bb      	strh	r3, [r7, #12]
 8003404:	e002      	b.n	800340c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003414:	89ba      	ldrh	r2, [r7, #12]
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff f940 	bl	80026a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003420:	e00e      	b.n	8003440 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003466:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003494:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a4:	d172      	bne.n	800358c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b22      	cmp	r3, #34	; 0x22
 80034aa:	d002      	beq.n	80034b2 <I2C_Slave_STOPF+0x6a>
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b2a      	cmp	r3, #42	; 0x2a
 80034b0:	d135      	bne.n	800351e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f043 0204 	orr.w	r2, r3, #4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fade 	bl	8001aac <HAL_DMA_GetState>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d049      	beq.n	800358a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	4a69      	ldr	r2, [pc, #420]	; (80036a0 <I2C_Slave_STOPF+0x258>)
 80034fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe f926 	bl	8001754 <HAL_DMA_Abort_IT>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d03d      	beq.n	800358a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003518:	4610      	mov	r0, r2
 800351a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800351c:	e035      	b.n	800358a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003550:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe faa8 	bl	8001aac <HAL_DMA_GetState>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d014      	beq.n	800358c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <I2C_Slave_STOPF+0x258>)
 8003568:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe f8f0 	bl	8001754 <HAL_DMA_Abort_IT>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003584:	4610      	mov	r0, r2
 8003586:	4798      	blx	r3
 8003588:	e000      	b.n	800358c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800358a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03e      	beq.n	8003614 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d112      	bne.n	80035ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d112      	bne.n	80035fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0204 	orr.w	r2, r3, #4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f8b3 	bl	8003788 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003622:	e039      	b.n	8003698 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b2a      	cmp	r3, #42	; 0x2a
 8003628:	d109      	bne.n	800363e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2228      	movs	r2, #40	; 0x28
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff f827 	bl	800268c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b28      	cmp	r3, #40	; 0x28
 8003648:	d111      	bne.n	800366e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <I2C_Slave_STOPF+0x25c>)
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff f828 	bl	80026bc <HAL_I2C_ListenCpltCallback>
}
 800366c:	e014      	b.n	8003698 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	2b22      	cmp	r3, #34	; 0x22
 8003674:	d002      	beq.n	800367c <I2C_Slave_STOPF+0x234>
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b22      	cmp	r3, #34	; 0x22
 800367a:	d10d      	bne.n	8003698 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fe fffa 	bl	800268c <HAL_I2C_SlaveRxCpltCallback>
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	080039ed 	.word	0x080039ed
 80036a4:	ffff0000 	.word	0xffff0000

080036a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d002      	beq.n	80036ca <I2C_Slave_AF+0x22>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d129      	bne.n	800371e <I2C_Slave_AF+0x76>
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b28      	cmp	r3, #40	; 0x28
 80036ce:	d126      	bne.n	800371e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <I2C_Slave_AF+0xdc>)
 80036d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe ffd0 	bl	80026bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800371c:	e02e      	b.n	800377c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b21      	cmp	r3, #33	; 0x21
 8003722:	d126      	bne.n	8003772 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <I2C_Slave_AF+0xdc>)
 8003728:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2221      	movs	r2, #33	; 0x21
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800374e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003758:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003768:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe ff84 	bl	8002678 <HAL_I2C_SlaveTxCpltCallback>
}
 8003770:	e004      	b.n	800377c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800377a:	615a      	str	r2, [r3, #20]
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	ffff0000 	.word	0xffff0000

08003788 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003796:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d002      	beq.n	80037ac <I2C_ITError+0x24>
 80037a6:	7bbb      	ldrb	r3, [r7, #14]
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d10a      	bne.n	80037c2 <I2C_ITError+0x3a>
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b22      	cmp	r3, #34	; 0x22
 80037b0:	d107      	bne.n	80037c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037c8:	2b28      	cmp	r3, #40	; 0x28
 80037ca:	d107      	bne.n	80037dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2228      	movs	r2, #40	; 0x28
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037da:	e015      	b.n	8003808 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ea:	d00a      	beq.n	8003802 <I2C_ITError+0x7a>
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b60      	cmp	r3, #96	; 0x60
 80037f0:	d007      	beq.n	8003802 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003816:	d162      	bne.n	80038de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003826:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d020      	beq.n	8003878 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	4a6a      	ldr	r2, [pc, #424]	; (80039e4 <I2C_ITError+0x25c>)
 800383c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd ff86 	bl	8001754 <HAL_DMA_Abort_IT>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8089 	beq.w	8003962 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003872:	4610      	mov	r0, r2
 8003874:	4798      	blx	r3
 8003876:	e074      	b.n	8003962 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	4a59      	ldr	r2, [pc, #356]	; (80039e4 <I2C_ITError+0x25c>)
 800387e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd ff65 	bl	8001754 <HAL_DMA_Abort_IT>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d068      	beq.n	8003962 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d10b      	bne.n	80038b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d8:	4610      	mov	r0, r2
 80038da:	4798      	blx	r3
 80038dc:	e041      	b.n	8003962 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b60      	cmp	r3, #96	; 0x60
 80038e8:	d125      	bne.n	8003936 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d10b      	bne.n	800391e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe feec 	bl	800270c <HAL_I2C_AbortCpltCallback>
 8003934:	e015      	b.n	8003962 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d10b      	bne.n	800395c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fe fecb 	bl	80026f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10e      	bne.n	8003990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800399e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d113      	bne.n	80039dc <I2C_ITError+0x254>
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b28      	cmp	r3, #40	; 0x28
 80039b8:	d110      	bne.n	80039dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <I2C_ITError+0x260>)
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe fe70 	bl	80026bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	080039ed 	.word	0x080039ed
 80039e8:	ffff0000 	.word	0xffff0000

080039ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a06:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <I2C_DMAAbort+0x148>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <I2C_DMAAbort+0x14c>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0a1a      	lsrs	r2, r3, #8
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00da      	lsls	r2, r3, #3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003a32:	e00a      	b.n	8003a4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a48:	d0ea      	beq.n	8003a20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	2200      	movs	r2, #0
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	2200      	movs	r2, #0
 8003a68:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d10e      	bne.n	8003ada <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ad2:	6978      	ldr	r0, [r7, #20]
 8003ad4:	f7fe fe1a 	bl	800270c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ad8:	e027      	b.n	8003b2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ae0:	2b28      	cmp	r3, #40	; 0x28
 8003ae2:	d117      	bne.n	8003b14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2228      	movs	r2, #40	; 0x28
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b12:	e007      	b.n	8003b24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b24:	6978      	ldr	r0, [r7, #20]
 8003b26:	f7fe fde7 	bl	80026f8 <HAL_I2C_ErrorCallback>
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000
 8003b38:	14f8b589 	.word	0x14f8b589

08003b3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	0a1a      	lsrs	r2, r3, #8
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e008      	b.n	8003b8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d0e9      	beq.n	8003b5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	14f8b589 	.word	0x14f8b589

08003ba0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003bb0:	d103      	bne.n	8003bba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003bb8:	e007      	b.n	8003bca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003bc2:	d102      	bne.n	8003bca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e267      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d075      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf6:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d00c      	beq.n	8003c1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c02:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d112      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0e:	4b82      	ldr	r3, [pc, #520]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	4b7e      	ldr	r3, [pc, #504]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05b      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x108>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d157      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e242      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCC_OscConfig+0x74>
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e01d      	b.n	8003c88 <HAL_RCC_OscConfig+0xb0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x98>
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6f      	ldr	r2, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6c      	ldr	r2, [pc, #432]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0xb0>
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a68      	ldr	r2, [pc, #416]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a65      	ldr	r2, [pc, #404]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fd fb00 	bl	8001294 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd fafc 	bl	8001294 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e207      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0xc0>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fd faec 	bl	8001294 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7fd fae8 	bl	8001294 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1f3      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0xe8>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d063      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d11c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d06:	4b44      	ldr	r3, [pc, #272]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCC_OscConfig+0x152>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1c7      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4937      	ldr	r1, [pc, #220]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	e03a      	b.n	8003db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCC_OscConfig+0x244>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fd faa1 	bl	8001294 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fd fa9d 	bl	8001294 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1a8      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d68:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4925      	ldr	r1, [pc, #148]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
 8003d88:	e015      	b.n	8003db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCC_OscConfig+0x244>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fd fa80 	bl	8001294 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d98:	f7fd fa7c 	bl	8001294 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e187      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d036      	beq.n	8003e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_RCC_OscConfig+0x248>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd fa60 	bl	8001294 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd8:	f7fd fa5c 	bl	8001294 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e167      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x200>
 8003df6:	e01b      	b.n	8003e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_OscConfig+0x248>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfe:	f7fd fa49 	bl	8001294 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	e00e      	b.n	8003e24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fd fa45 	bl	8001294 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d907      	bls.n	8003e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e150      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470000 	.word	0x42470000
 8003e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ea      	bne.n	8003e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8097 	beq.w	8003f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e42:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	4b7d      	ldr	r3, [pc, #500]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a7c      	ldr	r2, [pc, #496]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5e:	4b7a      	ldr	r3, [pc, #488]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b77      	ldr	r3, [pc, #476]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d118      	bne.n	8003eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	4b74      	ldr	r3, [pc, #464]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a73      	ldr	r2, [pc, #460]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fd fa05 	bl	8001294 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7fd fa01 	bl	8001294 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e10c      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b6a      	ldr	r3, [pc, #424]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2ea>
 8003eb4:	4b64      	ldr	r3, [pc, #400]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a63      	ldr	r2, [pc, #396]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e01c      	b.n	8003efc <HAL_RCC_OscConfig+0x324>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x30c>
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a5e      	ldr	r2, [pc, #376]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed6:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a5b      	ldr	r2, [pc, #364]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0x324>
 8003ee4:	4b58      	ldr	r3, [pc, #352]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef0:	4b55      	ldr	r3, [pc, #340]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a54      	ldr	r2, [pc, #336]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd f9c6 	bl	8001294 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fd f9c2 	bl	8001294 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0cb      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f22:	4b49      	ldr	r3, [pc, #292]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ee      	beq.n	8003f0c <HAL_RCC_OscConfig+0x334>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f30:	f7fd f9b0 	bl	8001294 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fd f9ac 	bl	8001294 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0b5      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4e:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ee      	bne.n	8003f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4b39      	ldr	r3, [pc, #228]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	4a38      	ldr	r2, [pc, #224]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a1 	beq.w	80040b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d05c      	beq.n	800403c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d141      	bne.n	800400e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fd f980 	bl	8001294 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd f97c 	bl	8001294 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e087      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b27      	ldr	r3, [pc, #156]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	491b      	ldr	r1, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fd f955 	bl	8001294 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fd f951 	bl	8001294 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e05c      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x416>
 800400c:	e054      	b.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fd f93e 	bl	8001294 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401c:	f7fd f93a 	bl	8001294 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e045      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x444>
 800403a:	e03d      	b.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d107      	bne.n	8004054 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e038      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
 8004048:	40023800 	.word	0x40023800
 800404c:	40007000 	.word	0x40007000
 8004050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x4ec>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d028      	beq.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d121      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d11a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004084:	4013      	ands	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800408a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408c:	4293      	cmp	r3, r2
 800408e:	d111      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	3b01      	subs	r3, #1
 800409e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d107      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800

080040c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0cc      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040dc:	4b68      	ldr	r3, [pc, #416]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d90c      	bls.n	8004104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b8      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	494d      	ldr	r1, [pc, #308]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d044      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d119      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e07f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d003      	beq.n	8004186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004182:	2b03      	cmp	r3, #3
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e06f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e067      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4934      	ldr	r1, [pc, #208]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b8:	f7fd f86c 	bl	8001294 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f7fd f868 	bl	8001294 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e04f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 020c 	and.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1eb      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d20c      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e032      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4916      	ldr	r1, [pc, #88]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	490e      	ldr	r1, [pc, #56]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424e:	f000 f821 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004252:	4602      	mov	r2, r0
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	490a      	ldr	r1, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	5ccb      	ldrb	r3, [r1, r3]
 8004262:	fa22 f303 	lsr.w	r3, r2, r3
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fc ffcc 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023c00 	.word	0x40023c00
 8004284:	40023800 	.word	0x40023800
 8004288:	08005c2c 	.word	0x08005c2c
 800428c:	20000000 	.word	0x20000000
 8004290:	20000004 	.word	0x20000004

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b094      	sub	sp, #80	; 0x50
 800429a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	647b      	str	r3, [r7, #68]	; 0x44
 80042a0:	2300      	movs	r3, #0
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a4:	2300      	movs	r3, #0
 80042a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ac:	4b79      	ldr	r3, [pc, #484]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d00d      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x40>
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	f200 80e1 	bhi.w	8004480 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x34>
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x3a>
 80042c6:	e0db      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b73      	ldr	r3, [pc, #460]	; (8004498 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042cc:	e0db      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ce:	4b73      	ldr	r3, [pc, #460]	; (800449c <HAL_RCC_GetSysClockFreq+0x208>)
 80042d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d2:	e0d8      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d4:	4b6f      	ldr	r3, [pc, #444]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042de:	4b6d      	ldr	r3, [pc, #436]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d063      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ea:	4b6a      	ldr	r3, [pc, #424]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	2200      	movs	r2, #0
 80042f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
 80042fe:	2300      	movs	r3, #0
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
 8004302:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	f04f 0000 	mov.w	r0, #0
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	0159      	lsls	r1, r3, #5
 8004314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004318:	0150      	lsls	r0, r2, #5
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4621      	mov	r1, r4
 8004320:	1a51      	subs	r1, r2, r1
 8004322:	6139      	str	r1, [r7, #16]
 8004324:	4629      	mov	r1, r5
 8004326:	eb63 0301 	sbc.w	r3, r3, r1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004338:	4659      	mov	r1, fp
 800433a:	018b      	lsls	r3, r1, #6
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004342:	4651      	mov	r1, sl
 8004344:	018a      	lsls	r2, r1, #6
 8004346:	4651      	mov	r1, sl
 8004348:	ebb2 0801 	subs.w	r8, r2, r1
 800434c:	4659      	mov	r1, fp
 800434e:	eb63 0901 	sbc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	462b      	mov	r3, r5
 8004374:	eb49 0303 	adc.w	r3, r9, r3
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004386:	4629      	mov	r1, r5
 8004388:	024b      	lsls	r3, r1, #9
 800438a:	4621      	mov	r1, r4
 800438c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004390:	4621      	mov	r1, r4
 8004392:	024a      	lsls	r2, r1, #9
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439a:	2200      	movs	r2, #0
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
 800439e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a4:	f7fb ff18 	bl	80001d8 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	e058      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b38      	ldr	r3, [pc, #224]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	2200      	movs	r2, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	4611      	mov	r1, r2
 80043be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	f04f 0000 	mov.w	r0, #0
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	0159      	lsls	r1, r3, #5
 80043da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043de:	0150      	lsls	r0, r2, #5
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4641      	mov	r1, r8
 80043e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ea:	4649      	mov	r1, r9
 80043ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004400:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004404:	ebb2 040a 	subs.w	r4, r2, sl
 8004408:	eb63 050b 	sbc.w	r5, r3, fp
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	00eb      	lsls	r3, r5, #3
 8004416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800441a:	00e2      	lsls	r2, r4, #3
 800441c:	4614      	mov	r4, r2
 800441e:	461d      	mov	r5, r3
 8004420:	4643      	mov	r3, r8
 8004422:	18e3      	adds	r3, r4, r3
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	464b      	mov	r3, r9
 8004428:	eb45 0303 	adc.w	r3, r5, r3
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800443a:	4629      	mov	r1, r5
 800443c:	028b      	lsls	r3, r1, #10
 800443e:	4621      	mov	r1, r4
 8004440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004444:	4621      	mov	r1, r4
 8004446:	028a      	lsls	r2, r1, #10
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444e:	2200      	movs	r2, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	61fa      	str	r2, [r7, #28]
 8004454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004458:	f7fb febe 	bl	80001d8 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4613      	mov	r3, r2
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	3301      	adds	r3, #1
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800447e:	e002      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetSysClockFreq+0x204>)
 8004482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004488:	4618      	mov	r0, r3
 800448a:	3750      	adds	r7, #80	; 0x50
 800448c:	46bd      	mov	sp, r7
 800448e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	00f42400 	.word	0x00f42400
 800449c:	007a1200 	.word	0x007a1200

080044a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000000 	.word	0x20000000

080044b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044bc:	f7ff fff0 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0a9b      	lsrs	r3, r3, #10
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	08005c3c 	.word	0x08005c3c

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044e4:	f7ff ffdc 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0b5b      	lsrs	r3, r3, #13
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	08005c3c 	.word	0x08005c3c

08004508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e07b      	b.n	8004612 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452a:	d009      	beq.n	8004540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
 8004532:	e005      	b.n	8004540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fc78 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	f003 0104 	and.w	r1, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0210 	and.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_SPI_TransmitReceive_IT+0x20>
 8004638:	2302      	movs	r3, #2
 800463a:	e075      	b.n	8004728 <HAL_SPI_TransmitReceive_IT+0x10c>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800464a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004652:	7dbb      	ldrb	r3, [r7, #22]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d00d      	beq.n	8004674 <HAL_SPI_TransmitReceive_IT+0x58>
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465e:	d106      	bne.n	800466e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_SPI_TransmitReceive_IT+0x52>
 8004668:	7dbb      	ldrb	r3, [r7, #22]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d002      	beq.n	8004674 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800466e:	2302      	movs	r3, #2
 8004670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004672:	e054      	b.n	800471e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <HAL_SPI_TransmitReceive_IT+0x6a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004680:	887b      	ldrh	r3, [r7, #2]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
    goto error;
 800468a:	e048      	b.n	800471e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b04      	cmp	r3, #4
 8004696:	d003      	beq.n	80046a0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2205      	movs	r2, #5
 800469c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	887a      	ldrh	r2, [r7, #2]
 80046b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	887a      	ldrh	r2, [r7, #2]
 80046b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	887a      	ldrh	r2, [r7, #2]
 80046c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_SPI_TransmitReceive_IT+0x118>)
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a17      	ldr	r2, [pc, #92]	; (8004738 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
 80046de:	e005      	b.n	80046ec <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <HAL_SPI_TransmitReceive_IT+0x120>)
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <HAL_SPI_TransmitReceive_IT+0x124>)
 80046ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80046fa:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d008      	beq.n	800471c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e000      	b.n	800471e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800471c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	08004a59 	.word	0x08004a59
 8004738:	08004ab9 	.word	0x08004ab9
 800473c:	08004995 	.word	0x08004995
 8004740:	080049f9 	.word	0x080049f9

08004744 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10f      	bne.n	8004788 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	099b      	lsrs	r3, r3, #6
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
    return;
 8004786:	e0d7      	b.n	8004938 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_SPI_IRQHandler+0x66>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	09db      	lsrs	r3, r3, #7
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	4798      	blx	r3
    return;
 80047a8:	e0c6      	b.n	8004938 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <HAL_SPI_IRQHandler+0x8c>
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	099b      	lsrs	r3, r3, #6
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80b4 	beq.w	8004938 <HAL_SPI_IRQHandler+0x1f4>
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80ad 	beq.w	8004938 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d023      	beq.n	8004832 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d011      	beq.n	800481a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	f043 0204 	orr.w	r2, r3, #4
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	e00b      	b.n	8004832 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	693b      	ldr	r3, [r7, #16]
        return;
 8004830:	e082      	b.n	8004938 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d014      	beq.n	8004868 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f043 0208 	orr.w	r2, r3, #8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004880:	2300      	movs	r3, #0
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	2b00      	cmp	r3, #0
 8004894:	d04f      	beq.n	8004936 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <HAL_SPI_IRQHandler+0x17e>
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d034      	beq.n	800492c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0203 	bic.w	r2, r2, #3
 80048d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d011      	beq.n	80048fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_SPI_IRQHandler+0x1fc>)
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc ff34 	bl	8001754 <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004902:	2b00      	cmp	r3, #0
 8004904:	d016      	beq.n	8004934 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <HAL_SPI_IRQHandler+0x1fc>)
 800490c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc ff1e 	bl	8001754 <HAL_DMA_Abort_IT>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800492a:	e003      	b.n	8004934 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f813 	bl	8004958 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004932:	e000      	b.n	8004936 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004934:	bf00      	nop
    return;
 8004936:	bf00      	nop
  }
}
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	0800496d 	.word	0x0800496d

08004944 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff ffe6 	bl	8004958 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f103 020c 	add.w	r2, r3, #12
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10f      	bne.n	80049f0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f95e 	bl	8004cac <SPI_CloseRxTx_ISR>
    }
  }
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10f      	bne.n	8004a50 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a3e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f92e 	bl	8004cac <SPI_CloseRxTx_ISR>
    }
  }
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10f      	bne.n	8004ab0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8fe 	bl	8004cac <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10f      	bne.n	8004b0e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004afc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f8cf 	bl	8004cac <SPI_CloseRxTx_ISR>
    }
  }
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b28:	f7fc fbb4 	bl	8001294 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b38:	f7fc fbac 	bl	8001294 <HAL_GetTick>
 8004b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	015b      	lsls	r3, r3, #5
 8004b44:	0d1b      	lsrs	r3, r3, #20
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	e054      	b.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d050      	beq.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b58:	f7fc fb9c 	bl	8001294 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d902      	bls.n	8004b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d13d      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b86:	d111      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b90:	d004      	beq.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9a:	d107      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb4:	d10f      	bne.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e017      	b.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4013      	ands	r3, r2
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	bf0c      	ite	eq
 8004c0a:	2301      	moveq	r3, #1
 8004c0c:	2300      	movne	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d19b      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000000 	.word	0x20000000

08004c28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <SPI_EndRxTxTransaction+0x7c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <SPI_EndRxTxTransaction+0x80>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	0d5b      	lsrs	r3, r3, #21
 8004c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c44:	fb02 f303 	mul.w	r3, r2, r3
 8004c48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c52:	d112      	bne.n	8004c7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff ff5a 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d016      	beq.n	8004c98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e00f      	b.n	8004c9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c90:	2b80      	cmp	r3, #128	; 0x80
 8004c92:	d0f2      	beq.n	8004c7a <SPI_EndRxTxTransaction+0x52>
 8004c94:	e000      	b.n	8004c98 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c96:	bf00      	nop
  }

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	165e9f81 	.word	0x165e9f81

08004cac <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004cb4:	4b35      	ldr	r3, [pc, #212]	; (8004d8c <SPI_CloseRxTx_ISR+0xe0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a35      	ldr	r2, [pc, #212]	; (8004d90 <SPI_CloseRxTx_ISR+0xe4>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	0a5b      	lsrs	r3, r3, #9
 8004cc0:	2264      	movs	r2, #100	; 0x64
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cc8:	f7fc fae4 	bl	8001294 <HAL_GetTick>
 8004ccc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0220 	bic.w	r2, r2, #32
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cf0:	e009      	b.n	8004d06 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0eb      	beq.n	8004cde <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	2164      	movs	r1, #100	; 0x64
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff ff8c 	bl	8004c28 <SPI_EndRxTxTransaction>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d115      	bne.n	8004d74 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d107      	bne.n	8004d64 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fdf1 	bl	8004944 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004d62:	e00e      	b.n	8004d82 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb fee9 	bl	8000b44 <HAL_SPI_TxRxCpltCallback>
}
 8004d72:	e006      	b.n	8004d82 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff fdeb 	bl	8004958 <HAL_SPI_ErrorCallback>
}
 8004d82:	bf00      	nop
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	057619f1 	.word	0x057619f1

08004d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e03f      	b.n	8004e26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc f898 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2224      	movs	r2, #36	; 0x24
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fc7b 	bl	80056d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b0ba      	sub	sp, #232	; 0xe8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10f      	bne.n	8004e96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_UART_IRQHandler+0x66>
 8004e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fb65 	bl	800555e <UART_Receive_IT>
      return;
 8004e94:	e256      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80de 	beq.w	800505c <HAL_UART_IRQHandler+0x22c>
 8004ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80d1 	beq.w	800505c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <HAL_UART_IRQHandler+0xae>
 8004ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_UART_IRQHandler+0xd2>
 8004eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f043 0202 	orr.w	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xf6>
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 0204 	orr.w	r2, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <HAL_UART_IRQHandler+0x126>
 8004f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f043 0208 	orr.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 81ed 	beq.w	800533a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_UART_IRQHandler+0x14e>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 faf0 	bl	800555e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <HAL_UART_IRQHandler+0x17a>
 8004fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d04f      	beq.n	800504a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9f8 	bl	80053a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d141      	bne.n	8005042 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1d9      	bne.n	8004fbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	2b00      	cmp	r3, #0
 8005010:	d013      	beq.n	800503a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	4a7d      	ldr	r2, [pc, #500]	; (800520c <HAL_UART_IRQHandler+0x3dc>)
 8005018:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	4618      	mov	r0, r3
 8005020:	f7fc fb98 	bl	8001754 <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e00e      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f99a 	bl	8005374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	e00a      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f996 	bl	8005374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	e006      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f992 	bl	8005374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005056:	e170      	b.n	800533a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	bf00      	nop
    return;
 800505a:	e16e      	b.n	800533a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	2b01      	cmp	r3, #1
 8005062:	f040 814a 	bne.w	80052fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8143 	beq.w	80052fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 813c 	beq.w	80052fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	f040 80b4 	bne.w	8005210 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8140 	beq.w	800533e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050c6:	429a      	cmp	r2, r3
 80050c8:	f080 8139 	bcs.w	800533e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050de:	f000 8088 	beq.w	80051f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800510e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800511a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1d9      	bne.n	80050e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800513e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005152:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005156:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800515a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e1      	bne.n	800512e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3314      	adds	r3, #20
 8005170:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800517a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3314      	adds	r3, #20
 800518a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800518e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005190:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800519c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c2:	f023 0310 	bic.w	r3, r3, #16
 80051c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80051d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e3      	bne.n	80051b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fc fa41 	bl	8001674 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8c0 	bl	8005388 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005208:	e099      	b.n	800533e <HAL_UART_IRQHandler+0x50e>
 800520a:	bf00      	nop
 800520c:	08005467 	.word	0x08005467
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005218:	b29b      	uxth	r3, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 808b 	beq.w	8005342 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800522c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8086 	beq.w	8005342 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800525a:	647a      	str	r2, [r7, #68]	; 0x44
 800525c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e3      	bne.n	8005236 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3314      	adds	r3, #20
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	623b      	str	r3, [r7, #32]
   return(result);
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005292:	633a      	str	r2, [r7, #48]	; 0x30
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0310 	bic.w	r3, r3, #16
 80052ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052d8:	61fa      	str	r2, [r7, #28]
 80052da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	617b      	str	r3, [r7, #20]
   return(result);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e3      	bne.n	80052b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f848 	bl	8005388 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052f8:	e023      	b.n	8005342 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_UART_IRQHandler+0x4ea>
 8005306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8bb 	bl	800548e <UART_Transmit_IT>
    return;
 8005318:	e014      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00e      	beq.n	8005344 <HAL_UART_IRQHandler+0x514>
 8005326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8fb 	bl	800552e <UART_EndTransmit_IT>
    return;
 8005338:	e004      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
    return;
 800533a:	bf00      	nop
 800533c:	e002      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
      return;
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
      return;
 8005342:	bf00      	nop
  }
}
 8005344:	37e8      	adds	r7, #232	; 0xe8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b095      	sub	sp, #84	; 0x54
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053c8:	643a      	str	r2, [r7, #64]	; 0x40
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e5      	bne.n	80053a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3314      	adds	r3, #20
 80053e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e5      	bne.n	80053dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	2b01      	cmp	r3, #1
 8005416:	d119      	bne.n	800544c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	60bb      	str	r3, [r7, #8]
   return(result);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	647b      	str	r3, [r7, #68]	; 0x44
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005438:	61ba      	str	r2, [r7, #24]
 800543a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6979      	ldr	r1, [r7, #20]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	613b      	str	r3, [r7, #16]
   return(result);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
}
 800545a:	bf00      	nop
 800545c:	3754      	adds	r7, #84	; 0x54
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff ff77 	bl	8005374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b21      	cmp	r3, #33	; 0x21
 80054a0:	d13e      	bne.n	8005520 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054aa:	d114      	bne.n	80054d6 <UART_Transmit_IT+0x48>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d110      	bne.n	80054d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	1c9a      	adds	r2, r3, #2
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	621a      	str	r2, [r3, #32]
 80054d4:	e008      	b.n	80054e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	1c59      	adds	r1, r3, #1
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6211      	str	r1, [r2, #32]
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4619      	mov	r1, r3
 80054f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800550a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff fefc 	bl	800534c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08c      	sub	sp, #48	; 0x30
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b22      	cmp	r3, #34	; 0x22
 8005570:	f040 80ab 	bne.w	80056ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557c:	d117      	bne.n	80055ae <UART_Receive_IT+0x50>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d113      	bne.n	80055ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559c:	b29a      	uxth	r2, r3
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	1c9a      	adds	r2, r3, #2
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28
 80055ac:	e026      	b.n	80055fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c0:	d007      	beq.n	80055d2 <UART_Receive_IT+0x74>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <UART_Receive_IT+0x82>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e008      	b.n	80055f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29b      	uxth	r3, r3
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4619      	mov	r1, r3
 800560a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800560c:	2b00      	cmp	r3, #0
 800560e:	d15a      	bne.n	80056c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0220 	bic.w	r2, r2, #32
 800561e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800562e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	2b01      	cmp	r3, #1
 800564e:	d135      	bne.n	80056bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	613b      	str	r3, [r7, #16]
   return(result);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f023 0310 	bic.w	r3, r3, #16
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	623a      	str	r2, [r7, #32]
 8005678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	69f9      	ldr	r1, [r7, #28]
 800567c:	6a3a      	ldr	r2, [r7, #32]
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	61bb      	str	r3, [r7, #24]
   return(result);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d10a      	bne.n	80056ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fe67 	bl	8005388 <HAL_UARTEx_RxEventCallback>
 80056ba:	e002      	b.n	80056c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fe4f 	bl	8005360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e002      	b.n	80056cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e000      	b.n	80056cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056ca:	2302      	movs	r3, #2
  }
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3730      	adds	r7, #48	; 0x30
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d8:	b0c0      	sub	sp, #256	; 0x100
 80056da:	af00      	add	r7, sp, #0
 80056dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	68d9      	ldr	r1, [r3, #12]
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	ea40 0301 	orr.w	r3, r0, r1
 80056fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	431a      	orrs	r2, r3
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	431a      	orrs	r2, r3
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800572c:	f021 010c 	bic.w	r1, r1, #12
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800573a:	430b      	orrs	r3, r1
 800573c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	6999      	ldr	r1, [r3, #24]
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	ea40 0301 	orr.w	r3, r0, r1
 800575a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b8f      	ldr	r3, [pc, #572]	; (80059a0 <UART_SetConfig+0x2cc>)
 8005764:	429a      	cmp	r2, r3
 8005766:	d005      	beq.n	8005774 <UART_SetConfig+0xa0>
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b8d      	ldr	r3, [pc, #564]	; (80059a4 <UART_SetConfig+0x2d0>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d104      	bne.n	800577e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7fe feb4 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8005778:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800577c:	e003      	b.n	8005786 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800577e:	f7fe fe9b 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8005782:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005790:	f040 810c 	bne.w	80059ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005798:	2200      	movs	r2, #0
 800579a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800579e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	1891      	adds	r1, r2, r2
 80057ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80057ae:	415b      	adcs	r3, r3
 80057b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057b6:	4621      	mov	r1, r4
 80057b8:	eb12 0801 	adds.w	r8, r2, r1
 80057bc:	4629      	mov	r1, r5
 80057be:	eb43 0901 	adc.w	r9, r3, r1
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057d6:	4690      	mov	r8, r2
 80057d8:	4699      	mov	r9, r3
 80057da:	4623      	mov	r3, r4
 80057dc:	eb18 0303 	adds.w	r3, r8, r3
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e4:	462b      	mov	r3, r5
 80057e6:	eb49 0303 	adc.w	r3, r9, r3
 80057ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005802:	460b      	mov	r3, r1
 8005804:	18db      	adds	r3, r3, r3
 8005806:	653b      	str	r3, [r7, #80]	; 0x50
 8005808:	4613      	mov	r3, r2
 800580a:	eb42 0303 	adc.w	r3, r2, r3
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
 8005810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005818:	f7fa fcde 	bl	80001d8 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005822:	fba3 2302 	umull	r2, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	011c      	lsls	r4, r3, #4
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005834:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005838:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	1891      	adds	r1, r2, r2
 8005842:	64b9      	str	r1, [r7, #72]	; 0x48
 8005844:	415b      	adcs	r3, r3
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005848:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800584c:	4641      	mov	r1, r8
 800584e:	eb12 0a01 	adds.w	sl, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb43 0b01 	adc.w	fp, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005864:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800586c:	4692      	mov	sl, r2
 800586e:	469b      	mov	fp, r3
 8005870:	4643      	mov	r3, r8
 8005872:	eb1a 0303 	adds.w	r3, sl, r3
 8005876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587a:	464b      	mov	r3, r9
 800587c:	eb4b 0303 	adc.w	r3, fp, r3
 8005880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005890:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005898:	460b      	mov	r3, r1
 800589a:	18db      	adds	r3, r3, r3
 800589c:	643b      	str	r3, [r7, #64]	; 0x40
 800589e:	4613      	mov	r3, r2
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	647b      	str	r3, [r7, #68]	; 0x44
 80058a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058ae:	f7fa fc93 	bl	80001d8 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <UART_SetConfig+0x2d4>)
 80058ba:	fba3 2301 	umull	r2, r3, r3, r1
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2264      	movs	r2, #100	; 0x64
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	1acb      	subs	r3, r1, r3
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058ce:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <UART_SetConfig+0x2d4>)
 80058d0:	fba3 2302 	umull	r2, r3, r3, r2
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058dc:	441c      	add	r4, r3
 80058de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058f0:	4642      	mov	r2, r8
 80058f2:	464b      	mov	r3, r9
 80058f4:	1891      	adds	r1, r2, r2
 80058f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058f8:	415b      	adcs	r3, r3
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005900:	4641      	mov	r1, r8
 8005902:	1851      	adds	r1, r2, r1
 8005904:	6339      	str	r1, [r7, #48]	; 0x30
 8005906:	4649      	mov	r1, r9
 8005908:	414b      	adcs	r3, r1
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005918:	4659      	mov	r1, fp
 800591a:	00cb      	lsls	r3, r1, #3
 800591c:	4651      	mov	r1, sl
 800591e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005922:	4651      	mov	r1, sl
 8005924:	00ca      	lsls	r2, r1, #3
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	4603      	mov	r3, r0
 800592c:	4642      	mov	r2, r8
 800592e:	189b      	adds	r3, r3, r2
 8005930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005934:	464b      	mov	r3, r9
 8005936:	460a      	mov	r2, r1
 8005938:	eb42 0303 	adc.w	r3, r2, r3
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800594c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005950:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005954:	460b      	mov	r3, r1
 8005956:	18db      	adds	r3, r3, r3
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 800595a:	4613      	mov	r3, r2
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005966:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800596a:	f7fa fc35 	bl	80001d8 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005974:	fba3 1302 	umull	r1, r3, r3, r2
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	2164      	movs	r1, #100	; 0x64
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	3332      	adds	r3, #50	; 0x32
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f003 0207 	and.w	r2, r3, #7
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4422      	add	r2, r4
 800599a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800599c:	e105      	b.n	8005baa <UART_SetConfig+0x4d6>
 800599e:	bf00      	nop
 80059a0:	40011000 	.word	0x40011000
 80059a4:	40011400 	.word	0x40011400
 80059a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059be:	4642      	mov	r2, r8
 80059c0:	464b      	mov	r3, r9
 80059c2:	1891      	adds	r1, r2, r2
 80059c4:	6239      	str	r1, [r7, #32]
 80059c6:	415b      	adcs	r3, r3
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ce:	4641      	mov	r1, r8
 80059d0:	1854      	adds	r4, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb43 0501 	adc.w	r5, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	00eb      	lsls	r3, r5, #3
 80059e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059e6:	00e2      	lsls	r2, r4, #3
 80059e8:	4614      	mov	r4, r2
 80059ea:	461d      	mov	r5, r3
 80059ec:	4643      	mov	r3, r8
 80059ee:	18e3      	adds	r3, r4, r3
 80059f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059f4:	464b      	mov	r3, r9
 80059f6:	eb45 0303 	adc.w	r3, r5, r3
 80059fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	008b      	lsls	r3, r1, #2
 8005a1e:	4621      	mov	r1, r4
 8005a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a24:	4621      	mov	r1, r4
 8005a26:	008a      	lsls	r2, r1, #2
 8005a28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a2c:	f7fa fbd4 	bl	80001d8 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4b60      	ldr	r3, [pc, #384]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005a36:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	011c      	lsls	r4, r3, #4
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	61b9      	str	r1, [r7, #24]
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a60:	4641      	mov	r1, r8
 8005a62:	1851      	adds	r1, r2, r1
 8005a64:	6139      	str	r1, [r7, #16]
 8005a66:	4649      	mov	r1, r9
 8005a68:	414b      	adcs	r3, r1
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a78:	4659      	mov	r1, fp
 8005a7a:	00cb      	lsls	r3, r1, #3
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a82:	4651      	mov	r1, sl
 8005a84:	00ca      	lsls	r2, r1, #3
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a94:	464b      	mov	r3, r9
 8005a96:	460a      	mov	r2, r1
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ab8:	4649      	mov	r1, r9
 8005aba:	008b      	lsls	r3, r1, #2
 8005abc:	4641      	mov	r1, r8
 8005abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	008a      	lsls	r2, r1, #2
 8005ac6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aca:	f7fa fb85 	bl	80001d8 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4b39      	ldr	r3, [pc, #228]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2164      	movs	r1, #100	; 0x64
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	3332      	adds	r3, #50	; 0x32
 8005ae6:	4a34      	ldr	r2, [pc, #208]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af2:	441c      	add	r4, r3
 8005af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af8:	2200      	movs	r2, #0
 8005afa:	673b      	str	r3, [r7, #112]	; 0x70
 8005afc:	677a      	str	r2, [r7, #116]	; 0x74
 8005afe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b02:	4642      	mov	r2, r8
 8005b04:	464b      	mov	r3, r9
 8005b06:	1891      	adds	r1, r2, r2
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b12:	4641      	mov	r1, r8
 8005b14:	1851      	adds	r1, r2, r1
 8005b16:	6039      	str	r1, [r7, #0]
 8005b18:	4649      	mov	r1, r9
 8005b1a:	414b      	adcs	r3, r1
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	00cb      	lsls	r3, r1, #3
 8005b2e:	4651      	mov	r1, sl
 8005b30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b34:	4651      	mov	r1, sl
 8005b36:	00ca      	lsls	r2, r1, #3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b44:	464b      	mov	r3, r9
 8005b46:	460a      	mov	r2, r1
 8005b48:	eb42 0303 	adc.w	r3, r2, r3
 8005b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	663b      	str	r3, [r7, #96]	; 0x60
 8005b58:	667a      	str	r2, [r7, #100]	; 0x64
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b66:	4649      	mov	r1, r9
 8005b68:	008b      	lsls	r3, r1, #2
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b70:	4641      	mov	r1, r8
 8005b72:	008a      	lsls	r2, r1, #2
 8005b74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b78:	f7fa fb2e 	bl	80001d8 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b82:	fba3 1302 	umull	r1, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2164      	movs	r1, #100	; 0x64
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	3332      	adds	r3, #50	; 0x32
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4422      	add	r2, r4
 8005ba8:	609a      	str	r2, [r3, #8]
}
 8005baa:	bf00      	nop
 8005bac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb6:	bf00      	nop
 8005bb8:	51eb851f 	.word	0x51eb851f

08005bbc <__libc_init_array>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	4d0d      	ldr	r5, [pc, #52]	; (8005bf4 <__libc_init_array+0x38>)
 8005bc0:	4c0d      	ldr	r4, [pc, #52]	; (8005bf8 <__libc_init_array+0x3c>)
 8005bc2:	1b64      	subs	r4, r4, r5
 8005bc4:	10a4      	asrs	r4, r4, #2
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	42a6      	cmp	r6, r4
 8005bca:	d109      	bne.n	8005be0 <__libc_init_array+0x24>
 8005bcc:	4d0b      	ldr	r5, [pc, #44]	; (8005bfc <__libc_init_array+0x40>)
 8005bce:	4c0c      	ldr	r4, [pc, #48]	; (8005c00 <__libc_init_array+0x44>)
 8005bd0:	f000 f820 	bl	8005c14 <_init>
 8005bd4:	1b64      	subs	r4, r4, r5
 8005bd6:	10a4      	asrs	r4, r4, #2
 8005bd8:	2600      	movs	r6, #0
 8005bda:	42a6      	cmp	r6, r4
 8005bdc:	d105      	bne.n	8005bea <__libc_init_array+0x2e>
 8005bde:	bd70      	pop	{r4, r5, r6, pc}
 8005be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be4:	4798      	blx	r3
 8005be6:	3601      	adds	r6, #1
 8005be8:	e7ee      	b.n	8005bc8 <__libc_init_array+0xc>
 8005bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bee:	4798      	blx	r3
 8005bf0:	3601      	adds	r6, #1
 8005bf2:	e7f2      	b.n	8005bda <__libc_init_array+0x1e>
 8005bf4:	08005c54 	.word	0x08005c54
 8005bf8:	08005c54 	.word	0x08005c54
 8005bfc:	08005c54 	.word	0x08005c54
 8005c00:	08005c58 	.word	0x08005c58

08005c04 <memset>:
 8005c04:	4402      	add	r2, r0
 8005c06:	4603      	mov	r3, r0
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d100      	bne.n	8005c0e <memset+0xa>
 8005c0c:	4770      	bx	lr
 8005c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c12:	e7f9      	b.n	8005c08 <memset+0x4>

08005c14 <_init>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr

08005c20 <_fini>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr
